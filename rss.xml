<?xml version="1.0"?>
<rss version="2.0">
    <channel>
        <title>沉鱼的博客</title>
        <subtitle>了解自我，超越自我</subtitle>
        <icon>https://scottalive.github.io/images/favicon.ico</icon>
        <link>https://scottalive.github.io</link>
        <author>
          <name>沉鱼</name>
        </author>
        <description>编程笔记 &amp; 资料分享</description>
        <language>zh-CN</language>
        <pubDate>Thu, 24 Apr 2025 15:07:49 +0800</pubDate>
        <lastBuildDate>Thu, 24 Apr 2025 15:07:49 +0800</lastBuildDate>
        <category term="博文" />
        <category term="资源分享" />
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/100.Python%E9%9D%A2%E8%AF%95%E9%A2%98%E5%AE%9E%E5%BD%95/</guid>
            <title>Python面试题实录</title>
            <link>https://scottalive.github.io/computer-science/python/basic/100.Python%E9%9D%A2%E8%AF%95%E9%A2%98%E5%AE%9E%E5%BD%95/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 15:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;python面试题实录&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python面试题实录&#34;&gt;#&lt;/a&gt; Python 面试题实录&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;温馨提示&lt;/strong&gt;：请访问我的另一个项目&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9QeXRob24tSW50ZXJ2aWV3LUJpYmxl&#34;&gt; “Python 面试宝典”&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/76.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-2/</guid>
            <title>数据可视化-2</title>
            <link>https://scottalive.github.io/computer-science/python/basic/76.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-2/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 13:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;数据可视化-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据可视化-2&#34;&gt;#&lt;/a&gt; 数据可视化 - 2&lt;/h2&gt;
&lt;p&gt;通过前面的学习，我们已经对数据可视化工具 matplotlib 有一个初步的认知。大家可能也会发现了，matplotlib 提供的函数虽然强大，但是参数太多，要想对图表进行深度的定制就需要修改一系列的参数，这一点对新手并不友好。另一方面，使用 matplotlib 定制的统计图是静态图表，可能在某些需要交互效果的场景下并不合适。为了解决这两个问题，我们为大家介绍两个新的可视化工具，一个是 seaborn，一个是 pyecharts。&lt;/p&gt;
&lt;h3 id=&#34;seaborn&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#seaborn&#34;&gt;#&lt;/a&gt; Seaborn&lt;/h3&gt;
&lt;p&gt;Seaborn 是建立在 matplotlib 之上的数据可视化工具，它相当于是对 matplotlib 进行了更高级的封装，而且 seaborn 也能跟 pandas 无缝整合，让我们可以用更少的代码构建出更好的统计图表，帮助我们探索和理解数据。Seaborn 包含但不局限于以下描述的功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;面向数据集的 API，可用于检查多个变量之间的关系。&lt;/li&gt;
&lt;li&gt;支持使用分类变量来显示观察结果或汇总统计数据。&lt;/li&gt;
&lt;li&gt;能够可视化单变量或双变量分布以及在数据子集之间进行比较的选项&lt;/li&gt;
&lt;li&gt;各类因变量线性回归模型的自动估计与作图。&lt;/li&gt;
&lt;li&gt;集成调色板和主题，轻松定制统计图表的视觉效果。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;可以使用 Python 的包管理工具 pip 来安装 seaborn。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install seaborn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Jupyter 中，可以直接使用魔法指令进行安装，如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;%pip install seaborn
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面，我们用 seaborn 自带的数据集为例，为大家简单的展示 seaborn 的用法和强大之处，想要深入研究 seaborn 的读者可以自行阅读官方&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWFib3JuLnB5ZGF0YS5vcmcvdHV0b3JpYWwuaHRtbA==&#34;&gt;文档&lt;/span&gt;和并查看官方作品集中的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWFib3JuLnB5ZGF0YS5vcmcvZXhhbXBsZXMvaW5kZXguaHRtbA==&#34;&gt;示例。&lt;/span&gt;根据官方示例来编写自己的代码是一个不错的选择，简单的说就是保留官方代码，将数据换成自己的数据即可。下图展示了 seaborn 绘制图表的函数，可以看出，seaborn 的这些函数主要支持我们通过绘制图表来探索数据的关系、分布和分类。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTE1MDA1LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502115005.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:75%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;使用 seaborn，首先需要导入该库并设置主题，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import seaborn as sns

sns.set_theme()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果需要在图表上显示中文，还需要用之前讲过的方法修改 matplotlib 的配置参数，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import matplotlib.pyplot as plt

plt.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;, ]
plt.rcParams[&#39;axes.unicode_minus&#39;] = False
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：上面的代码必须放在调用 set_theme 函数之后，否则调用 set_theme 函数时又会重新修改 matplotlib 配置参数中的字体设置。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;加载官方的 Tips 数据集（就餐小费数据）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;tips_df = sns.load_dataset(&#39;tips&#39;)
tips_df.info()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果如下所示，其中 total_bill 表示账单总金额，tip 表示小费的金额，sex 是顾客的性别，smoker 表示顾客是否抽样，day 代表星期几，time 代表是午餐还是晚餐，size 是就餐人数。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 244 entries, 0 to 243
Data columns (total 7 columns):
 #   Column      Non-Null Count  Dtype   
---  ------      --------------  -----   
 0   total_bill  244 non-null    float64 
 1   tip         244 non-null    float64 
 2   sex         244 non-null    category
 3   smoker      244 non-null    category
 4   day         244 non-null    category
 5   time        244 non-null    category
 6   size        244 non-null    int64   
dtypes: category(4), float64(2), int64(1)
memory usage: 7.4 KB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;由于数据集是联网加载的，上述代码可能因为 SSL 的原因无法获取到数据，可以尝试先运行下面的代码，然后再加载数据集。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import ssl

ssl._create_default_https_context = ssl._create_unverified_context
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们希望了解账单金额的分布，可以使用下面的代码来绘制分布图。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sns.histplot(data=tips_df, x=&#39;total_bill&#39;, kde=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTE1NTMxLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502115531.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;如果想了解变量之间的两两关系，我们可以绘制点对图，代码和效果如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sns.pairplot(data=tips_df, hue=&#39;sex&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTIwMjM2LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502120236.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;如果对上面图表的颜色不满意，还可以通过 palette 参数选择 seaborn 自带的 “调色板” 来修改颜色，这种方式相比于自行指定颜色或使用随机颜色方便和靠谱了很多，下图为大家展示了部分 seaborn 自带的 “调色板”。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTIwNzQ5LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502120749.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;我们可以将上面的代码稍作修改，看看运行结果有什么差别。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sns.pairplot(data=tips_df, hue=&#39;sex&#39;, palette=&#39;Dark2&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，我们为 total_bill 和 tip 两组数据绘制联合分布图，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sns.jointplot(data=tips_df, x=&#39;total_bill&#39;, y=&#39;tip&#39;, hue=&#39;sex&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTIxMjI2LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502121226.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;上面清晰的展示了，total_bill 和 tip 之间存在正相关关系，这一点我们也可以通过 DataFrame 对象的 corr 方法进行验证。接下来，我们可以建立回归模型来拟合这些数据点，而 seaborn 的线性回归模型图已经帮我们实现了这项功能，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sns.lmplot(data=tips_df, x=&#39;total_bill&#39;, y=&#39;tip&#39;, hue=&#39;sex&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTIxNjU2LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502121656.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;如果我们希望了解账单金额的集中和离散趋势，可以绘制箱线图或小提琴图，代码如下所示，我们将数据按星期四、星期五、星期六和星期天分别进行展示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sns.boxplot(data=tips_df, x=&#39;day&#39;, y=&#39;total_bill&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTIyMTA2LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502122106.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sns.violinplot(data=tips_df, x=&#39;day&#39;, y=&#39;total_bill&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTIyMTQ0LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502122144.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：相较于箱线图，小提琴图没有标注异常点而是显示了数据的整个范围，另一方面，小提琴图很好的展示了数据的分布（密度轨迹）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;pyecharts&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pyecharts&#34;&gt;#&lt;/a&gt; Pyecharts&lt;/h3&gt;
&lt;p&gt;Echarts 原来是百度开发的一个前端图表库，2018 年 1 月 16 日，ECharts 进入 Apache Incubator 进行孵化，目前已经是 Apache 软件基金会的顶级项目。凭借着良好的交互性和精巧的图表设计，ECharts 得到了众多开发者的认可，而 pyecharts 就是基于 Python 语言对 ECharts 进行了包装，让 Python 开发者也可以使用 ECharts 绘制外观精美且交互性强的统计图表。&lt;/p&gt;
&lt;p&gt;可以使用 Python 的包管理工具 pip 来安装 pyecharts。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install pyecharts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Jupyter 中，可以直接使用魔法指令进行安装，如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;%pip install pyecharts
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，我们通过来自于 pyecharts 官方网站新手教程中的一个例子，来认识 pyecharts。当然，我们对官网的例子进行一些调整，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from pyecharts.charts import Bar
from pyecharts import options
from pyecharts.globals import ThemeType

# 创建柱状图对象并设置初始参数（宽度、高度、主题）
bar = Bar(init_opts=options.InitOpts(
    width=&#39;600px&#39;,
    height=&#39;450px&#39;,
    theme=ThemeType.CHALK
))
# 设置横轴数据
bar.add_xaxis([&amp;quot;衬衫&amp;quot;, &amp;quot;羊毛衫&amp;quot;, &amp;quot;雪纺衫&amp;quot;, &amp;quot;裤子&amp;quot;, &amp;quot;高跟鞋&amp;quot;, &amp;quot;袜子&amp;quot;])
# 设置纵轴数据（第一组）
bar.add_yaxis(
    &amp;quot;商家A&amp;quot;,
    [25, 20, 36, 10, 75, 90],
)
# 设置纵轴数据（第二组）
bar.add_yaxis(
    &amp;quot;商家B&amp;quot;,
    [15, 12, 30, 20, 45, 60]
)
# 设置纵轴数据（第三组）
bar.add_yaxis(
    &amp;quot;商家C&amp;quot;,
    [12, 32, 40, 52, 35, 26]
)
# 添加全局配置参数
bar.set_global_opts(
    # 横轴相关的参数
    xaxis_opts=options.AxisOpts(
        axislabel_opts=options.LabelOpts(
            color=&#39;white&#39;
        )
    ),
    # 纵轴相关的参数（标签、最小值、最大值、间隔）
    yaxis_opts=options.AxisOpts(
        axislabel_opts=options.LabelOpts(
            color=&#39;white&#39;
        ),
        min_=0,
        max_=100,
        interval=10
    ),
    # 标题相关的参数（内容、链接、位置、文本样式）
    title_opts=options.TitleOpts(
        title=&#39;2021年销售数据展示&#39;,
        title_link=&#39;http://www.qfedu.com&#39;,
        pos_left=&#39;2%&#39;,
        title_textstyle_opts=options.TextStyleOpts(
            color=&#39;white&#39;,
            font_size=16,
            font_family=&#39;SimHei&#39;,
            font_weight=&#39;bold&#39;
        )
    ),
    # 工具箱相关的参数
    toolbox_opts=options.ToolboxOpts(
        orient=&#39;vertical&#39;,
        pos_left=&#39;right&#39;
    )
)
# 在Jupyter Notebook中渲染图表
bar.render_notebook()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码的运行效果如下图所示。值得一提的是，下图中的标题、图例、右侧的工具箱都是可以点击的，大家可以点击它们看看会有什么样的效果，ECharts 的魅力就在于它的交互效果，大家一定要试一试。如果要将下面的统计图表保存成一个网页，可以将上面最后一行代码修改为 &lt;code&gt;bar.render(&#39;index.html&#39;)&lt;/code&gt;  即可。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTg1NjUwLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502185650.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;接下来，我们也是通过一个官方示例，看看如何绘制饼图。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import pyecharts.options as opts
from pyecharts.charts import Pie

# 准备饼图需要的数据
x_data = [&amp;quot;直接访问&amp;quot;, &amp;quot;邮件营销&amp;quot;, &amp;quot;联盟广告&amp;quot;, &amp;quot;视频广告&amp;quot;, &amp;quot;搜索引擎&amp;quot;]
y_data = [335, 310, 234, 135, 1548]
data = [(x, y) for x, y in zip(x_data, y_data)]

# 创建饼图对象并设置初始化参数
pie = Pie(init_opts=opts.InitOpts(width=&amp;quot;800px&amp;quot;, height=&amp;quot;400px&amp;quot;))
# 向饼图添加数据
pie.add(
    &#39;&#39;, 
    data_pair=data,
    radius=[&amp;quot;50%&amp;quot;, &amp;quot;75%&amp;quot;],
    label_opts=opts.LabelOpts(is_show=False),
)
# 设置全局配置项
pie.set_global_opts(
    # 配置图例相关的参数
    legend_opts=opts.LegendOpts(
        pos_left=&amp;quot;legft&amp;quot;,
        orient=&amp;quot;vertical&amp;quot;
    )
)
# 设置数据系列配置参数
pie.set_series_opts(
    # 设置不显示工具提示
    tooltip_opts=opts.TooltipOpts(is_show=False),
    # 设置饼图标签的样式
    label_opts=opts.LabelOpts(formatter=&amp;quot;&amp;#123;b&amp;#125;(&amp;#123;c&amp;#125;): &amp;#123;d&amp;#125;%&amp;quot;)
)
pie.render_notebook()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行上面的代码，效果如下图所示。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTkwNTU4LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502190558.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;需要提醒大家注意的是，pyecharts 并不能直接使用 NumPy 的 ndarray 和 Pandas 的 Series、DataFrame 为其提供数据，它需要的是 Python 原生的数据类型。可能大家也注意到了，上面的代码中，我们使用的都是列表、元组这样的数据类型。&lt;/p&gt;
&lt;p&gt;最后，我们来看看如何绘制地图，绘制地图首先需要安装额外的依赖库来获取地图相关信息，命令如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install echarts-countries-pypkg echarts-china-provinces-pypkg echarts-china-cities-pypkg echarts-china-counties-pypkg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Jupyter 中，可以直接使用魔法指令进行安装，如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;%pip install echarts-countries-pypkg
%pip install echarts-china-provinces-pypkg
%pip install echarts-china-cities-pypkg
%pip install echarts-china-counties-pypkg
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的四个库分别包含了世界各国、中国省级行政区域、中国市级行政区域、中国区 / 县级行政区域的数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;然后，我们将全国各省抖音大 V 的数据放在一个列表中，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;data = [
    (&#39;广东&#39;, 594), (&#39;浙江&#39;, 438), (&#39;四川&#39;, 316), (&#39;北京&#39;, 269), (&#39;山东&#39;, 248),
    (&#39;江苏&#39;, 234), (&#39;湖南&#39;, 196), (&#39;福建&#39;, 166), (&#39;河南&#39;, 153), (&#39;辽宁&#39;, 152),
    (&#39;上海&#39;, 138), (&#39;河北&#39;, 86), (&#39;安徽&#39;, 79), (&#39;湖北&#39;, 75), (&#39;黑龙江&#39;, 70), 
    (&#39;陕西&#39;, 63), (&#39;吉林&#39;, 59), (&#39;江西&#39;, 56), (&#39;重庆&#39;, 46), (&#39;贵州&#39;, 39),
    (&#39;山西&#39;, 37), (&#39;云南&#39;, 33), (&#39;广西&#39;, 24), (&#39;天津&#39;, 22), (&#39;新疆&#39;, 21),
    (&#39;海南&#39;, 18), (&#39;内蒙古&#39;, 14), (&#39;台湾&#39;, 11), (&#39;甘肃&#39;, 7), (&#39;广西壮族自治区&#39;, 4),
    (&#39;香港&#39;, 4), (&#39;青海&#39;, 3), (&#39;新疆维吾尔自治区&#39;, 3), (&#39;内蒙古自治区&#39;, 3), (&#39;宁夏&#39;, 1)
]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，我们使用 pyecharts 在地图上标记各省抖音大 V 人数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from pyecharts.charts import Map

map_chart = Map()
map_chart.add(&#39;&#39;, data, &#39;china&#39;, is_roam=False)
map_chart.render_notebook()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码的运行效果如下图所示，将鼠标置于地图上时，会高亮对应的省并看到相关的信息。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMTkyMTQyLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502192142.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;和 seaborn 一样，我们建议大家参考官方提供的示例来使用 pyecharts，我们可以在 pyecharts &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9weWVjaGFydHMub3JnLyMvemgtY24v&#34;&gt;官方网站&lt;/span&gt;的左侧导航栏中找到 “图表类型” 选项，下面每种类型的图表都有对应的官方示例，很多代码是可以直接使用的，我们需要做的就是将数据换成自己的数据。&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/75.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-1/</guid>
            <title>数据可视化-1</title>
            <link>https://scottalive.github.io/computer-science/python/basic/75.%E6%95%B0%E6%8D%AE%E5%8F%AF%E8%A7%86%E5%8C%96-1/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 12:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;数据可视化-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据可视化-1&#34;&gt;#&lt;/a&gt; 数据可视化 - 1&lt;/h2&gt;
&lt;p&gt;在完成了对数据的透视之后，我们可以将数据透视的结果通过可视化的方式呈现出来，简单的说，就是将数据变成漂亮的统计图表，然后进一步发现和解读数据背后隐藏的商业价值。在之前的课程中，我们已经为大家展示过用使用 &lt;code&gt;Series&lt;/code&gt;  或 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;plot&lt;/code&gt;  方法生成可视化图表的操作，本章我们为大家讲解 &lt;code&gt;plot&lt;/code&gt;  方法的基石，它就是大名鼎鼎的 &lt;code&gt;matplotlib&lt;/code&gt;  库。&lt;/p&gt;
&lt;h3 id=&#34;常用的图表类型&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#常用的图表类型&#34;&gt;#&lt;/a&gt; 常用的图表类型&lt;/h3&gt;
&lt;p&gt;常用的图表类型及其应用场景如下图所示。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwMzE1MTkzMzI2LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220315193326.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:65%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;matplotlib-的安装和导入&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#matplotlib-的安装和导入&#34;&gt;#&lt;/a&gt; Matplotlib 的安装和导入&lt;/h3&gt;
&lt;p&gt;如果还没有安装 &lt;code&gt;matplotlib&lt;/code&gt;  库，可以使用 Python 的包管理工具 pip 来安装，命令如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;pip install matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 Notebook 中，我们可以用下面的方式导入 &lt;code&gt;matplotlib&lt;/code&gt; 。为了解决图表中文显示的问题，我们可以通过 &lt;code&gt;pyplot&lt;/code&gt;  模块的 &lt;code&gt;rcParams&lt;/code&gt;  属性修改配置参数，具体的操作如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import matplotlib.pyplot as plt

plt.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;, &#39;Songti SC&#39;]
plt.rcParams[&#39;axes.unicode_minus&#39;] = False
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面代码中的 &lt;code&gt;SimHei&lt;/code&gt;  是字体名称，大家可以通过百度云盘下载并安装该字体，链接地址：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXJRdWpsNVJRbjlSN1BhZEIyWjVnX2clRUYlQkMlOEMlRTYlOEYlOTAlRTUlOEYlOTYlRTclQTAlODE6ZTdiNCVFRiVCQyU5Qg==&#34;&gt;https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g，提取码:e7b4；&lt;/span&gt; &lt;code&gt;Songti SC&lt;/code&gt;  是我的 macOS 上自带的字体，对于 macOS 或 Windows 系统，字体的名字都可以在用户主目录下的 &lt;code&gt;.matplotlib&lt;/code&gt;  文件夹下的 &lt;code&gt;fontlist-v330.json&lt;/code&gt;  文件中找到。值得注意的是，使用中文字体后坐标轴上的负号会显示不出来，所以需要将 &lt;code&gt;axes.unicode_minus&lt;/code&gt;  参数设置为 &lt;code&gt;False&lt;/code&gt; ，这样才能让坐标轴上的负号正常显示。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;通过下面的魔法指令，我们可以在绘图时生成&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aC53aWtpcGVkaWEub3JnL3dpa2kvJUU3JTlGJUEyJUU5JTg3JThGJUU1JTlCJUJFJUU1JUJEJUEy&#34;&gt;矢量图&lt;/span&gt;（SVG - Scalable Vector Graphics）。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;%config InlineBackend.figure_format=&#39;svg&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;绘图的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绘图的流程&#34;&gt;#&lt;/a&gt; 绘图的流程&lt;/h3&gt;
&lt;h4 id=&#34;创建画布&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建画布&#34;&gt;#&lt;/a&gt; 创建画布&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;pyplot&lt;/code&gt;  模块的 &lt;code&gt;figure&lt;/code&gt;  函数可以用来创建画布，创建画布时，可以通过 &lt;code&gt;figsize&lt;/code&gt;  参数指定画布的尺寸（默认值是 &lt;code&gt;[6.4, 4.8]&lt;/code&gt; ）；可以通过 &lt;code&gt;dpi&lt;/code&gt;  参数设置绘图的分辨率，因为 &lt;code&gt;dpi&lt;/code&gt;  代表了每英寸的像素点数量。除此之外，还可以通过 &lt;code&gt;facecolor&lt;/code&gt;  参数设置画布的背景色。 &lt;code&gt;figure&lt;/code&gt;  函数的返回值是一个 &lt;code&gt;Figure&lt;/code&gt;  对象，它代表了绘图使用的画布，我们可以基于画布来创建绘图使用的坐标系。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.figure(figsize=(8, 4), dpi=120, facecolor=&#39;darkgray&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;创建坐标系&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建坐标系&#34;&gt;#&lt;/a&gt; 创建坐标系&lt;/h4&gt;
&lt;p&gt;可以直接使用 &lt;code&gt;pyplot&lt;/code&gt;  模块的 &lt;code&gt;subplot&lt;/code&gt;  函数来创建坐标系，该函数会返回 &lt;code&gt;Axes&lt;/code&gt;  对象。 &lt;code&gt;subplot&lt;/code&gt;  的前三个参数分别用来指定整个画布分成几行几列以及当前坐标系的索引，这三个参数的默认值都是 &lt;code&gt;1&lt;/code&gt; 。如果需要在画布上创建多个坐标系，就需要使用该函数，否则就直接使用默认的也是唯一的坐标系。当然，也可以通过上面创建的 &lt;code&gt;Figure&lt;/code&gt;  对象的 &lt;code&gt;add_subplot&lt;/code&gt;  方法或 &lt;code&gt;add_axes&lt;/code&gt;  方法来创建坐标系，前者跟 &lt;code&gt;subplot&lt;/code&gt;  函数的作用一致，后者会产生嵌套的坐标系。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.subplot(2, 2, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;绘制图像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绘制图像&#34;&gt;#&lt;/a&gt; 绘制图像&lt;/h4&gt;
&lt;h5 id=&#34;折线图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#折线图&#34;&gt;#&lt;/a&gt; 折线图&lt;/h5&gt;
&lt;p&gt;在绘图时，如果没有先调用 &lt;code&gt;figure&lt;/code&gt;  函数和 &lt;code&gt;subplot&lt;/code&gt;  函数，我们将使用默认的画布和坐标系，如果要绘制折线图，可以使用 &lt;code&gt;pyplot&lt;/code&gt;  模块的 &lt;code&gt;plot&lt;/code&gt;  函数，并指定横轴和纵轴的数据。折线图最适合用来观察数据的趋势，尤其是当横坐标代表时间的情况下。我们可以使用 &lt;code&gt;plot&lt;/code&gt;  函数的 &lt;code&gt;color&lt;/code&gt;  参数来定制折线的颜色，可以使用 &lt;code&gt;marker&lt;/code&gt;  参数来定制数据点的标记（例如： &lt;code&gt;*&lt;/code&gt;  表示五角星， &lt;code&gt;^&lt;/code&gt;  表示三角形， &lt;code&gt;o&lt;/code&gt;  表示小圆圈等），可以使用 &lt;code&gt;linestyle&lt;/code&gt;  参数来定制折线的样式（例如： &lt;code&gt;-&lt;/code&gt;  表示实线， &lt;code&gt;--&lt;/code&gt;  表示虚线， &lt;code&gt;:&lt;/code&gt;  表示点线等），可以使用 &lt;code&gt;linewidth&lt;/code&gt;  参数来定制折线的粗细。 下面的代码绘制了一条正弦曲线，其中 &lt;code&gt;marker=&#39;*&#39;&lt;/code&gt;  会将数据点的标记设置为五角星形状，而 &lt;code&gt;color=&#39;red&#39;&lt;/code&gt;  会将折线绘制为红色。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import numpy as np

x = np.linspace(-2 * np.pi, 2 * np.pi, 120)
y = np.sin(x)

# 创建画布
plt.figure(figsize=(8, 4), dpi=120)
# 绘制折线图
plt.plot(x, y, linewidth=2, marker=&#39;*&#39;, color=&#39;red&#39;)
# 显示绘图
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAxMTczMzQ0LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220501173344.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;如果要在一个坐标系上同时绘制正弦和余弦曲线，可以对上面的代码稍作修改。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;x = np.linspace(-2 * np.pi, 2 * np.pi, 120)
y1, y2 = np.sin(x), np.cos(x)

plt.figure(figsize=(8, 4), dpi=120)
plt.plot(x, y1, linewidth=2, marker=&#39;*&#39;, color=&#39;red&#39;)
plt.plot(x, y2, linewidth=2, marker=&#39;^&#39;, color=&#39;blue&#39;)
# 定制图表的标注，其中的arrowprops是定制箭头样式的参数
plt.annotate(&#39;sin(x)&#39;, xytext=(0.5, -0.75), xy=(0, -0.25), fontsize=12, arrowprops=&amp;#123;
    &#39;arrowstyle&#39;: &#39;-&amp;gt;&#39;, &#39;color&#39;: &#39;darkgreen&#39;, &#39;connectionstyle&#39;: &#39;angle3, angleA=90, angleB=0&#39;
&amp;#125;)
plt.annotate(&#39;cos(x)&#39;, xytext=(-3, 0.75), xy=(-1.25, 0.5), fontsize=12, arrowprops=&amp;#123;
    &#39;arrowstyle&#39;: &#39;-&amp;gt;&#39;, &#39;color&#39;: &#39;darkgreen&#39;, &#39;connectionstyle&#39;: &#39;arc3, rad=0.35&#39;
&amp;#125;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMDk1OTQ5LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502095949.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;如果要使用两个坐标系分别绘制正弦和余弦，可以用上面提到的 &lt;code&gt;subplot&lt;/code&gt;  函数来创建坐标系，然后再绘图。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.figure(figsize=(8, 4), dpi=120)
# 创建坐标系（第1个图）
plt.subplot(2, 1, 1)
plt.plot(x, y1, linewidth=2, marker=&#39;*&#39;, color=&#39;red&#39;)
# 创建坐标系（第2个图）
plt.subplot(2, 1, 2)
plt.plot(x, y2, linewidth=2, marker=&#39;^&#39;, color=&#39;blue&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAxMTczNDQ2LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220501173446.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;当然也可以像下面这么做，大家可以运行代码看看跟上面的图有什么区别。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.figure(figsize=(8, 4), dpi=120)
plt.subplot(1, 2, 1)
plt.plot(x, y1, linewidth=2, marker=&#39;*&#39;, color=&#39;red&#39;)
plt.subplot(1, 2, 2)
plt.plot(x, y2, linewidth=2, marker=&#39;^&#39;, color=&#39;blue&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后，再试一试下面这个代码，看看运行效果如何。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;fig = plt.figure(figsize=(10, 4), dpi=120)
plt.plot(x, y1, linewidth=2, marker=&#39;*&#39;, color=&#39;red&#39;)
# 用Figure对象的add_axes方法在现有坐标系中嵌套一个新的坐标系
# 该方法的参数是一个四元组，代表了新坐标系在原坐标系中的位置
# 前两个值是左下角的位置，后两个值是坐标系的宽度和高度
ax = fig.add_axes((0.595, 0.6, 0.3,0.25))
ax.plot(x, y2, marker=&#39;^&#39;, color=&#39;blue&#39;)
ax = fig.add_axes((0.155, 0.2, 0.3,0.25))
ax.plot(x, y2, marker=&#39;^&#39;, color=&#39;green&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;散点图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#散点图&#34;&gt;#&lt;/a&gt; 散点图&lt;/h5&gt;
&lt;p&gt;散点图可以帮助我们了解两个变量的关系，如果需要了解三个变量的关系，可以将散点图升级为气泡图。下面的代码中， &lt;code&gt;x&lt;/code&gt;  和 &lt;code&gt;y&lt;/code&gt;  两个数组分别表示每个月的收入和每个月网购的支出，如果我们想了解 &lt;code&gt;x&lt;/code&gt;  和 &lt;code&gt;y&lt;/code&gt;  是否存在相关关系，就可以绘制如下所示的散点图。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;x = np.array([5550,7500,10500,15000,20000,25000,30000,40000])
y = np.array([800,1800,1250,2000,1800,2100,2500,3500])

plt.figure(figsize=(6, 4), dpi=120)
plt.scatter(x, y)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAxMTczMDM0LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220501173034.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;柱状图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#柱状图&#34;&gt;#&lt;/a&gt; 柱状图&lt;/h5&gt;
&lt;p&gt;在对比数据的差异时，柱状图是非常棒的选择，我们可以使用 &lt;code&gt;pyplot&lt;/code&gt;  模块的 &lt;code&gt;bar&lt;/code&gt;  函数来生成柱状图，也可以使用 &lt;code&gt;barh&lt;/code&gt;  函数来生成水平柱状图。我们先为柱状图准备一些数据，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;x = np.arange(4)
y1 = np.random.randint(20, 50, 4)
y2 = np.random.randint(10, 60, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;绘制柱状图的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.figure(figsize=(6, 4), dpi=120)
# 通过横坐标的偏移，让两组数据对应的柱子分开
# width参数控制柱子的粗细，label参数为柱子添加标签
plt.bar(x - 0.1, y1, width=0.2, label=&#39;销售A组&#39;)
plt.bar(x + 0.1, y2, width=0.2, label=&#39;销售B组&#39;)
# 定制横轴的刻度
plt.xticks(x, labels=[&#39;Q1&#39;, &#39;Q2&#39;, &#39;Q3&#39;, &#39;Q4&#39;])
# 定制显示图例
plt.legend()
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAxMTczNTU3LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220501173557.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;如果想绘制堆叠柱状图，可以对上面的代码稍作修改，如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;labels = [&#39;Q1&#39;, &#39;Q2&#39;, &#39;Q3&#39;, &#39;Q4&#39;]
plt.figure(figsize=(6, 4), dpi=120)
plt.bar(labels, y1, width=0.4, label=&#39;销售A组&#39;)
# 注意：堆叠柱状图的关键是将之前的柱子作为新柱子的底部
# 可以通过bottom参数指定底部数据，新柱子绘制在底部数据之上
plt.bar(labels, y2, width=0.4, bottom=y1, label=&#39;销售B组&#39;)
plt.legend(loc=&#39;lower right&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAxMTczNjQ1LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220501173645.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;饼状图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#饼状图&#34;&gt;#&lt;/a&gt; 饼状图&lt;/h5&gt;
&lt;p&gt;饼状图通常简称为饼图，是一个将数据划分为几个扇形区域的统计图表，它主要用于描述数量、频率等之间的相对关系。在饼图中，每个扇形区域的大小就是其所表示的数量的比例，这些扇形区域合在一起刚好是一个完整的饼。在需要展示数据构成的场景下，饼状图、树状图和瀑布图是不错的选择，我们可以使用 &lt;code&gt;pyplot&lt;/code&gt;  模块的 &lt;code&gt;pie&lt;/code&gt;  函数来绘制饼图，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;data = np.random.randint(100, 500, 7)
labels = [&#39;苹果&#39;, &#39;香蕉&#39;, &#39;桃子&#39;, &#39;荔枝&#39;, &#39;石榴&#39;, &#39;山竹&#39;, &#39;榴莲&#39;]

plt.figure(figsize=(5, 5), dpi=120)
plt.pie(
    data,
    # 自动显示百分比
    autopct=&#39;%.1f%%&#39;,
    # 饼图的半径
    radius=1,
    # 百分比到圆心的距离
    pctdistance=0.8,
    # 颜色（随机生成）
    colors=np.random.rand(7, 3),
    # 分离距离
    # explode=[0.05, 0, 0.1, 0, 0, 0, 0],
    # 阴影效果
    # shadow=True,
    # 字体属性
    textprops=dict(fontsize=8, color=&#39;black&#39;),
    # 楔子属性（生成环状饼图的关键）
    wedgeprops=dict(linewidth=1, width=0.35),
    # 标签
    labels=labels
)
# 定制图表的标题
plt.title(&#39;水果销售额占比&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMDk0MTI4LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502094128.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：大家可以试一试将上面代码中被注释的部分恢复，看看有什么样的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;直方图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#直方图&#34;&gt;#&lt;/a&gt; 直方图&lt;/h5&gt;
&lt;p&gt;在统计学中，直方图是一种展示数据分布情况的图形，是一种二维统计图表，它的两个坐标分别是统计样本和该样本对应的某个属性的度量。下面的数据是某学校 100 名男学生的身高，如果我们想知道数据的分布，就可以使用直方图。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;heights = np.array([
    170, 163, 174, 164, 159, 168, 165, 171, 171, 167, 
    165, 161, 175, 170, 174, 170, 174, 170, 173, 173, 
    167, 169, 173, 153, 165, 169, 158, 166, 164, 173, 
    162, 171, 173, 171, 165, 152, 163, 170, 171, 163, 
    165, 166, 155, 155, 171, 161, 167, 172, 164, 155, 
    168, 171, 173, 169, 165, 162, 168, 177, 174, 178, 
    161, 180, 155, 155, 166, 175, 159, 169, 165, 174, 
    175, 160, 152, 168, 164, 175, 168, 183, 166, 166, 
    182, 174, 167, 168, 176, 170, 169, 173, 177, 168, 
    172, 159, 173, 185, 161, 170, 170, 184, 171, 172
])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以使用 &lt;code&gt;pyplot&lt;/code&gt;  模块的 &lt;code&gt;hist&lt;/code&gt;  函数来绘制直方图，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 将身高数据分到以下8个组中
bins = np.array([150, 155, 160, 165, 170, 175, 180, 185, 190])

plt.figure(figsize=(6, 4), dpi=120)
# density参数默认值为False，表示纵轴显示频数
# 将density参数设置为True，纵轴会显示概率密度
plt.hist(heights, bins, density=True)
# 定制横轴标签
plt.xlabel(&#39;身高&#39;)
# 定制纵轴标签
plt.ylabel(&#39;概率密度&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAyMDkzOTI0LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220502093924.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;h5 id=&#34;箱线图&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#箱线图&#34;&gt;#&lt;/a&gt; 箱线图&lt;/h5&gt;
&lt;p&gt;箱线图又叫箱型图或盒须图，是一种用于展示一组数据分散情况的统计图表，如下所示。因图形如箱子，而且在上下四分位数之外有线条像胡须延伸出去而得名。在箱线图中，箱子的上边界是上四分位数（&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Q_3&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;）的位置，箱子的下边界是下四分位数（&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Q_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;）的位置，箱子中间的线条是中位数（&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Q_2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;）的位置，而箱子的长度就是四分位距离（IQR）。除此之外，箱子上方线条的边界是最大值，箱子下方线条的边界是最小值，这两条线之外的点就是离群值（outlier）。所谓离群值，是指数据小于&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;1.5&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Q_1 - 1.5 \times IQR&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 或数据大于&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mn&gt;1.5&lt;/mn&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi&gt;I&lt;/mi&gt;&lt;mi&gt;Q&lt;/mi&gt;&lt;mi&gt;R&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Q_3 + 1.5 \times IQR&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.72777em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;I&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;Q&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.00773em;&#34;&gt;R&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的值，公式中的 &lt;code&gt;1.5&lt;/code&gt;  还可以替换为 &lt;code&gt;3&lt;/code&gt;  来发现极端离群值（extreme outlier），而介于 &lt;code&gt;1.5&lt;/code&gt;  到 &lt;code&gt;3&lt;/code&gt;  之间的离群值通常称之为适度离群值（mild outlier）。&lt;/p&gt;
&lt;p&gt;可以使用 &lt;code&gt;pyplot&lt;/code&gt;  模块的 &lt;code&gt;boxplot&lt;/code&gt;  函数来绘制箱线图，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 数组中有47个[0, 100)范围的随机数
data = np.random.randint(0, 100, 47)
# 向数组中添加三个可能是离群点的数据
data = np.append(data, 160)
data = np.append(data, 200)
data = np.append(data, -50)

plt.figure(figsize=(6, 4), dpi=120)
# whis参数的默认值是1.5，将其设置为3可以检测极端离群值
# showmeans=True表示在图中标记均值的位置
plt.boxplot(data, whis=1.5, showmeans=True, notch=True)
# 定制纵轴的取值范围
plt.ylim([-100, 250])
# 定制横轴的刻度
plt.xticks([1], labels=[&#39;data&#39;])
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjIwNTAxMTcyODAyLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20220501172802.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot; /&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：由于数据是随机生成的，所以大家运行上面的代码生成的图可能跟我这里并不相同。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;显示或保存图像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#显示或保存图像&#34;&gt;#&lt;/a&gt; 显示或保存图像&lt;/h4&gt;
&lt;p&gt;可以使用 &lt;code&gt;pyplot&lt;/code&gt;  模块的 &lt;code&gt;show&lt;/code&gt;  函数来显示绘制的图表，我们在上面的代码中使用过这个函数。如果希望保存图表，可以使用 &lt;code&gt;savefig&lt;/code&gt;  函数。需要注意的是，如果要同时显示和保存图表，应该先执行 &lt;code&gt;savefig&lt;/code&gt;  函数，再执行 &lt;code&gt;show&lt;/code&gt;  函数，因为在调用 &lt;code&gt;show&lt;/code&gt;  函数时，图表已经被释放，位于 &lt;code&gt;show&lt;/code&gt;  函数之后的 &lt;code&gt;savefig&lt;/code&gt;  保存的只是一个空白的区域。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.savefig(&#39;chart.png&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;其他图表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他图表&#34;&gt;#&lt;/a&gt; 其他图表&lt;/h3&gt;
&lt;p&gt;使用 matplotlib，我们还可以绘制出其他的统计图表（如：雷达图、玫瑰图、热力图等），但实际工作中，使用频率最高的几类图表我们在上面已经为大家完整的展示出来了。此外，matplotlib 还有很多对统计图表进行定制的细节，例如定制坐标轴、定制图表上的文字和标签等。如果想了解如何用 matplotlib 绘制和定制更多的统计图表，可以直接查看 matplotlib 官方网站上的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tYXRwbG90bGliLm9yZy9zdGFibGUvdHV0b3JpYWxzL2luZGV4Lmh0bWw=&#34;&gt;文档&lt;/span&gt;和&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tYXRwbG90bGliLm9yZy9zdGFibGUvZ2FsbGVyeS9pbmRleC5odG1s&#34;&gt;示例&lt;/span&gt;。&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/74.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-5/</guid>
            <title>Pandas的应用-5</title>
            <link>https://scottalive.github.io/computer-science/python/basic/74.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-5/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 11:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;pandas的应用-5&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pandas的应用-5&#34;&gt;#&lt;/a&gt; Pandas 的应用 - 5&lt;/h2&gt;
&lt;h3 id=&#34;dataframe的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dataframe的应用&#34;&gt;#&lt;/a&gt; DataFrame 的应用&lt;/h3&gt;
&lt;h4 id=&#34;窗口计算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#窗口计算&#34;&gt;#&lt;/a&gt; 窗口计算&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;rolling&lt;/code&gt;  方法允许我们将数据置于窗口中，然后就可以使用函数对窗口中的数据进行运算和处理。例如，我们获取了某只股票近期的数据，想制作 5 日均线和 10 日均线，那么就需要先设置窗口再进行运算。我们可以使用三方库 &lt;code&gt;pandas-datareader&lt;/code&gt;  来获取指定的股票在某个时间段内的数据，具体的操作如下所示。&lt;/p&gt;
&lt;p&gt;安装 &lt;code&gt;pandas-datareader&lt;/code&gt;  三方库。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install pandas-datareader
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 &lt;code&gt;pandas-datareader&lt;/code&gt;  提供的 &lt;code&gt;get_data_stooq&lt;/code&gt;  从 Stooq 网站获取百度（股票代码：BIDU）近期股票数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import pandas_datareader as pdr

baidu_df = pdr.get_data_stooq(&#39;BIDU&#39;, start=&#39;2021-11-22&#39;, end=&#39;2021-12-7&#39;)
baidu_df.sort_index(inplace=True)
baidu_df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjA1NzEwLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208205710.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:38%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;上面的 &lt;code&gt;DataFrame&lt;/code&gt;  有 &lt;code&gt;Open&lt;/code&gt; 、 &lt;code&gt;High&lt;/code&gt; 、 &lt;code&gt;Low&lt;/code&gt; 、 &lt;code&gt;Close&lt;/code&gt; 、 &lt;code&gt;Volume&lt;/code&gt;  五个列，分别代码股票的开盘价、最高价、最低价、收盘价和成交量，接下来我们对百度的股票数据进行窗口计算。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;baidu_df.rolling(5).mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjA1OTMyLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208205932.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:38%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;上面的 &lt;code&gt;Close&lt;/code&gt;  列的数据就是我们需要的 5 日均线，当然，我们也可以用下面的方法，直接在 &lt;code&gt;Close&lt;/code&gt;  列对应的 &lt;code&gt;Series&lt;/code&gt;  对象上计算 5 日均线。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;baidu_df.Close.rolling(5).mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;Date
2021-11-22        NaN
2021-11-23        NaN
2021-11-24        NaN
2021-11-26        NaN
2021-11-29    150.608
2021-11-30    151.014
2021-12-01    150.682
2021-12-02    150.196
2021-12-03    147.062
2021-12-06    146.534
2021-12-07    146.544
Name: Close, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;相关性判定&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#相关性判定&#34;&gt;#&lt;/a&gt; 相关性判定&lt;/h4&gt;
&lt;p&gt;在统计学中，我们通常使用协方差（covariance）来衡量两个随机变量的联合变化程度。如果变量 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的较大值主要与另一个变量 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的较大值相对应，而两者较小值也相对应，那么两个变量倾向于表现出相似的行为，协方差为正。如果一个变量的较大值主要对应于另一个变量的较小值，则两个变量倾向于表现出相反的行为，协方差为负。简单的说，协方差的正负号显示着两个变量的相关性。方差是协方差的一种特殊情况，即变量与自身的协方差。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;υ&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;⋅&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;mi&gt;υ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;cov(X,Y) = E((X - \mu)(Y - \upsilon)) = E(X \cdot Y) - \mu\upsilon
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;μ&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;υ&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;μ&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;υ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;如果 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 和 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是统计独立的，那么二者的协方差为 0，这是因为在 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 和 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 独立的情况下：&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;⋅&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;⋅&lt;/mo&gt;&lt;mi&gt;E&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;mi&gt;υ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;E(X \cdot Y) = E(X) \cdot E(Y) = \mu\upsilon
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;⋅&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05764em;&#34;&gt;E&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;μ&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;υ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;协方差的数值大小取决于变量的大小，通常是不容易解释的，但是正态形式的协方差大小可以显示两变量线性关系的强弱。在统计学中，皮尔逊积矩相关系数就是正态形式的协方差，它用于度量两个变量 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;X&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 和 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;Y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68333em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 之间的相关程度（线性相关），其值介于 &lt;code&gt;-1&lt;/code&gt;  到 &lt;code&gt;1&lt;/code&gt;  之间。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;ρ&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/mrow&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;c&lt;/mi&gt;&lt;mi&gt;o&lt;/mi&gt;&lt;mi&gt;v&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\rho{X,Y} = \frac {cov(X, Y)} {\sigma_{X}\sigma_{Y}}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8777699999999999em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ρ&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.263em;vertical-align:-0.8360000000000001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.427em;&#34;&gt;&lt;span style=&#34;top:-2.3139999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;σ&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;σ&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.32833099999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;o&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;v&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8360000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;估算样本的协方差和标准差，可以得到样本皮尔逊系数，通常用希腊字母 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;ρ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\rho&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ρ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 表示。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;ρ&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/munderover&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;ˉ&lt;/mo&gt;&lt;/mover&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo&gt;ˉ&lt;/mo&gt;&lt;/mover&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;mrow&gt;&lt;msqrt&gt;&lt;mrow&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/munderover&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;ˉ&lt;/mo&gt;&lt;/mover&gt;&lt;msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/msqrt&gt;&lt;msqrt&gt;&lt;mrow&gt;&lt;munderover&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/munderover&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;Y&lt;/mi&gt;&lt;mo&gt;ˉ&lt;/mo&gt;&lt;/mover&gt;&lt;msup&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;/msqrt&gt;&lt;/mrow&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\rho = \frac {\sum_{i=1}^{n}(X_i - \bar{X})(Y_i - \bar{Y})} {\sqrt{\sum_{i=1}^{n}(X_i - \bar{X})^2} \sqrt{\sum_{i=1}^{n}(Y_i - \bar{Y})^2}}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ρ&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:3.2398200000000004em;vertical-align:-1.7300000000000004em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.50982em;&#34;&gt;&lt;span style=&#34;top:-2.11em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.2452em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord sqrt&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.2452em;&#34;&gt;&lt;span class=&#34;svg-align&#34; style=&#34;top:-3.8em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.8em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34; style=&#34;padding-left:1em;&#34;&gt;&lt;span class=&#34;mop&#34;&gt;&lt;span class=&#34;mop op-symbol small-op&#34; style=&#34;position:relative;top:-0.0000050000000000050004em;&#34;&gt;∑&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.804292em;&#34;&gt;&lt;span style=&#34;top:-2.40029em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mrel mtight&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.2029em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.29971000000000003em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8201099999999999em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.25233em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.16666em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;ˉ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.740108em;&#34;&gt;&lt;span style=&#34;top:-2.9890000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.2051999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.8em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hide-tail&#34; style=&#34;min-width:1.02em;height:1.8800000000000001em;&#34;&gt;&lt;svg width=&#39;400em&#39; height=&#39;1.8800000000000001em&#39; viewBox=&#39;0 0 400000 1944&#39; preserveAspectRatio=&#39;xMinYMin slice&#39;&gt;&lt;path d=&#39;M983 90
l0 -0
c4,-6.7,10,-10,18,-10 H400000v40
H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7
s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744
c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30
c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722
c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5
c53.7,-170.3,84.5,-266.8,92.5,-289.5z
M1001 80h400000v40h-400000z&#39;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.5948000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord sqrt&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.2452em;&#34;&gt;&lt;span class=&#34;svg-align&#34; style=&#34;top:-3.8em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.8em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34; style=&#34;padding-left:1em;&#34;&gt;&lt;span class=&#34;mop&#34;&gt;&lt;span class=&#34;mop op-symbol small-op&#34; style=&#34;position:relative;top:-0.0000050000000000050004em;&#34;&gt;∑&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.804292em;&#34;&gt;&lt;span style=&#34;top:-2.40029em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mrel mtight&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.2029em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.29971000000000003em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8201099999999999em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.25233em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.25em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;ˉ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.740108em;&#34;&gt;&lt;span style=&#34;top:-2.9890000000000003em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.2051999999999996em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.8em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;hide-tail&#34; style=&#34;min-width:1.02em;height:1.8800000000000001em;&#34;&gt;&lt;svg width=&#39;400em&#39; height=&#39;1.8800000000000001em&#39; viewBox=&#39;0 0 400000 1944&#39; preserveAspectRatio=&#39;xMinYMin slice&#39;&gt;&lt;path d=&#39;M983 90
l0 -0
c4,-6.7,10,-10,18,-10 H400000v40
H1013.1s-83.4,268,-264.1,840c-180.7,572,-277,876.3,-289,913c-4.7,4.7,-12.7,7,-24,7
s-12,0,-12,0c-1.3,-3.3,-3.7,-11.7,-7,-25c-35.3,-125.3,-106.7,-373.3,-214,-744
c-10,12,-21,25,-33,39s-32,39,-32,39c-6,-5.3,-15,-14,-27,-26s25,-30,25,-30
c26.7,-32.7,52,-63,76,-91s52,-60,52,-60s208,722,208,722
c56,-175.3,126.3,-397.3,211,-666c84.7,-268.7,153.8,-488.2,207.5,-658.5
c53.7,-170.3,84.5,-266.8,92.5,-289.5z
M1001 80h400000v40h-400000z&#39;/&gt;&lt;/svg&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.5948000000000001em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.4752em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.2452em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.9349100000000004em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.2452em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mop&#34;&gt;&lt;span class=&#34;mop op-symbol small-op&#34; style=&#34;position:relative;top:-0.0000050000000000050004em;&#34;&gt;∑&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.804292em;&#34;&gt;&lt;span style=&#34;top:-2.40029em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;mrel mtight&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.2029em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.29971000000000003em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07847em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8201099999999999em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.25233em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.16666em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;ˉ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.22222em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8201099999999999em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.22222em;&#34;&gt;Y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.25233em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.25em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;ˉ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.7300000000000004em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;我们用 &lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;ρ&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\rho&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;ρ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 值判断指标的相关性时遵循以下两个步骤。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;判断指标间是正相关、负相关，还是不相关。
&lt;ul&gt;
&lt;li&gt;当 $ \rho \gt 0 $，认为变量之间是正相关，也就是两者的趋势一致。&lt;/li&gt;
&lt;li&gt;当 $ \rho \lt 0 $，认为变量之间是负相关，也就是两者的趋势相反。&lt;/li&gt;
&lt;li&gt;当 $ \rho = 0 $，认为变量之间是不相关的，但并不代表两个指标是统计独立的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;判断指标间的相关程度。
&lt;ul&gt;
&lt;li&gt;当 $ \rho $ 的绝对值在 $ [0.6,1] $ 之间，认为变量之间是强相关的。&lt;/li&gt;
&lt;li&gt;当 $ \rho $ 的绝对值在 $ [0.1,0.6) $ 之间，认为变量之间是弱相关的。&lt;/li&gt;
&lt;li&gt;当 $ \rho $ 的绝对值在 $ [0,0.1) $ 之间，认为变量之间没有相关性。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;皮尔逊相关系数适用于：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;两个变量之间是线性关系，都是连续数据。&lt;/li&gt;
&lt;li&gt;两个变量的总体是正态分布，或接近正态的单峰分布。&lt;/li&gt;
&lt;li&gt;两个变量的观测值是成对的，每对观测值之间相互独立。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;cov&lt;/code&gt;  方法和 &lt;code&gt;corr&lt;/code&gt;  方法分别用于计算协方差和相关系数， &lt;code&gt;corr&lt;/code&gt;  方法的第一个参数 &lt;code&gt;method&lt;/code&gt;  的默认值是 &lt;code&gt;pearson&lt;/code&gt; ，表示计算皮尔逊相关系数；除此之外，还可以指定 &lt;code&gt;kendall&lt;/code&gt;  或 &lt;code&gt;spearman&lt;/code&gt;  来获得肯德尔系数或斯皮尔曼等级相关系数。&lt;/p&gt;
&lt;p&gt;接下来，我们从名为 &lt;code&gt;boston_house_price.csv&lt;/code&gt;  的文件中获取著名的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuaGV5d2hhbGUuY29tL213L2RhdGFzZXQvNTkwYmQ1OTU4MTJlZGUzMmI3M2Y1NWYy&#34;&gt;波士顿房价数据集&lt;/span&gt;来创建一个 &lt;code&gt;DataFrame&lt;/code&gt; ，我们通过 &lt;code&gt;corr&lt;/code&gt;  方法计算可能影响房价的 &lt;code&gt;13&lt;/code&gt;  个因素中，哪些跟房价是正相关或负相关的，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;boston_df = pd.read_csv(&#39;data/csv/boston_house_price.csv&#39;)
boston_df.corr()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：如果需要上面例子中的 CSV 文件，可以通过下面的百度云盘地址进行获取，数据在《从零开始学数据分析》目录中。链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXJRdWpsNVJRbjlSN1BhZEIyWjVnX2c=&#34;&gt;https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g&lt;/span&gt;，提取码：e7b4。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjEzMzI1LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208213325.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;斯皮尔曼相关系数对数据条件的要求没有皮尔逊相关系数严格，只要两个变量的观测值是成对的等级评定资料，或者是由连续变量观测资料转化得到的等级资料，不论两个变量的总体分布形态、样本容量的大小如何，都可以用斯皮尔曼等级相关系数来进行研究。我们通过下面的方式来计算斯皮尔曼相关系数。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;boston_df.corr(&#39;spearman&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjEzNTE4LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208213518.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;在 Notebook 或 JupyterLab 中，我们可以为 &lt;code&gt;PRICE&lt;/code&gt;  列添加渐变色，用颜色直观的展示出跟房价负相关、正相关、不相关的列， &lt;code&gt;DataFrame&lt;/code&gt;  对象 &lt;code&gt;style&lt;/code&gt;  属性的 &lt;code&gt;background_gradient&lt;/code&gt;  方法可以完成这个操作，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;boston_df.corr(&#39;spearman&#39;).style.background_gradient(&#39;RdYlBu&#39;, subset=[&#39;PRICE&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjE1MjI4LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208215228.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;上面代码中的 &lt;code&gt;RdYlBu&lt;/code&gt;  代表的颜色如下所示，相关系数的数据值越接近 &lt;code&gt;1&lt;/code&gt; ，颜色越接近红色；数据值越接近 &lt;code&gt;1&lt;/code&gt; ，颜色越接近蓝色；数据值在 &lt;code&gt;0&lt;/code&gt;  附件则是黄色。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.get_cmap(&#39;RdYlBu&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjE1MDU3LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208215057.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;index的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#index的应用&#34;&gt;#&lt;/a&gt; Index 的应用&lt;/h3&gt;
&lt;p&gt;我们再来看看 &lt;code&gt;Index&lt;/code&gt;  类型，它为 &lt;code&gt;Series&lt;/code&gt;  和 &lt;code&gt;DataFrame&lt;/code&gt;  对象提供了索引服务，常用的 &lt;code&gt;Index&lt;/code&gt;  有以下几种。&lt;/p&gt;
&lt;h4 id=&#34;范围索引rangeindex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#范围索引rangeindex&#34;&gt;#&lt;/a&gt; 范围索引（RangeIndex）&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sales_data = np.random.randint(400, 1000, 12)
month_index = pd.RangeIndex(1, 13, name=&#39;月份&#39;)
ser = pd.Series(data=sales_data, index=month_index)
ser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;月份
1     703
2     705
3     557
4     943
5     961
6     615
7     788
8     985
9     921
10    951
11    874
12    609
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;分类索引categoricalindex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分类索引categoricalindex&#34;&gt;#&lt;/a&gt; 分类索引（CategoricalIndex）&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;cate_index = pd.CategoricalIndex(
    [&#39;苹果&#39;, &#39;香蕉&#39;, &#39;苹果&#39;, &#39;苹果&#39;, &#39;桃子&#39;, &#39;香蕉&#39;],
    ordered=True,
    categories=[&#39;苹果&#39;, &#39;香蕉&#39;, &#39;桃子&#39;]
)
ser = pd.Series(data=amount, index=cate_index)
ser
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;苹果    6
香蕉    6
苹果    7
苹果    6
桃子    8
香蕉    6
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser.groupby(level=0).sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;苹果    19
香蕉    12
桃子     8
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;多级索引multiindex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多级索引multiindex&#34;&gt;#&lt;/a&gt; 多级索引（MultiIndex）&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ids = np.arange(1001, 1006)
sms = [&#39;期中&#39;, &#39;期末&#39;]
index = pd.MultiIndex.from_product((ids, sms), names=[&#39;学号&#39;, &#39;学期&#39;])
courses = [&#39;语文&#39;, &#39;数学&#39;, &#39;英语&#39;]
scores = np.random.randint(60, 101, (10, 3))
df = pd.DataFrame(data=scores, columns=courses, index=index)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码使用了 &lt;code&gt;MultiIndex&lt;/code&gt;  的类方法 &lt;code&gt;from_product&lt;/code&gt; ，该方法通过 &lt;code&gt;ids&lt;/code&gt;  和 &lt;code&gt;sms&lt;/code&gt;  两组数据的笛卡尔积构造了多级索引。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;             语文 数学 英语
学号	学期			
1001  期中	93	77	60
      期末	93	98	84
1002  期中	64	78	71
      期末	70	71	97
1003  期中	72	88	97
      期末	99	100	63
1004  期中	80	71	61
      期末	91	62	72
1005  期中	82	95	67
      期末	84	78	86
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 计算每个学生的成绩，期中占25%，期末占75%
df.groupby(level=0).agg(lambda x: x.values[0] * 0.25 + x.values[1] * 0.75)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        语文    数学    英语
学号			
1001	93.00	92.75	78.00
1002	68.50	72.75	90.50
1003	92.25	97.00	71.50
1004	88.25	64.25	69.25
1005	83.50	82.25	81.25
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;日期时间索引datetimeindex&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#日期时间索引datetimeindex&#34;&gt;#&lt;/a&gt; 日期时间索引（DatetimeIndex）&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;date_range()&lt;/code&gt;  函数，我们可以创建日期时间索引，代码如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pd.date_range(&#39;2021-1-1&#39;, &#39;2021-6-1&#39;, periods=10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2021-01-01 00:00:00&#39;, &#39;2021-01-17 18:40:00&#39;,
               &#39;2021-02-03 13:20:00&#39;, &#39;2021-02-20 08:00:00&#39;,
               &#39;2021-03-09 02:40:00&#39;, &#39;2021-03-25 21:20:00&#39;,
               &#39;2021-04-11 16:00:00&#39;, &#39;2021-04-28 10:40:00&#39;,
               &#39;2021-05-15 05:20:00&#39;, &#39;2021-06-01 00:00:00&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pd.date_range(&#39;2021-1-1&#39;, &#39;2021-6-1&#39;, freq=&#39;W&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2021-01-03&#39;, &#39;2021-01-10&#39;, &#39;2021-01-17&#39;, &#39;2021-01-24&#39;,
               &#39;2021-01-31&#39;, &#39;2021-02-07&#39;, &#39;2021-02-14&#39;, &#39;2021-02-21&#39;,
               &#39;2021-02-28&#39;, &#39;2021-03-07&#39;, &#39;2021-03-14&#39;, &#39;2021-03-21&#39;,
               &#39;2021-03-28&#39;, &#39;2021-04-04&#39;, &#39;2021-04-11&#39;, &#39;2021-04-18&#39;,
               &#39;2021-04-25&#39;, &#39;2021-05-02&#39;, &#39;2021-05-09&#39;, &#39;2021-05-16&#39;,
               &#39;2021-05-23&#39;, &#39;2021-05-30&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=&#39;W-SUN&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过 &lt;code&gt;DateOffset&lt;/code&gt;  类型，我们可以设置时间差并和 &lt;code&gt;DatetimeIndex&lt;/code&gt;  进行运算，具体的操作如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;index = pd.date_range(&#39;2021-1-1&#39;, &#39;2021-6-1&#39;, freq=&#39;W&#39;)
index - pd.DateOffset(days=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2021-01-01&#39;, &#39;2021-01-08&#39;, &#39;2021-01-15&#39;, &#39;2021-01-22&#39;,
               &#39;2021-01-29&#39;, &#39;2021-02-05&#39;, &#39;2021-02-12&#39;, &#39;2021-02-19&#39;,
               &#39;2021-02-26&#39;, &#39;2021-03-05&#39;, &#39;2021-03-12&#39;, &#39;2021-03-19&#39;,
               &#39;2021-03-26&#39;, &#39;2021-04-02&#39;, &#39;2021-04-09&#39;, &#39;2021-04-16&#39;,
               &#39;2021-04-23&#39;, &#39;2021-04-30&#39;, &#39;2021-05-07&#39;, &#39;2021-05-14&#39;,
               &#39;2021-05-21&#39;, &#39;2021-05-28&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;index + pd.DateOffset(days=2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;DatetimeIndex([&#39;2021-01-05&#39;, &#39;2021-01-12&#39;, &#39;2021-01-19&#39;, &#39;2021-01-26&#39;,
               &#39;2021-02-02&#39;, &#39;2021-02-09&#39;, &#39;2021-02-16&#39;, &#39;2021-02-23&#39;,
               &#39;2021-03-02&#39;, &#39;2021-03-09&#39;, &#39;2021-03-16&#39;, &#39;2021-03-23&#39;,
               &#39;2021-03-30&#39;, &#39;2021-04-06&#39;, &#39;2021-04-13&#39;, &#39;2021-04-20&#39;,
               &#39;2021-04-27&#39;, &#39;2021-05-04&#39;, &#39;2021-05-11&#39;, &#39;2021-05-18&#39;,
               &#39;2021-05-25&#39;, &#39;2021-06-01&#39;],
              dtype=&#39;datetime64[ns]&#39;, freq=None)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;可以使用 &lt;code&gt;DatatimeIndex&lt;/code&gt;  类型的相关方法来处理数据，具体包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shift()&lt;/code&gt;  方法：通过时间前移或后移数据，我们仍然以上面百度股票数据为例，代码如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;baidu_df.shift(3, fill_value=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjIwNTUxLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208220551.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:150%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;baidu_df.shift(-1, fill_value=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjIwNzEzLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208220713.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:150%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;asfreq()&lt;/code&gt;  方法：指定一个时间频率抽取对应的数据，代码如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;baidu_df.asfreq(&#39;5D&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjIxMjAyLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208221202.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;baidu_df.asfreq(&#39;5D&#39;, method=&#39;ffill&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjIxMjQ5LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208221249.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:150%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;resample()&lt;/code&gt;  方法：基于时间对数据进行重采样，相当于根据时间周期对数据进行了分组操作，代码如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;baidu_df.resample(&#39;1M&#39;).mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjIxNDI5LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208221429.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码中， &lt;code&gt;W&lt;/code&gt;  表示一周， &lt;code&gt;5D&lt;/code&gt;  表示 &lt;code&gt;5&lt;/code&gt;  天， &lt;code&gt;1M&lt;/code&gt;  表示 &lt;code&gt;1&lt;/code&gt;  个月。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;时区转换&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;获取时区信息。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import pytz

pytz.common_timezones
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tz_localize()&lt;/code&gt;  方法：将日期时间本地化。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;baidu_df = baidu_df.tz_localize(&#39;Asia/Chongqing&#39;)
baidu_df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjIxOTQ3LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208221947.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tz_convert()&lt;/code&gt;  方法：转换时区。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;baidu_df.tz_convert(&#39;America/New_York&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMjA4MjIyNDA0LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211208222404.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/73.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-4/</guid>
            <title>Pandas的应用-4</title>
            <link>https://scottalive.github.io/computer-science/python/basic/73.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-4/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 10:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;pandas的应用-4&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pandas的应用-4&#34;&gt;#&lt;/a&gt; Pandas 的应用 - 4&lt;/h2&gt;
&lt;h3 id=&#34;dataframe的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dataframe的应用&#34;&gt;#&lt;/a&gt; DataFrame 的应用&lt;/h3&gt;
&lt;h4 id=&#34;数据分析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据分析&#34;&gt;#&lt;/a&gt; 数据分析&lt;/h4&gt;
&lt;p&gt;经过前面的学习，我们已经将数据准备就绪而且变成了我们想要的样子，接下来就是最为重要的数据分析阶段了。当我们拿到一大堆数据的时候，如何从数据中迅速的解读出有价值的信息，这就是数据分析要解决的问题。首先，我们可以获取数据的描述性统计信息，通过描述性统计信息，我们可以了解数据的集中趋势和离散趋势。&lt;/p&gt;
&lt;p&gt;例如，我们有如下所示的学生成绩表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import numpy as np
import pandas as pd

scores = np.random.randint(50, 101, (5, 3))
names = (&#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;, &#39;马超&#39;, &#39;黄忠&#39;)
courses = (&#39;语文&#39;, &#39;数学&#39;, &#39;英语&#39;)
df = pd.DataFrame(data=scores, columns=courses, index=names)
df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     语文   数学   英语
关羽  96    72    73
张飞  72    70	97
赵云  74    51	79
马超  100   54	54
黄忠  89    100	88
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以通过 &lt;code&gt;DataFrame&lt;/code&gt;  对象的方法 &lt;code&gt;mean&lt;/code&gt; 、 &lt;code&gt;max&lt;/code&gt; 、 &lt;code&gt;min&lt;/code&gt; 、 &lt;code&gt;std&lt;/code&gt; 、 &lt;code&gt;var&lt;/code&gt;  等方法分别获取每个学生或每门课程的平均分、最高分、最低分、标准差、方差等信息，也可以直接通过 &lt;code&gt;describe&lt;/code&gt;  方法直接获取描述性统计信息，代码如下所示。&lt;/p&gt;
&lt;p&gt;计算每门课程成绩的平均分。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.mean()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;语文    86.2
数学    69.4
英语    78.2
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;计算每个学生成绩的平均分。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.mean(axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;关羽    80.333333
张飞    79.666667
赵云    68.000000
马超    69.333333
黄忠    92.333333
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;计算每门课程成绩的方差。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.var()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;语文    161.2
数学    379.8
英语    265.7
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：通过方差可以看出，数学成绩波动最大，最不稳定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;获取每门课程的描述性统计信息。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.describe()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        语文        数学         英语
count   5.000000	5.000000	5.000000
mean    86.200000	69.400000	78.200000
std     12.696456	19.488458	16.300307
min     72.000000	51.000000	54.000000
25%     74.000000	54.000000	73.000000
50%     89.000000	70.000000	79.000000
75%     96.000000	72.000000	88.000000
max     100.000000	100.000000	97.000000
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;排序和top-n&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#排序和top-n&#34;&gt;#&lt;/a&gt; 排序和 Top-N&lt;/h5&gt;
&lt;p&gt;如果需要对数据进行排序，可以使用 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;sort_values&lt;/code&gt;  方法，该方法的 &lt;code&gt;by&lt;/code&gt;  参数可以指定根据哪个列或哪些列进行排序，而 &lt;code&gt;ascending&lt;/code&gt;  参数可以指定升序或是降序。例如，下面的代码展示了如何将学生表按语文成绩排降序。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.sort_values(by=&#39;语文&#39;, ascending=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      语文   数学   英语
马超	100    54	  54
关羽	96     72     73
黄忠	89     100    88
赵云	74     51     79
张飞	72     70     97
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果 &lt;code&gt;DataFrame&lt;/code&gt;  数据量很大，排序将是一个非常耗费时间的操作。有的时候我们只需要获得排前 N 名或后 N 名的数据，这个时候其实没有必要对整个数据进行排序，而是直接利用堆结构找出 Top-N 的数据。 &lt;code&gt;DataFrame&lt;/code&gt;  的 &lt;code&gt;nlargest&lt;/code&gt;  和 &lt;code&gt;nsmallest&lt;/code&gt;  方法就提供对 Top-N 操作的支持，代码如下所示。&lt;/p&gt;
&lt;p&gt;找出语文成绩前 3 名的学生信息。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.nlargest(3, &#39;语文&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      语文   数学   英语
马超	100    54	  54
关羽	96     72     73
黄忠	89     100    88
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;找出数学成绩最低的 3 名学生的信息。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.nsmallest(3, &#39;数学&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;      语文  数学  英语
赵云  74    51	79
马超  100   54	54
张飞  72    70	97
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;分组聚合操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#分组聚合操作&#34;&gt;#&lt;/a&gt; 分组聚合操作&lt;/h5&gt;
&lt;p&gt;我们先从 Excel 文件中读取一组销售数据，然后再为大家演示如何进行分组聚合操作。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df = pd.read_excel(&#39;2020年销售数据.xlsx&#39;)
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：如果需要上面例子中的 Excel 文件，可以通过百度云盘进行获取。链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMU5oV3RZY3BGekY3MmN4Y3NvRG9YalE/cHdkPXN3ZzElRUYlQkMlOEMlRTYlOEYlOTAlRTUlOEYlOTYlRTclQTAlODElRUYlQkMlOUFzd2cxJUUzJTgwJTgy&#34;&gt;https://pan.baidu.com/s/1NhWtYcpFzF72cxcsoDoXjQ?pwd=swg1，提取码：swg1。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    销售日期	 销售区域   销售渠道  销售订单     品牌    售价  销售数量
0   2020-01-01  上海       拼多多    182894-455  八匹马  99    83
1   2020-01-01  上海       抖音      205635-402  八匹马  219   29
2   2020-01-01  上海       天猫      205654-021  八匹马  169   85
3   2020-01-01  上海       天猫      205654-519  八匹马  169   14
4   2020-01-01  上海       天猫      377781-010  皮皮虾  249   61
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们要统计每个销售区域的销售总额，可以先通过 “售价” 和 “销售数量” 计算出销售额，为 &lt;code&gt;DataFrame&lt;/code&gt;  添加一个列，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df[&#39;销售额&#39;] = df[&#39;售价&#39;] * df[&#39;销售数量&#39;]
df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    销售日期	 销售区域   销售渠道  销售订单     品牌    售价  销售数量  销售额
0   2020-01-01  上海       拼多多    182894-455  八匹马  99    83        8217
1   2020-01-01  上海       抖音      205635-402  八匹马  219   29        6351
2   2020-01-01  上海       天猫      205654-021  八匹马  169   85        14365
3   2020-01-01  上海       天猫      205654-519  八匹马  169   14        2366
4   2020-01-01  上海       天猫      377781-010  皮皮虾  249   61        15189
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;然后再根据 “销售区域” 列对数据进行分组，这里我们使用的是 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;groupby&lt;/code&gt;  方法。分组之后，我们取 “销售额” 这个列在分组内进行求和处理，代码和结果如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.groupby(&#39;销售区域&#39;).销售额.sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;销售区域
上海    11610489
北京    12477717
南京     1767301
安徽      895463
广东     1617949
江苏      537079
浙江      687862
福建    10178227
Name: 销售额, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果我们要统计每个月的销售总额，我们可以将 “销售日期” 作为 groupby` 方法的参数，当然这里需要先将 “销售日期” 处理成月，代码和结果如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.groupby(df[&#39;销售日期&#39;].dt.month).销售额.sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;销售日期
1     5409855
2     4608455
3     4164972
4     3996770
5     3239005
6     2817936
7     3501304
8     2948189
9     2632960
10    2375385
11    2385283
12    1691973
Name: 销售额, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来我们将难度升级，统计每个销售区域每个月的销售总额，这又该如何处理呢？事实上， &lt;code&gt;groupby&lt;/code&gt;  方法的第一个参数可以是一个列表，列表中可以指定多个分组的依据，大家看看下面的代码和输出结果就明白了。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.groupby([&#39;销售区域&#39;, df[&#39;销售日期&#39;].dt.month]).销售额.sum()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;销售区域  销售日期
上海      1       1679125
          2       1689527
          3       1061193
          4       1082187
          5        841199
          6        785404
          7        863906
          8        734937
          9       1107693
         10       412108
         11       825169
         12       528041
北京     1       1878234
         2       1807787
         3       1360666
         4       1205989
         5        807300
         6       1216432
         7       1219083
         8        645727
         9        390077
        10       671608
        11       678668
        12       596146
南京     7        841032
        10       710962
        12       215307
安徽     4        341308
         5        554155
广东     3        388180
         8        469390
         9        365191
        11       395188
江苏     4        537079
浙江     3        248354
         8        439508
福建     1       1852496
         2       1111141
         3       1106579
         4        830207
         5       1036351
         6        816100
         7        577283
         8        658627
         9        769999
        10       580707
        11       486258
        12       352479
Name: 销售额, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果希望统计出每个区域的销售总额以及每个区域单笔金额的最高和最低，我们可以在 &lt;code&gt;DataFrame&lt;/code&gt;  或 &lt;code&gt;Series&lt;/code&gt;  对象上使用 &lt;code&gt;agg&lt;/code&gt;  方法并指定多个聚合函数，代码和结果如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.groupby(&#39;销售区域&#39;).销售额.agg([&#39;sum&#39;, &#39;max&#39;, &#39;min&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          sum        max        min
销售区域			
上海      11610489   116303     948
北京      12477717   133411     690
南京      1767301    87527      1089
安徽      895463     68502      1683
广东      1617949    120807     990
江苏      537079     114312     3383
浙江      687862     90909      3927
福建      10178227   87527      897
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果希望自定义聚合后的列的名字，可以使用如下所示的方法。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.groupby(&#39;销售区域&#39;).销售额.agg(销售总额=&#39;sum&#39;, 单笔最高=&#39;max&#39;, 单笔最低=&#39;min&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;          销售总额   单笔最高    单笔最低
销售区域			
上海      11610489   116303     948
北京      12477717   133411     690
南京      1767301    87527      1089
安徽      895463     68502      1683
广东      1617949    120807     990
江苏      537079     114312     3383
浙江      687862     90909      3927
福建      10178227   87527      897
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果需要对多个列使用不同的聚合函数，例如 “统计每个销售区域销售额的平均值以及销售数量的最低值和最高值”，我们可以按照下面的方式来操作。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df.groupby(&#39;销售区域&#39;)[[&#39;销售额&#39;, &#39;销售数量&#39;]].agg(&amp;#123;
    &#39;销售额&#39;: &#39;mean&#39;, &#39;销售数量&#39;: [&#39;max&#39;, &#39;min&#39;]
&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;         销售额        销售数量
         mean          max    min
销售区域			
上海     20622.538188  100    10
北京     20125.350000  100    10
南京     22370.898734  100    11
安徽     26337.147059  98     16
广东     32358.980000  98     10
江苏     29837.722222  98     15
浙江     27514.480000  95     20
福建     18306.163669  100    10
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;透视表和交叉表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#透视表和交叉表&#34;&gt;#&lt;/a&gt; 透视表和交叉表&lt;/h5&gt;
&lt;p&gt;上面的例子中，“统计每个销售区域每个月的销售总额” 会产生一个看起来很长的结果，在实际工作中我们通常把那些行很多列很少的表成为 “窄表”，如果我们不想得到这样的一个 “窄表”，可以使用 &lt;code&gt;DataFrame&lt;/code&gt;  的 &lt;code&gt;pivot_table&lt;/code&gt;  方法或者是 &lt;code&gt;pivot_table&lt;/code&gt;  函数来生成透视表。透视表的本质就是对数据进行分组聚合操作，&lt;strong&gt;根据 A 列对 B 列进行统计&lt;/strong&gt;，如果大家有使用 Excel 的经验，相信对透视表这个概念一定不会陌生。例如，我们要 “统计每个销售区域的销售总额”，那么 “销售区域” 就是我们的 A 列，而 “销售额” 就是我们的 B 列，在 &lt;code&gt;pivot_table&lt;/code&gt;  函数中分别对应 &lt;code&gt;index&lt;/code&gt;  和 &lt;code&gt;values&lt;/code&gt;  参数，这两个参数都可以是单个列或者多个列。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pd.pivot_table(df, index=&#39;销售区域&#39;, values=&#39;销售额&#39;, aggfunc=&#39;sum&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMTA2MTgwOTEyLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211106180912.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：上面的结果操作跟之前用 &lt;code&gt;groupby&lt;/code&gt;  的方式得到的结果有一些区别， &lt;code&gt;groupby&lt;/code&gt;  操作后，如果对单个列进行聚合，得到的结果是一个 &lt;code&gt;Series&lt;/code&gt;  对象，而上面的结果是一个 &lt;code&gt;DataFrame&lt;/code&gt;  对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果要统计每个销售区域每个月的销售总额，也可以使用 &lt;code&gt;pivot_table&lt;/code&gt;  函数，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pd.pivot_table(df, index=[&#39;销售区域&#39;, df[&#39;销售日期&#39;].dt.month], values=&#39;销售额&#39;, aggfunc=&#39;sum&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的操作结果是一个 &lt;code&gt;DataFrame&lt;/code&gt; ，但也是一个长长的 “窄表”，如果希望做成一个行比较少列比较多的 “宽表”，可以将 &lt;code&gt;index&lt;/code&gt;  参数中的列放到 &lt;code&gt;columns&lt;/code&gt;  参数中，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pd.pivot_table(
    df, index=&#39;销售区域&#39;, columns=df[&#39;销售日期&#39;].dt.month, 
    values=&#39;销售额&#39;, aggfunc=&#39;sum&#39;, fill_value=0
)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;： &lt;code&gt;pivot_table&lt;/code&gt;  函数的 &lt;code&gt;fill_value=0&lt;/code&gt;  会将空值处理为 &lt;code&gt;0&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMTA2MTA0NTUxLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211106104551.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;pivot_table&lt;/code&gt;  函数时，还可以通过添加 &lt;code&gt;margins&lt;/code&gt;  和 &lt;code&gt;margins_name&lt;/code&gt;  参数对分组聚合的结果做一个汇总，具体的操作和效果如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df[&#39;月份&#39;] = df[&#39;销售日期&#39;].dt.month
pd.pivot_table(
    df, index=&#39;销售区域&#39;, columns=&#39;月份&#39;,
    values=&#39;销售额&#39;, aggfunc=&#39;sum&#39;, fill_value=0, 
    margins=True, margins_name=&#39;总计&#39;
)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211106181707.png&#34; alt=&#34;image-20211106181707655&#34; /&gt;&lt;/p&gt;
&lt;p&gt;交叉表就是一种特殊的透视表，它不需要先构造一个 &lt;code&gt;DataFrame&lt;/code&gt;  对象，而是直接通过数组或 &lt;code&gt;Series&lt;/code&gt;  对象指定两个或多个因素进行运算得到统计结果。例如，我们要统计每个销售区域的销售总额，也可以按照如下所示的方式来完成，我们先准备三组数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sales_area, sales_month, sales_amount = df[&#39;销售区域&#39;], df[&#39;月份&#39;], df[&#39;销售额&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;crosstab&lt;/code&gt;  函数生成交叉表。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pd.crosstab(
    index=sales_area, columns=sales_month, values=sales_amount, aggfunc=&#39;sum&#39;
).fillna(0).applymap(int)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码使用了 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;fillna&lt;/code&gt;  方法将空值处理为 0，再使用 &lt;code&gt;applymap&lt;/code&gt;  方法将数据类型处理成整数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;数据可视化&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据可视化&#34;&gt;#&lt;/a&gt; 数据可视化&lt;/h4&gt;
&lt;p&gt;一图胜千言，我们对数据进行透视的结果，最终要通过图表的方式呈现出来，因为图表具有极强的表现力，能够让我们迅速的解读数据中隐藏的价值。和 &lt;code&gt;Series&lt;/code&gt;  一样， &lt;code&gt;DataFrame&lt;/code&gt;  对象提供了 &lt;code&gt;plot&lt;/code&gt;  方法来支持绘图，底层仍然是通过 &lt;code&gt;matplotlib&lt;/code&gt;  库实现图表的渲染。关于 &lt;code&gt;matplotlib&lt;/code&gt;  的内容，我们在下一个章节进行详细的探讨，这里我们只简单的讲解 &lt;code&gt;plot&lt;/code&gt;  方法的用法。&lt;/p&gt;
&lt;p&gt;例如，我们想通过一张柱状图来比较 “每个销售区域的销售总额”，可以直接在透视表上使用 &lt;code&gt;plot&lt;/code&gt;  方法生成柱状图。我们先导入 &lt;code&gt;matplotlib.pyplot&lt;/code&gt;  模块，通过修改绘图的参数使其支持中文显示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import matplotlib.pyplot as plt

plt.rcParams[&#39;font.sans-serif&#39;] = &#39;FZJKai-Z03S&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的 &lt;code&gt;FZJKai-Z03S&lt;/code&gt;  是我电脑上已经安装的一种支持中文的字体的名称，字体的名称可以通过查看用户主目录下 &lt;code&gt;.matplotlib&lt;/code&gt;  文件夹下名为 &lt;code&gt;fontlist-v330.json&lt;/code&gt;  的文件来获得，而这个文件在执行上面的命令后就会生成。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;使用魔法指令配置生成矢量图。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;%config InlineBackend.figure_format = &#39;svg&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;绘制 “每个销售区域销售总额” 的柱状图。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;temp = pd.pivot_table(df, index=&#39;销售区域&#39;, values=&#39;销售额&#39;, aggfunc=&#39;sum&#39;)
temp.plot(figsize=(8, 4), kind=&#39;bar&#39;)
plt.xticks(rotation=0)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的第 3 行代码会将横轴刻度上的文字旋转到 0 度，第 4 行代码会显示图像。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMTA2MTk1MDQwLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211106195040.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;如果要绘制饼图，可以修改 &lt;code&gt;plot&lt;/code&gt;  方法的 &lt;code&gt;kind&lt;/code&gt;  参数为 &lt;code&gt;pie&lt;/code&gt; ，然后使用定制饼图的参数对图表加以定制，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;temp.sort_values(by=&#39;销售额&#39;, ascending=False).plot(
    figsize=(6, 6), kind=&#39;pie&#39;, y=&#39;销售额&#39;, 
    autopct=&#39;%.2f%%&#39;, pctdistance=0.8,
    wedgeprops=dict(linewidth=1, width=0.35)
)
plt.legend(loc=&#39;center&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMTA2MjAxNTUwLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211106201550.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/72.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-3/</guid>
            <title>Pandas的应用-3</title>
            <link>https://scottalive.github.io/computer-science/python/basic/72.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-3/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 09:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;pandas的应用-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pandas的应用-3&#34;&gt;#&lt;/a&gt; Pandas 的应用 - 3&lt;/h2&gt;
&lt;h3 id=&#34;dataframe的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dataframe的应用&#34;&gt;#&lt;/a&gt; DataFrame 的应用&lt;/h3&gt;
&lt;h4 id=&#34;数据清洗&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据清洗&#34;&gt;#&lt;/a&gt; 数据清洗&lt;/h4&gt;
&lt;p&gt;通常，我们从 Excel、CSV 或数据库中获取到的数据并不是非常完美的，里面可能因为系统或人为的原因混入了重复值或异常值，也可能在某些字段上存在缺失值；再者， &lt;code&gt;DataFrame&lt;/code&gt;  中的数据也可能存在格式不统一、量纲不统一等各种问题。因此，在开始数据分析之前，对数据进行清洗就显得特别重要。&lt;/p&gt;
&lt;h5 id=&#34;缺失值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#缺失值&#34;&gt;#&lt;/a&gt; 缺失值&lt;/h5&gt;
&lt;p&gt;可以使用 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;isnull&lt;/code&gt;  或 &lt;code&gt;isna&lt;/code&gt;  方法来找出数据表中的缺失值，如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.isnull()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.isna()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename   job	    mgr     sal     comm    dno
eno						
1359	False	False	False	False	False	False
2056	False	False	False	False	False	False
3088	False	False	False	False	False	False
3211	False	False	False	False	True	False
3233	False	False	False	False	True	False
3244	False	False	False	False	True	False
3251	False	False	False	False	True	False
3344	False	False	False	False	False	False
3577	False	False	False	False	True	False
3588	False	False	False	False	True	False
4466	False	False	False	False	True	False
5234	False	False	False	False	True	False
5566	False	False	False	False	False	False
7800	False	False	True	False	False	False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;相对应的， &lt;code&gt;notnull&lt;/code&gt;  和 &lt;code&gt;notna&lt;/code&gt;  方法可以将非空的值标记为 &lt;code&gt;True&lt;/code&gt; 。如果想删除这些缺失值，可以使用 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;dropna&lt;/code&gt;  方法，该方法的 &lt;code&gt;axis&lt;/code&gt;  参数可以指定沿着 0 轴还是 1 轴删除，也就是说当遇到空值时，是删除整行还是删除整列，默认是沿 0 轴进行删除的，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.dropna()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename   job      mgr	 sal    comm     dno
eno						
1359	胡一刀  销售员	3344.0	1800   200.0	30
2056	乔峰    架构师	 7800.0	 5000	1500.0	 20
3088	李莫愁  设计师	2056.0	3500   800.0	20
3344	黄蓉    销售主管	7800.0	3000   800.0	30
5566	宋远桥  会计师	7800.0	4000   1000.0	10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要沿着 1 轴进行删除，可以使用下面的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.dropna(axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job      sal    dno
eno				
1359	胡一刀   销售员    1800	30
2056	乔峰     架构师	  5000	 20
3088	李莫愁   设计师    3500	20
3211	张无忌   程序员    3200	20
3233	丘处机   程序员    3400	20
3244	欧阳锋   程序员    3200	20
3251	张翠山   程序员    4000	20
3344	黄蓉     销售主管  3000	30
3577	杨过     会计	   2200	  10
3588	朱九真   会计	  2500	 10
4466	苗人凤   销售员	 2500   30
5234	郭靖     出纳      2000   10
5566	宋远桥   会计师    4000   10
7800	张三丰   总裁      9000   20
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;： &lt;code&gt;DataFrame&lt;/code&gt;  对象的很多方法都有一个名为 &lt;code&gt;inplace&lt;/code&gt;  的参数，该参数的默认值为 &lt;code&gt;False&lt;/code&gt; ，表示我们的操作不会修改原来的 &lt;code&gt;DataFrame&lt;/code&gt;  对象，而是将处理后的结果通过一个新的 &lt;code&gt;DataFrame&lt;/code&gt;  对象返回。如果将该参数的值设置为 &lt;code&gt;True&lt;/code&gt; ，那么我们的操作就会在原来的 &lt;code&gt;DataFrame&lt;/code&gt;  上面直接修改，方法的返回值为 &lt;code&gt;None&lt;/code&gt; 。简单的说，上面的操作并没有修改 &lt;code&gt;emp_df&lt;/code&gt; ，而是返回了一个新的 &lt;code&gt;DataFrame&lt;/code&gt;  对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在某些特定的场景下，我们可以对空值进行填充，对应的方法是 &lt;code&gt;fillna&lt;/code&gt; ，填充空值时可以使用指定的值（通过 &lt;code&gt;value&lt;/code&gt;  参数进行指定），也可以用表格中前一个单元格（通过设置参数 &lt;code&gt;method=ffill&lt;/code&gt; ）或后一个单元格（通过设置参数 &lt;code&gt;method=bfill&lt;/code&gt; ）的值进行填充，当代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.fillna(value=0)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：填充的值如何选择也是一个值得探讨的话题，实际工作中，可能会使用某种统计量（如：均值、众数等）进行填充，或者使用某种插值法（如：随机插值法、拉格朗日插值法等）进行填充，甚至有可能通过回归模型、贝叶斯模型等对缺失数据进行填充。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job        mgr      sal     comm    dno
eno
1359	胡一刀    销售员	   3344.0	1800	200.0	30
2056	乔峰	    分析师	    7800.0	 5000	 1500.0	 20
3088	李莫愁	   设计师	   2056.0	3500	800.0	20
3211	张无忌	   程序员	   2056.0	3200	0.0     20
3233	丘处机	   程序员	   2056.0	3400	0.0	    20
3244	欧阳锋	   程序员	   3088.0	3200	0.0     20
3251	张翠山	   程序员	   2056.0	4000	0.0	    20
3344	黄蓉	    销售主管   7800.0	3000	800.0	30
3577	杨过	    会计	     5566.0	  2200	  0.0	  10
3588	朱九真	   会计	    5566.0	 2500	 0.0	 10
4466	苗人凤	   销售员	   3344.0	2500	0.0	    30
5234	郭靖	    出纳	     5566.0	  2000	  0.0	  10
5566	宋远桥	   会计师	   7800.0	4000	1000.0	10
7800	张三丰	   总裁	    0.0      9000	 1200.0	 20
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;重复值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重复值&#34;&gt;#&lt;/a&gt; 重复值&lt;/h5&gt;
&lt;p&gt;接下来，我们先给之前的部门表添加两行数据，让部门表中名为 “研发部” 和 “销售部” 的部门各有两个。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;dept_df.loc[50] = &amp;#123;&#39;dname&#39;: &#39;研发部&#39;, &#39;dloc&#39;: &#39;上海&#39;&amp;#125;
dept_df.loc[60] = &amp;#123;&#39;dname&#39;: &#39;销售部&#39;, &#39;dloc&#39;: &#39;长沙&#39;&amp;#125;
dept_df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    dname  dloc
dno		
10	会计部	北京
20	研发部	成都
30	销售部	重庆
40	运维部	天津
50	研发部	上海
60	销售部	长沙
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;现在，我们的数据表中有重复数据了，我们可以通过 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;duplicated&lt;/code&gt;  方法判断是否存在重复值，该方法在不指定参数时默认判断行索引是否重复，我们也可以指定根据部门名称 &lt;code&gt;dname&lt;/code&gt;  判断部门是否重复，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;dept_df.duplicated(&#39;dname&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;dno
10    False
20    False
30    False
40    False
50     True
60     True
dtype: bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上面的输出可以看到， &lt;code&gt;50&lt;/code&gt;  和 &lt;code&gt;60&lt;/code&gt;  两个部门从部门名称上来看是重复的，如果要删除重复值，可以使用 &lt;code&gt;drop_duplicates&lt;/code&gt;  方法，该方法的 &lt;code&gt;keep&lt;/code&gt;  参数可以控制在遇到重复值时，保留第一项还是保留最后一项，或者多个重复项一个都不用保留，全部删除掉。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;dept_df.drop_duplicates(&#39;dname&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	dname	dloc
dno		
10	会计部	北京
20	研发部	成都
30	销售部	重庆
40	运维部	天津
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将 &lt;code&gt;keep&lt;/code&gt;  参数的值修改为 &lt;code&gt;last&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;dept_df.drop_duplicates(&#39;dname&#39;, keep=&#39;last&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	dname	dloc
dno		
10	会计部	北京
40	运维部	天津
50	研发部	上海
60	销售部	长沙
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;异常值&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异常值&#34;&gt;#&lt;/a&gt; 异常值&lt;/h5&gt;
&lt;p&gt;异常值在统计学上的全称是疑似异常值，也称作离群点（outlier），异常值的分析也称作离群点分析。异常值是指样本中出现的 “极端值”，数据值看起来异常大或异常小，其分布明显偏离其余的观测值。实际工作中，有些异常值可能是由系统或人为原因造成的，但有些异常值却不是，它们能够重复且稳定的出现，属于正常的极端值，例如很多游戏产品中头部玩家的数据往往都是离群的极端值。所以，我们既不能忽视异常值的存在，也不能简单地把异常值从数据分析中剔除。重视异常值的出现，分析其产生的原因，常常成为发现问题进而改进决策的契机。&lt;/p&gt;
&lt;p&gt;异常值的检测有 Z-score 方法、IQR 方法、DBScan 聚类、孤立森林等，这里我们对前两种方法做一个简单的介绍。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMDA0MTkyODU4LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211004192858.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;如果数据服从正态分布，依据 3σ 法则，异常值被定义与平均值的偏差超过三倍标准差的值。在正态分布下，距离平均值 3σ 之外的值出现的概率为 $ P (|x-\mu|&amp;gt;3\sigma)&amp;lt;0.003 $，属于小概率事件。如果数据不服从正态分布，那么可以用远离平均值的多少倍的标准差来描述，这里的倍数就是 Z-score。Z-score 以标准差为单位去度量某一原始分数偏离平均值的距离，公式如下所示。&lt;/p&gt;
&lt;p&gt;&lt;span class=&#34;katex-display&#34;&gt;&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34; display=&#34;block&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;z&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mfrac&gt;&lt;mrow&gt;&lt;mi&gt;X&lt;/mi&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;/mrow&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;/mfrac&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;z = \frac {X - \mu} {\sigma}
&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.04398em;&#34;&gt;z&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.0463299999999998em;vertical-align:-0.686em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mopen nulldelimiter&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mfrac&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.3603299999999998em;&#34;&gt;&lt;span style=&#34;top:-2.314em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;σ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.23em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;frac-line&#34; style=&#34;border-bottom-width:0.04em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.677em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07847em;&#34;&gt;X&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;μ&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.686em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose nulldelimiter&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/p&gt;
&lt;p&gt;Z-score 需要根据经验和实际情况来决定，通常把远离标准差 &lt;code&gt;3&lt;/code&gt;  倍距离以上的数据点视为离群点，下面的代给出了如何通过 Z-score 方法检测异常值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import numpy as np


def detect_outliers_zscore(data, threshold=3):
    avg_value = np.mean(data)
    std_value = np.std(data)
    z_score = np.abs((data - avg_value) / std_value)
    return data[z_score &amp;gt; threshold]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;IQR 方法中的 IQR（Inter-Quartile Range）代表四分位距离，即上四分位数（Q3）和下四分位数（Q1）的差值。通常情况下，可以认为小于 $ Q1 - 1.5 \times IQR $ 或大于 $ Q3 + 1.5 \times IQR $ 的就是异常值，而这种检测异常值的方法也是箱线图（后面会讲到）默认使用的方法。下面的代给出了如何通过 IQR 方法检测异常值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import numpy as np


def detect_outliers_iqr(data, whis=1.5):
    q1, q3 = np.quantile(data, [0.25, 0.75])
    iqr = q3 - q1
    lower, upper = q1 - whis * iqr, q3 + whis * iqr
    return data[(data &amp;lt; lower) | (data &amp;gt; upper)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要删除异常值，可以使用 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;drop&lt;/code&gt;  方法，该方法可以根据行索引或列索引删除指定的行或列。例如我们认为月薪低于 &lt;code&gt;2000&lt;/code&gt;  或高于 &lt;code&gt;8000&lt;/code&gt;  的是员工表中的异常值，可以用下面的代码删除对应的记录。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.drop(emp_df[(emp_df.sal &amp;gt; 8000) | (emp_df.sal &amp;lt; 2000)].index)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要替换掉异常值，可以通过给单元格赋值的方式来实现，也可以使用 &lt;code&gt;replace&lt;/code&gt;  方法将指定的值替换掉。例如我们要将月薪为 &lt;code&gt;1800&lt;/code&gt;  和 &lt;code&gt;9000&lt;/code&gt;  的替换为月薪的平均值，补贴为 &lt;code&gt;800&lt;/code&gt;  的替换为 &lt;code&gt;1000&lt;/code&gt; ，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;avg_sal = np.mean(emp_df.sal).astype(int)
emp_df.replace(&amp;#123;&#39;sal&#39;: [1800, 9000], &#39;comm&#39;: 800&amp;#125;, &amp;#123;&#39;sal&#39;: avg_sal, &#39;comm&#39;: 1000&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;预处理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#预处理&#34;&gt;#&lt;/a&gt; 预处理&lt;/h5&gt;
&lt;p&gt;对数据进行预处理也是一个很大的话题，它包含了对数据的拆解、变换、归约、离散化等操作。我们先来看看数据的拆解。如果数据表中的数据是一个时间日期，我们通常都需要从年、季度、月、日、星期、小时、分钟等维度对其进行拆解，如果时间日期是用字符串表示的，可以先通过 &lt;code&gt;pandas&lt;/code&gt;  的 &lt;code&gt;to_datetime&lt;/code&gt;  函数将其处理成时间日期。&lt;/p&gt;
&lt;p&gt;在下面的例子中，我们先读取 Excel 文件，获取到一组销售数据，其中第一列就是销售日期，我们将其拆解为 “月份”、“季度” 和 “星期”，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sales_df = pd.read_excel(
    &#39;2020年销售数据.xlsx&#39;,
    usecols=[&#39;销售日期&#39;, &#39;销售区域&#39;, &#39;销售渠道&#39;, &#39;品牌&#39;, &#39;销售额&#39;]
)
sales_df.info()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：如果需要上面例子中的 Excel 文件，可以通过下面的百度云盘地址进行获取，数据在《从零开始学数据分析》目录中。链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXJRdWpsNVJRbjlSN1BhZEIyWjVnX2clRUYlQkMlOEMlRTYlOEYlOTAlRTUlOEYlOTYlRTclQTAlODElRUYlQkMlOUFlN2I0JUUzJTgwJTgy&#34;&gt;https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g，提取码：e7b4。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 1945 entries, 0 to 1944
Data columns (total 5 columns):
 #   Column  Non-Null Count  Dtype         
---  ------  --------------  -----         
 0   销售日期    1945 non-null   datetime64[ns]
 1   销售区域    1945 non-null   object        
 2   销售渠道    1945 non-null   object        
 3   品牌        1945 non-null   object        
 4   销售额      1945 non-null   int64         
dtypes: datetime64[ns](1), int64(1), object(3)
memory usage: 76.1+ KB
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;sales_df[&#39;月份&#39;] = sales_df[&#39;销售日期&#39;].dt.month
sales_df[&#39;季度&#39;] = sales_df[&#39;销售日期&#39;].dt.quarter
sales_df[&#39;星期&#39;] = sales_df[&#39;销售日期&#39;].dt.weekday
sales_df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	    销售日期	 销售区域	销售渠道	品牌	  销售额	月份	季度	星期
0	    2020-01-01	上海	     拼多多	 八匹马   8217	    1	 1	   2
1	    2020-01-01	上海	     抖音	      八匹马	6351	 1	  1	    2
2	    2020-01-01	上海	     天猫	      八匹马	14365	 1	  1	    2
3	    2020-01-01	上海	     天猫       八匹马	2366	 1	  1     2
4	    2020-01-01	上海	     天猫 	  皮皮虾	15189	 1	  1     2
...     ...         ...        ...       ...      ...     ...  ...   ...
1940    2020-12-30	北京	     京东	      花花姑娘 6994     12	 4	   2
1941    2020-12-30	福建	     实体	      八匹马	7663	 12	  4	    2
1942    2020-12-31	福建	     实体	      花花姑娘 14795    12	 4	   3
1943    2020-12-31	福建	     抖音	      八匹马	3481	 12	  4	    3
1944    2020-12-31	福建	     天猫	      八匹马	2673	 12	  4	    3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在上面的代码中，通过日期时间类型的 &lt;code&gt;Series&lt;/code&gt;  对象的 &lt;code&gt;dt&lt;/code&gt;  属性，获得一个访问日期时间的对象，通过该对象的 &lt;code&gt;year&lt;/code&gt; 、 &lt;code&gt;month&lt;/code&gt; 、 &lt;code&gt;quarter&lt;/code&gt; 、 &lt;code&gt;hour&lt;/code&gt;  等属性，就可以获取到年、月、季度、小时等时间信息，获取到的仍然是一个 &lt;code&gt;Series&lt;/code&gt;  对象，它包含了一组时间信息，所以我们通常也将这个 &lt;code&gt;dt&lt;/code&gt;  属性称为 “日期时间向量”。&lt;/p&gt;
&lt;p&gt;我们再来说一说字符串类型的数据的处理，我们先从指定的 Excel 文件中读取某招聘网站的招聘数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;jobs_df = pd.read_csv(
    &#39;某招聘网站招聘数据.csv&#39;,
    usecols=[&#39;city&#39;, &#39;companyFullName&#39;, &#39;positionName&#39;, &#39;salary&#39;]
)
jobs_df.info()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：如果需要上面例子中的 Excel 文件，可以通过下面的百度云盘地址进行获取，数据在《从零开始学数据分析》目录中。链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXJRdWpsNVJRbjlSN1BhZEIyWjVnX2clRUYlQkMlOEMlRTYlOEYlOTAlRTUlOEYlOTYlRTclQTAlODElRUYlQkMlOUFlN2I0JUUzJTgwJTgy&#34;&gt;https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g，提取码：e7b4。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
RangeIndex: 3140 entries, 0 to 3139
Data columns (total 4 columns):
 #   Column           Non-Null Count  Dtype 
---  ------           --------------  ----- 
 0   city             3140 non-null   object
 1   companyFullName  3140 non-null   object
 2   positionName     3140 non-null   object
 3   salary           3140 non-null   object
dtypes: object(4)
memory usage: 98.2+ KB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;查看前 &lt;code&gt;5&lt;/code&gt;  条数据。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;jobs_df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    city    companyFullName              positionName    salary
0   北京	  达疆网络科技（上海）有限公司    数据分析岗       15k-30k
1   北京	  北京音娱时光科技有限公司        数据分析        10k-18k
2   北京	  北京千喜鹤餐饮管理有限公司	     数据分析        20k-30k
3   北京	  吉林省海生电子商务有限公司	     数据分析        33k-50k
4   北京	  韦博网讯科技（北京）有限公司	数据分析        10k-15k
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的数据表一共有 &lt;code&gt;3140&lt;/code&gt;  条数据，但并非所有的职位都是 “数据分析” 的岗位，如果要筛选出数据分析的岗位，可以通过检查 &lt;code&gt;positionName&lt;/code&gt;  字段是否包含 “数据分析” 这个关键词，这里需要模糊匹配，应该如何实现呢？我们可以先获取 &lt;code&gt;positionName&lt;/code&gt;  列，因为这个 &lt;code&gt;Series&lt;/code&gt;  对象的 &lt;code&gt;dtype&lt;/code&gt;  是字符串，所以可以通过 &lt;code&gt;str&lt;/code&gt;  属性获取对应的字符串向量，然后就可以利用我们熟悉的字符串的方法来对其进行操作，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;jobs_df = jobs_df[jobs_df.positionName.str.contains(&#39;数据分析&#39;)]
jobs_df.shape
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(1515, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看出，筛选后的数据还有 &lt;code&gt;1515&lt;/code&gt;  条。接下来，我们还需要对 &lt;code&gt;salary&lt;/code&gt;  字段进行处理，如果我们希望统计所有岗位的平均工资或每个城市的平均工资，首先需要将用范围表示的工资处理成其中间值，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;jobs_df.salary.str.extract(r&#39;(\d+)[kK]?-(\d+)[kK]?&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码通过正则表达式捕获组从字符串中抽取出两组数字，分别对应工资的下限和上限，对正则表达式不熟悉的读者，可以阅读我的知乎专栏 “从零开始学 Python” 中的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8xNTg5Mjk3Njc=&#34;&gt;《正则表达式的应用》&lt;/span&gt;一文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        0     1
0	    15    30
1	    10	  18
2       20    30
3       33    50
4       10    15
...     ...   ...
3065    8     10
3069    6     10
3070    2     4
3071    6     12
3088    8     12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要提醒大家的是，抽取出来的两列数据都是字符串类型的值，我们需要将其转换成 &lt;code&gt;int&lt;/code&gt;  类型，才能计算平均值，对应的方法是 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;applymap&lt;/code&gt;  方法，该方法的参数是一个函数，而该函数会作用于 &lt;code&gt;DataFrame&lt;/code&gt;  中的每个元素。完成这一步之后，我们就可以使用 &lt;code&gt;apply&lt;/code&gt;  方法将上面的 &lt;code&gt;DataFrame&lt;/code&gt;  处理成中间值， &lt;code&gt;apply&lt;/code&gt;  方法的参数也是一个函数，可以通过指定 &lt;code&gt;axis&lt;/code&gt;  参数使其作用于 &lt;code&gt;DataFrame&lt;/code&gt;  对象的行或列，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;temp_df = jobs_df.salary.str.extract(r&#39;(\d+)[kK]?-(\d+)[kK]?&#39;).applymap(int)
temp_df.apply(np.mean, axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0       22.5
1       14.0
2       25.0
3       41.5
4       12.5
        ... 
3065    9.0
3069    8.0
3070    3.0
3071    9.0
3088    10.0
Length: 1515, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;接下来，我们可以用上面的结果替换掉原来的 &lt;code&gt;salary&lt;/code&gt;  列或者增加一个新的列来表示职位对应的工资，完整的代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;temp_df = jobs_df.salary.str.extract(r&#39;(\d+)[kK]?-(\d+)[kK]?&#39;).applymap(int)
jobs_df[&#39;salary&#39;] = temp_df.apply(np.mean, axis=1)
jobs_df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    city    companyFullName              positionName    salary
0   北京	  达疆网络科技（上海）有限公司    数据分析岗       22.5
1   北京	  北京音娱时光科技有限公司        数据分析        14.0
2   北京	  北京千喜鹤餐饮管理有限公司	     数据分析        25.0
3   北京	  吉林省海生电子商务有限公司	     数据分析        41.5
4   北京	  韦博网讯科技（北京）有限公司	数据分析        12.5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;applymap&lt;/code&gt;  和 &lt;code&gt;apply&lt;/code&gt;  两个方法在数据预处理的时候经常用到， &lt;code&gt;Series&lt;/code&gt;  对象也有 &lt;code&gt;apply&lt;/code&gt;  方法，也是用于数据的预处理，但是 &lt;code&gt;DataFrame&lt;/code&gt;  对象还有一个名为 &lt;code&gt;transform&lt;/code&gt;  的方法，也是通过传入的函数对数据进行变换，类似 &lt;code&gt;Series&lt;/code&gt;  对象的 &lt;code&gt;map&lt;/code&gt;  方法。需要强调的是， &lt;code&gt;apply&lt;/code&gt;  方法具有归约效果的，简单的说就是能将较多的数据处理成较少的数据或一条数据；而 &lt;code&gt;transform&lt;/code&gt;  方法没有归约效果，只能对数据进行变换，原来有多少条数据，处理后还是有多少条数据。&lt;/p&gt;
&lt;p&gt;如果要对数据进行深度的分析和挖掘，字符串、日期时间这样的非数值类型都需要处理成数值，因为非数值类型没有办法计算相关性，也没有办法进行&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;χ&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\chi^2&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.008548em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;χ&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999999em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 检验等操作。对于字符串类型，通常可以其分为以下三类，再进行对应的处理。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;有序变量（Ordinal Variable）：字符串表示的数据有顺序关系，那么可以对字符串进行序号化处理。&lt;/li&gt;
&lt;li&gt;分类变量（Categorical Variable）/ 名义变量（Nominal Variable）：字符串表示的数据没有大小关系和等级之分，那么就可以使用独热编码的方式处理成哑变量（虚拟变量）矩阵。&lt;/li&gt;
&lt;li&gt;定距变量（Scale Variable）：字符串本质上对应到一个有大小高低之分的数据，而且可以进行加减运算，那么只需要将字符串处理成对应的数值即可。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于第 1 类和第 3 类，我们可以用上面提到的 &lt;code&gt;apply&lt;/code&gt;  或 &lt;code&gt;transform&lt;/code&gt;  方法来处理，也可以利用 &lt;code&gt;scikit-learn&lt;/code&gt;  中的 &lt;code&gt;OrdinalEncoder&lt;/code&gt;  处理第 1 类字符串，这个我们在后续的课程中会讲到。对于第 2 类字符串，可以使用 &lt;code&gt;pandas&lt;/code&gt;  的 &lt;code&gt;get_dummies()&lt;/code&gt;  函数来生成哑变量（虚拟变量）矩阵，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;persons_df = pd.DataFrame(
    data=&amp;#123;
        &#39;姓名&#39;: [&#39;关羽&#39;, &#39;张飞&#39;, &#39;赵云&#39;, &#39;马超&#39;, &#39;黄忠&#39;],
        &#39;职业&#39;: [&#39;医生&#39;, &#39;医生&#39;, &#39;程序员&#39;, &#39;画家&#39;, &#39;教师&#39;],
        &#39;学历&#39;: [&#39;研究生&#39;, &#39;大专&#39;, &#39;研究生&#39;, &#39;高中&#39;, &#39;本科&#39;]
    &amp;#125;
)
persons_df
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;	姓名	职业	学历
0	关羽	医生	研究生
1	张飞	医生	大专
2	赵云	程序员	研究生
3	马超	画家	高中
4	黄忠	教师	本科
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将职业处理成哑变量矩阵。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pd.get_dummies(persons_df[&#39;职业&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    医生 教师  画家  程序员
0	1    0    0    0
1	1    0    0    0
2	0    0    0    1
3	0    0    1    0
4	0    1    0    0
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;将学历处理成大小不同的值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;def handle_education(x):
    edu_dict = &amp;#123;&#39;高中&#39;: 1, &#39;大专&#39;: 3, &#39;本科&#39;: 5, &#39;研究生&#39;: 10&amp;#125;
    return edu_dict.get(x, 0)


persons_df[&#39;学历&#39;].apply(handle_education)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0    10
1     3
2    10
3     1
4     5
Name: 学历, dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们再来说说数据离散化。离散化也叫分箱，如果变量的取值是连续值，那么它的取值有无数种可能，在进行数据分组的时候就会非常的不方便，这个时候将连续变量离散化就显得非常重要。之所以把离散化叫做分箱，是因为我们可以预先设置一些箱子，每个箱子代表了数据取值的范围，这样就可以将连续的值分配到不同的箱子中，从而实现离散化。下面的例子读取了 2018 年北京积分落户数据，我们可以根据落户积分对数据进行分组，具体的做法如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;luohu_df = pd.read_csv(&#39;data/2018年北京积分落户数据.csv&#39;, index_col=&#39;id&#39;)
luohu_df.score.describe()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;count    6019.000000
mean       95.654552
std         4.354445
min        90.750000
25%        92.330000
50%        94.460000
75%        97.750000
max       122.590000
Name: score, dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看出，落户积分的最大值是 &lt;code&gt;122.59&lt;/code&gt; ，最小值是 &lt;code&gt;90.75&lt;/code&gt; ，那么我们可以构造一个从 &lt;code&gt;90&lt;/code&gt;  分到 &lt;code&gt;125&lt;/code&gt;  分，每 &lt;code&gt;5&lt;/code&gt;  分一组的 &lt;code&gt;7&lt;/code&gt;  个箱子， &lt;code&gt;pandas&lt;/code&gt;  的 &lt;code&gt;cut&lt;/code&gt;  函数可以帮助我们首先数据分箱，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;bins = np.arange(90, 126, 5)
pd.cut(luohu_df.score, bins, right=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;： &lt;code&gt;cut&lt;/code&gt;  函数的 &lt;code&gt;right&lt;/code&gt;  参数默认值为 &lt;code&gt;True&lt;/code&gt; ，表示箱子左开右闭；修改为 &lt;code&gt;False&lt;/code&gt;  可以让箱子的右边界为开区间，左边界为闭区间，大家看看下面的输出就明白了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;id
1       [120, 125)
2       [120, 125)
3       [115, 120)
4       [115, 120)
5       [115, 120)
           ...    
6015      [90, 95)
6016      [90, 95)
6017      [90, 95)
6018      [90, 95)
6019      [90, 95)
Name: score, Length: 6019, dtype: category
Categories (7, interval[int64, left]): [[90, 95) &amp;lt; [95, 100) &amp;lt; [100, 105) &amp;lt; [105, 110) &amp;lt; [110, 115) &amp;lt; [115, 120) &amp;lt; [120, 125)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以根据分箱的结果对数据进行分组，然后使用聚合函数对每个组进行统计，这是数据分析中经常用到的操作，下一个章节会为大家介绍。除此之外， &lt;code&gt;pandas&lt;/code&gt;  还提供了一个名为 &lt;code&gt;qcut&lt;/code&gt;  的函数，可以指定分位数对数据进行分箱，有兴趣的读者可以自行研究。&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/71.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-2/</guid>
            <title>Pandas的应用-2</title>
            <link>https://scottalive.github.io/computer-science/python/basic/71.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-2/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 08:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;pandas的应用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pandas的应用-2&#34;&gt;#&lt;/a&gt; Pandas 的应用 - 2&lt;/h2&gt;
&lt;h3 id=&#34;dataframe的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#dataframe的应用&#34;&gt;#&lt;/a&gt; DataFrame 的应用&lt;/h3&gt;
&lt;h4 id=&#34;创建dataframe对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建dataframe对象&#34;&gt;#&lt;/a&gt; 创建 DataFrame 对象&lt;/h4&gt;
&lt;h5 id=&#34;通过二维数组创建dataframe对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过二维数组创建dataframe对象&#34;&gt;#&lt;/a&gt; 通过二维数组创建 &lt;code&gt;DataFrame&lt;/code&gt;  对象&lt;/h5&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;scores = np.random.randint(60, 101, (5, 3))
courses = [&#39;语文&#39;, &#39;数学&#39;, &#39;英语&#39;]
ids = [1001, 1002, 1003, 1004, 1005]
df1 = pd.DataFrame(data=scores, columns=courses, index=ids)
df1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		语文	数学	英语
1001    69    80	79
1002    71	  60	100
1003    94    81	93
1004    88	  88	67
1005    82	  66    60
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;通过字典创建dataframe对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过字典创建dataframe对象&#34;&gt;#&lt;/a&gt; 通过字典创建 &lt;code&gt;DataFrame&lt;/code&gt;  对象&lt;/h5&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;scores = &amp;#123;
    &#39;语文&#39;: [62, 72, 93, 88, 93],
    &#39;数学&#39;: [95, 65, 86, 66, 87],
    &#39;英语&#39;: [66, 75, 82, 69, 82],
&amp;#125;
ids = [1001, 1002, 1003, 1004, 1005]
df2 = pd.DataFrame(data=scores, index=ids)
df2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		语文	数学	英语
1001    69    80	79
1002    71	  60	100
1003    94    81	93
1004    88	  88	67
1005    82	  66    60
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;读取-csv-文件创建dataframe对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读取-csv-文件创建dataframe对象&#34;&gt;#&lt;/a&gt; 读取 CSV 文件创建 &lt;code&gt;DataFrame&lt;/code&gt;  对象&lt;/h5&gt;
&lt;p&gt;可以通过 &lt;code&gt;pandas&lt;/code&gt;  模块的 &lt;code&gt;read_csv&lt;/code&gt;  函数来读取 CSV 文件， &lt;code&gt;read_csv&lt;/code&gt;  函数的参数非常多，下面接受几个比较重要的参数。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;sep&lt;/code&gt;  /  &lt;code&gt;delimiter&lt;/code&gt; ：分隔符，默认是 &lt;code&gt;,&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;header&lt;/code&gt; ：表头（列索引）的位置，默认值是 &lt;code&gt;infer&lt;/code&gt; ，用第一行的内容作为表头（列索引）。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;index_col&lt;/code&gt; ：用作行索引（标签）的列。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;usecols&lt;/code&gt; ：需要加载的列，可以使用序号或者列名。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;true_values&lt;/code&gt;  /  &lt;code&gt;false_values&lt;/code&gt; ：哪些值被视为布尔值 &lt;code&gt;True&lt;/code&gt;  /  &lt;code&gt;False&lt;/code&gt; 。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skiprows&lt;/code&gt; ：通过行号、索引或函数指定需要跳过的行。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;skipfooter&lt;/code&gt; ：要跳过的末尾行数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;nrows&lt;/code&gt; ：需要读取的行数。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;na_values&lt;/code&gt; ：哪些值被视为空值。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;df3 = pd.read_csv(&#39;2018年北京积分落户数据.csv&#39;, index_col=&#39;id&#39;)
df3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;     name   birthday    company       score
id				
1    杨x    1972-12    北京利德xxxx	  122.59
2    纪x    1974-12    北京航天xxxx	  121.25
3    王x    1974-05	  品牌联盟xxxx    118.96
4    杨x    1975-07	  中科专利xxxx    118.21
5    张x    1974-11	  北京阿里xxxx    117.79
...  ...    ...        ...            ...
6015 孙x    1978-08	  华为海洋xxxx	  90.75
6016 刘x    1976-11	  福斯流体xxxx    90.75
6017 周x    1977-10	  赢创德固xxxx    90.75
6018 赵x	   1979-07	  澳科利耳xxxx    90.75
6019 贺x	   1981-06	  北京宝洁xxxx    90.75
6019 rows × 4 columns
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：如果需要上面例子中的 CSV 文件，可以通过下面的百度云盘地址进行获取，数据在《从零开始学数据分析》目录中。链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXJRdWpsNVJRbjlSN1BhZEIyWjVnX2clRUYlQkMlOEMlRTYlOEYlOTAlRTUlOEYlOTYlRTclQTAlODElRUYlQkMlOUFlN2I0JUUzJTgwJTgy&#34;&gt;https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g，提取码：e7b4。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;读取excel文件创建dataframe对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#读取excel文件创建dataframe对象&#34;&gt;#&lt;/a&gt; 读取 Excel 文件创建 &lt;code&gt;DataFrame&lt;/code&gt;  对象&lt;/h5&gt;
&lt;p&gt;可以通过 &lt;code&gt;pandas&lt;/code&gt;  模块的 &lt;code&gt;read_excel&lt;/code&gt;  函数来读取 Exce l 文件，该函数与上面的 &lt;code&gt;read_csv&lt;/code&gt;  非常相近，多了一个 &lt;code&gt;sheet_name&lt;/code&gt;  参数来指定数据表的名称，但是不同于 CSV 文件，没有 &lt;code&gt;sep&lt;/code&gt;  或 &lt;code&gt;delimiter&lt;/code&gt;  这样的参数。下面的代码中， &lt;code&gt;read_excel&lt;/code&gt;  函数的 &lt;code&gt;skiprows&lt;/code&gt;  参数是一个 Lambda 函数，通过该 Lambda 函数指定只读取 Excel 文件的表头和其中 10% 的数据，跳过其他的数据。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import random

df4 = pd.read_excel(
    io=&#39;小宝剑大药房2018年销售数据.xlsx&#39;,
    usecols=[&#39;购药时间&#39;, &#39;社保卡号&#39;, &#39;商品名称&#39;, &#39;销售数量&#39;, &#39;应收金额&#39;, &#39;实收金额&#39;],
    skiprows=lambda x: x &amp;gt; 0 and random.random() &amp;gt; 0.1
)
df4
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：如果需要上面例子中的 Excel 文件，可以通过下面的百度云盘地址进行获取，数据在《从零开始学数据分析》目录中。链接：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW4uYmFpZHUuY29tL3MvMXJRdWpsNVJRbjlSN1BhZEIyWjVnX2clRUYlQkMlOEMlRTYlOEYlOTAlRTUlOEYlOTYlRTclQTAlODElRUYlQkMlOUFlN2I0JUUzJTgwJTgy&#34;&gt;https://pan.baidu.com/s/1rQujl5RQn9R7PadB2Z5g_g，提取码：e7b4。&lt;/span&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    购药时间			社保卡号	    商品名称    销售数量	应收金额	实收金额
0	2018-03-23 星期三	10012157328		强力xx片	 1			13.8		13.80
1	2018-07-12 星期二	108207828	    强力xx片	 1	        13.8		13.80
2	2018-01-17 星期日	13358228	    清热xx液	 1		    28.0		28.00
3	2018-07-11 星期一	10031402228		三九xx灵	 5			149.0		130.00
4	2018-01-20 星期三	10013340328		三九xx灵	 3			84.0		73.92
...	...					...				...		...			...			...
618	2018-03-05 星期六	10066059228		开博xx通	 2			56.0		49.28
619	2018-03-22 星期二	10035514928		开博xx通	 1			28.0		25.00
620	2018-04-15 星期五	1006668328	    开博xx通	 2			56.0		50.00
621	2018-04-24 星期日	10073294128		高特xx灵	 1			5.6			5.60
622	2018-04-24 星期日	10073294128		高特xx灵	 10			56.0		56.0
623 rows × 6 columns
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;通过sql从数据库读取数据创建dataframe对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通过sql从数据库读取数据创建dataframe对象&#34;&gt;#&lt;/a&gt; 通过 SQL 从数据库读取数据创建 &lt;code&gt;DataFrame&lt;/code&gt;  对象&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;pandas&lt;/code&gt;  模块的 &lt;code&gt;read_sql&lt;/code&gt;  函数可以通过 SQL 语句从数据库中读取数据创建 &lt;code&gt;DataFrame&lt;/code&gt;  对象，该函数的第二个参数代表了需要连接的数据库。对于 MySQL 数据库，我们可以通过 &lt;code&gt;pymysql&lt;/code&gt;  或 &lt;code&gt;mysqlclient&lt;/code&gt;  来创建数据库连接，得到一个 &lt;code&gt;Connection&lt;/code&gt;  对象，而这个对象就是 &lt;code&gt;read_sql&lt;/code&gt;  函数需要的第二个参数，代码如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import pymysql

# 创建一个MySQL数据库的连接对象
conn = pymysql.connect(
    host=&#39;47.104.31.138&#39;, port=3306,
    user=&#39;guest&#39;, password=&#39;Guest.618&#39;,
    database=&#39;hrs&#39;, charset=&#39;utf8mb4&#39;
)
# 通过SQL从数据库读取数据创建DataFrame
df5 = pd.read_sql(&#39;select * from tb_emp&#39;, conn, index_col=&#39;eno&#39;)
df5
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：执行上面的代码需要先安装 &lt;code&gt;pymysql&lt;/code&gt;  库，如果尚未安装，可以先在 Notebook 的单元格中先执行 &lt;code&gt;!pip install pymysql&lt;/code&gt; ，然后再运行上面的代码。上面的代码连接的是我部署在阿里云上的 MySQL 数据库，公网 IP 地址： &lt;code&gt;47.104.31.138&lt;/code&gt; ，用户名： &lt;code&gt;guest&lt;/code&gt; ，密码： &lt;code&gt;Guest.618&lt;/code&gt; ，数据库： &lt;code&gt;hrs&lt;/code&gt; ，表名： &lt;code&gt;tb_emp&lt;/code&gt; ，字符集： &lt;code&gt;utf8mb4&lt;/code&gt; ，大家可以使用这个数据库，但是不要进行恶意的访问。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job     mgr      sal    comm    dno
eno						
1359	胡一刀   销售员	3344.0   1800   200.0   30
2056	乔峰	   分析师	 7800.0   5000   1500.0	 20
3088	李莫愁	  设计师	2056.0   3500   800.0   20
3211	张无忌	  程序员	2056.0   3200   NaN     20
3233	丘处机	  程序员	2056.0   3400	NaN     20
3244	欧阳锋	  程序员	3088.0   3200	NaN     20
3251	张翠山	  程序员	2056.0   4000	NaN     20
3344	黄蓉	   销售主管	7800.0   3000	800.0   30
3577	杨过	   会计	  5566.0   2200   NaN	  10
3588	朱九真	  会计	 5566.0   2500   NaN	 10
4466	苗人凤	  销售员	3344.0   2500	NaN     30
5234	郭靖	   出纳	  5566.0   2000   NaN	  10
5566	宋远桥	  会计师	7800.0   4000   1000.0  10
7800	张三丰	  总裁	 NaN      9000   1200.0  20
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;基本属性和方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本属性和方法&#34;&gt;#&lt;/a&gt; 基本属性和方法&lt;/h4&gt;
&lt;p&gt;在开始讲解 &lt;code&gt;DataFrame&lt;/code&gt;  的属性和方法前，我们先从之前提到的 &lt;code&gt;hrs&lt;/code&gt;  数据库中读取三张表的数据，创建出三个 &lt;code&gt;DataFrame&lt;/code&gt;  对象，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import pymysql

conn = pymysql.connect(
    host=&#39;47.104.31.138&#39;, port=3306, 
    user=&#39;guest&#39;, password=&#39;Guest.618&#39;, 
    database=&#39;hrs&#39;, charset=&#39;utf8mb4&#39;
)
dept_df = pd.read_sql(&#39;select * from tb_dept&#39;, conn, index_col=&#39;dno&#39;)
emp_df = pd.read_sql(&#39;select * from tb_emp&#39;, conn, index_col=&#39;eno&#39;)
emp2_df = pd.read_sql(&#39;select * from tb_emp2&#39;, conn, index_col=&#39;eno&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;得到的三个 &lt;code&gt;DataFrame&lt;/code&gt;  对象如下所示。&lt;/p&gt;
&lt;p&gt;部门表（ &lt;code&gt;dept_df&lt;/code&gt; ），其中 &lt;code&gt;dno&lt;/code&gt;  是部门的编号， &lt;code&gt;dname&lt;/code&gt;  和 &lt;code&gt;dloc&lt;/code&gt;  分别是部门的名称和所在地。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    dname  dloc
dno
10	会计部	北京
20	研发部	成都
30	销售部	重庆
40	运维部	天津
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;员工表（ &lt;code&gt;emp_df&lt;/code&gt; ），其中 &lt;code&gt;eno&lt;/code&gt;  是员工编号， &lt;code&gt;ename&lt;/code&gt; 、 &lt;code&gt;job&lt;/code&gt; 、 &lt;code&gt;mgr&lt;/code&gt; 、 &lt;code&gt;sal&lt;/code&gt; 、 &lt;code&gt;comm&lt;/code&gt;  和 &lt;code&gt;dno&lt;/code&gt;  分别代表员工的姓名、职位、主管编号、月薪、补贴和部门编号。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job        mgr      sal     comm    dno
eno
1359	胡一刀    销售员	   3344.0	1800	200.0	30
2056	乔峰	    分析师	    7800.0	 5000	 1500.0	 20
3088	李莫愁	   设计师	   2056.0	3500	800.0	20
3211	张无忌	   程序员	   2056.0	3200	NaN     20
3233	丘处机	   程序员	   2056.0	3400	NaN	    20
3244	欧阳锋	   程序员	   3088.0	3200	NaN     20
3251	张翠山	   程序员	   2056.0	4000	NaN	    20
3344	黄蓉	    销售主管   7800.0	3000	800.0	30
3577	杨过	    会计	     5566.0	  2200	  NaN	  10
3588	朱九真	   会计	    5566.0	 2500	 NaN	 10
4466	苗人凤	   销售员	   3344.0	2500	NaN	    30
5234	郭靖	    出纳	     5566.0	  2000	  NaN	  10
5566	宋远桥	   会计师	   7800.0	4000	1000.0	10
7800	张三丰	   总裁	    NaN      9000	 1200.0	 20
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：在数据库中 &lt;code&gt;mgr&lt;/code&gt;  和 &lt;code&gt;comm&lt;/code&gt;  两个列的数据类型是 &lt;code&gt;int&lt;/code&gt; ，但是因为有缺失值（空值），读取到 &lt;code&gt;DataFrame&lt;/code&gt;  之后，列的数据类型变成了 &lt;code&gt;float&lt;/code&gt; ，因为我们通常会用 &lt;code&gt;float&lt;/code&gt;  类型的 &lt;code&gt;NaN&lt;/code&gt;  来表示空值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;员工表（ &lt;code&gt;emp2_df&lt;/code&gt; ），跟上面的员工表结构相同，但是保存了不同的员工数据。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job    mgr     sal      comm    dno
eno
9800	骆昊	   架构师	7800	30000	 5000	 20
9900	王小刀	  程序员  9800	   10000	1200	20
9700	王大锤	  程序员  9800    8000 	600	    20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象的属性如下表所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;at&lt;/code&gt;  /  &lt;code&gt;iat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通过标签获取 &lt;code&gt;DataFrame&lt;/code&gt;  中的单个值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;columns&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象列的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dtypes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象每一列的数据类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;empty&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象是否为空&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;loc&lt;/code&gt;  /  &lt;code&gt;iloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通过标签获取 &lt;code&gt;DataFrame&lt;/code&gt;  中的一组值。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ndim&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象的维度&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;shape&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象的形状（行数和列数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象中元素的个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;values&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;&lt;code&gt;DataFrame&lt;/code&gt;  对象的数据对应的二维数组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;关于 &lt;code&gt;DataFrame&lt;/code&gt;  的方法，首先需要了解的是 &lt;code&gt;info()&lt;/code&gt;  方法，它可以帮助我们了解 &lt;code&gt;DataFrame&lt;/code&gt;  的相关信息，如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.info()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;class &#39;pandas.core.frame.DataFrame&#39;&amp;gt;
Int64Index: 14 entries, 1359 to 7800
Data columns (total 6 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   ename   14 non-null     object 
 1   job     14 non-null     object 
 2   mgr     13 non-null     float64
 3   sal     14 non-null     int64  
 4   comm    6 non-null      float64
 5   dno     14 non-null     int64  
dtypes: float64(2), int64(2), object(2)
memory usage: 1.3+ KB
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果需要查看 &lt;code&gt;DataFrame&lt;/code&gt;  的头部或尾部的数据，可以使用 &lt;code&gt;head()&lt;/code&gt;  或 &lt;code&gt;tail()&lt;/code&gt;  方法，这两个方法的默认参数是 &lt;code&gt;5&lt;/code&gt; ，表示获取 &lt;code&gt;DataFrame&lt;/code&gt;  最前面 5 行或最后面 5 行的数据，如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.head()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job    mgr    sal    comm  dno
eno						
1359	胡一刀   销售员	3344   1800  200   30
2056	乔峰	   分析师	 7800   5000  1500	20
3088	李莫愁	  设计师	2056   3500  800   20
3211	张无忌	  程序员	2056   3200  NaN   20
3233	丘处机	  程序员	2056   3400	 NaN   20
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;获取数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#获取数据&#34;&gt;#&lt;/a&gt; 获取数据&lt;/h4&gt;
&lt;h5 id=&#34;索引和切片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引和切片&#34;&gt;#&lt;/a&gt; 索引和切片&lt;/h5&gt;
&lt;p&gt;如果要获取 &lt;code&gt;DataFrame&lt;/code&gt;  的某一列，例如取出上面 &lt;code&gt;emp_df&lt;/code&gt;  的 &lt;code&gt;ename&lt;/code&gt;  列，可以使用下面的两种方式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.ename
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df[&#39;ename&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行上面的代码可以发现，我们获得的是一个 &lt;code&gt;Series&lt;/code&gt;  对象。事实上， &lt;code&gt;DataFrame&lt;/code&gt;  对象就是将多个 &lt;code&gt;Series&lt;/code&gt;  对象组合到一起的结果。&lt;/p&gt;
&lt;p&gt;如果要获取 &lt;code&gt;DataFrame&lt;/code&gt;  的某一行，可以使用整数索引或我们设置的索引，例如取出员工编号为 &lt;code&gt;2056&lt;/code&gt;  的员工数据，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.iloc[1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.loc[2056]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过执行上面的代码我们发现，单独取 &lt;code&gt;DataFrame&lt;/code&gt;  的某一行或某一列得到的都是 &lt;code&gt;Series&lt;/code&gt;  对象。我们当然也可以通过花式索引来获取多个行或多个列的数据，花式索引的结果仍然是一个 &lt;code&gt;DataFrame&lt;/code&gt;  对象。&lt;/p&gt;
&lt;p&gt;获取多个列：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df[[&#39;ename&#39;, &#39;job&#39;]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;获取多个行：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.loc[[2056, 7800, 3344]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要获取或修改 &lt;code&gt;DataFrame&lt;/code&gt;  对象某个单元格的数据，需要同时指定行和列的索引，例如要获取员工编号为 &lt;code&gt;2056&lt;/code&gt;  的员工的职位信息，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df[&#39;job&#39;][2056]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.loc[2056][&#39;job&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.loc[2056, &#39;job&#39;]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们推荐大家使用第三种做法，因为它只做了一次索引运算。如果要将该员工的职位修改为 “架构师”，可以使用下面的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.loc[2056, &#39;job&#39;] = &#39;架构师&#39;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然，我们也可以通过切片操作来获取多行多列，相信大家一定已经想到了这一点。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.loc[2056:3344]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job        mgr      sal     comm    dno
eno
2056	乔峰	    分析师	    7800.0	 5000	 1500.0	 20
3088	李莫愁	   设计师	   2056.0	3500	800.0	20
3211	张无忌	   程序员	   2056.0	3200	NaN     20
3233	丘处机	   程序员	   2056.0	3400	NaN	    20
3244	欧阳锋	   程序员	   3088.0	3200	NaN     20
3251	张翠山	   程序员	   2056.0	4000	NaN	    20
3344	黄蓉	    销售主管   7800.0	3000	800.0	30
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;数据筛选&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据筛选&#34;&gt;#&lt;/a&gt; 数据筛选&lt;/h5&gt;
&lt;p&gt;上面我们提到了花式索引，相信大家已经联想到了布尔索引。跟 &lt;code&gt;ndarray&lt;/code&gt;  和 &lt;code&gt;Series&lt;/code&gt;  一样，我们可以通过布尔索引对 &lt;code&gt;DataFrame&lt;/code&gt;  对象进行数据筛选，例如我们要从 &lt;code&gt;emp_df&lt;/code&gt;  中筛选出月薪超过 &lt;code&gt;3500&lt;/code&gt;  的员工，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df[emp_df.sal &amp;gt; 3500]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job        mgr      sal     comm    dno
eno
2056	乔峰	    分析师	    7800.0	 5000	 1500.0	 20
3251	张翠山	   程序员	   2056.0	4000	NaN	    20
5566	宋远桥	   会计师	   7800.0	4000	1000.0	10
7800	张三丰	   总裁	    NaN      9000	 1200.0	 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;当然，我们也可以组合多个条件来进行数据筛选，例如从 &lt;code&gt;emp_df&lt;/code&gt;  中筛选出月薪超过 &lt;code&gt;3500&lt;/code&gt;  且部门编号为 &lt;code&gt;20&lt;/code&gt;  的员工，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df[(emp_df.sal &amp;gt; 3500) &amp;amp; (emp_df.dno == 20)]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job        mgr      sal     comm    dno
eno
2056	乔峰	    分析师	    7800.0	 5000	 1500.0	 20
3251	张翠山	   程序员	   2056.0	4000	NaN	    20
7800	张三丰	   总裁	    NaN      9000	 1200.0	 20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了使用布尔索引， &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;query&lt;/code&gt;  方法也可以实现数据筛选， &lt;code&gt;query&lt;/code&gt;  方法的参数是一个字符串，它代表了筛选数据使用的表达式，而且更符合 Python 程序员的使用习惯。下面我们使用 &lt;code&gt;query&lt;/code&gt;  方法将上面的效果重新实现一遍，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;emp_df.query(&#39;sal &amp;gt; 3500 and dno == 20&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;重塑数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#重塑数据&#34;&gt;#&lt;/a&gt; 重塑数据&lt;/h4&gt;
&lt;p&gt;有的时候，我们做数据分析需要的原始数据可能并不是来自一个地方，就像上面的例子中，我们从关系型数据库中读取了三张表，得到了三个 &lt;code&gt;DataFrame&lt;/code&gt;  对象，但实际工作可能需要我们把他们的数据整合到一起。例如： &lt;code&gt;emp_df&lt;/code&gt;  和 &lt;code&gt;emp2_df&lt;/code&gt;  其实都是员工的数据，而且数据结构完全一致，我们可以使用 &lt;code&gt;pandas&lt;/code&gt;  提供的 &lt;code&gt;concat&lt;/code&gt;  函数实现两个或多个 &lt;code&gt;DataFrame&lt;/code&gt;  的数据拼接，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;all_emp_df = pd.concat([emp_df, emp2_df])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;        ename    job        mgr      sal     comm    dno
eno
1359    胡一刀    销售员	   3344.0	1800	200.0	30
2056    乔峰	    分析师	    7800.0	 5000	 1500.0	 20
3088    李莫愁	   设计师	   2056.0	3500	800.0	20
3211    张无忌	   程序员	   2056.0	3200	NaN     20
3233    丘处机	   程序员	   2056.0	3400	NaN	    20
3244    欧阳锋	   程序员	   3088.0	3200	NaN     20
3251    张翠山	   程序员	   2056.0	4000	NaN	    20
3344    黄蓉	    销售主管   7800.0	3000	800.0	30
3577    杨过	    会计	     5566.0	  2200	  NaN	  10
3588    朱九真	   会计	    5566.0	 2500	 NaN	 10
4466    苗人凤	   销售员	   3344.0	2500	NaN	    30
5234    郭靖	    出纳	     5566.0	  2000	  NaN	  10
5566    宋远桥	   会计师	   7800.0	4000	1000.0	10
7800    张三丰	   总裁	    NaN      9000	 1200.0	 20
9800    骆昊	    架构师     7800.0	 30000	 5000.0	 20
9900    王小刀	   程序员     9800.0	10000	1200.0	20
9700    王大锤	   程序员     9800.0	8000	600.0	20
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的代码将两个代表员工数据的 &lt;code&gt;DataFrame&lt;/code&gt;  拼接到了一起，接下来我们使用 &lt;code&gt;merge&lt;/code&gt;  函数将员工表和部门表的数据合并到一张表中，代码如下所示。&lt;/p&gt;
&lt;p&gt;先使用 &lt;code&gt;reset_index&lt;/code&gt;  方法重新设置 &lt;code&gt;all_emp_df&lt;/code&gt;  的索引，这样 &lt;code&gt;eno&lt;/code&gt;  不再是索引而是一个普通列， &lt;code&gt;reset_index&lt;/code&gt;  方法的 &lt;code&gt;inplace&lt;/code&gt;  参数设置为 &lt;code&gt;True&lt;/code&gt;  表示，重置索引的操作直接在 &lt;code&gt;all_emp_df&lt;/code&gt;  上执行，而不是返回修改后的新对象。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;all_emp_df.reset_index(inplace=True)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过 &lt;code&gt;merge&lt;/code&gt;  函数合并数据，当然，也可以调用 &lt;code&gt;DataFrame&lt;/code&gt;  对象的 &lt;code&gt;merge&lt;/code&gt;  方法来达到同样的效果。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pd.merge(dept_df, all_emp_df, how=&#39;inner&#39;, on=&#39;dno&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;    dno dname  dloc eno   ename  job      mgr     sal    comm
0   10	会计部	北京	3577  杨过	会计	   5566.0  2200   NaN
1   10	会计部	北京	3588  朱九真  会计     5566.0  2500   NaN
2   10	会计部	北京	5234  郭靖	出纳	   5566.0  2000   NaN
3   10	会计部	北京	5566  宋远桥  会计师   7800.0	 4000   1000.0
4   20	研发部	成都	2056  乔峰	架构师   7800.0  5000	 1500.0
5   20	研发部	成都	3088  李莫愁  设计师   2056.0	 3500   800.0
6   20	研发部	成都	3211  张无忌  程序员   2056.0	 3200   NaN
7   20	研发部	成都	3233  丘处机  程序员   2056.0	 3400   NaN
8   20	研发部	成都	3244  欧阳锋  程序员   3088.0	 3200   NaN
9   20	研发部	成都	3251  张翠山  程序员   2056.0	 4000   NaN
10  20	研发部	成都	7800  张三丰  总裁     NaN     9000   1200.0
11  20	研发部	成都	9800  骆昊    架构师   7800.0  30000	 5000.0
12  20	研发部	成都	9900  王小刀  程序员	 9800.0	 10000  1200.0
13  20	研发部	成都	9700  王大锤  程序员	 9800.0	 8000   600.0
14  30	销售部	重庆	1359  胡一刀  销售员	 3344.0	 1800   200.0
15  30	销售部	重庆	3344  黄蓉    销售主管 7800.0	 3000   800.0
16  30	销售部	重庆	4466  苗人凤  销售员   3344.0	 2500   NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;merge&lt;/code&gt;  函数的一个参数代表合并的左表、第二个参数代表合并的右表，有 SQL 编程经验的同学对这两个词是不是感觉到非常亲切。正如大家猜想的那样， &lt;code&gt;DataFrame&lt;/code&gt;  对象的合并跟数据库中的表连接非常类似，所以上面代码中的 &lt;code&gt;how&lt;/code&gt;  代表了合并两张表的方式，有 &lt;code&gt;left&lt;/code&gt; 、 &lt;code&gt;right&lt;/code&gt; 、 &lt;code&gt;inner&lt;/code&gt; 、 &lt;code&gt;outer&lt;/code&gt;  四个选项；而 &lt;code&gt;on&lt;/code&gt;  则代表了基于哪个列实现表的合并，相当于 SQL 表连接中的连表条件，如果左右两表对应的列列名不同，可以用 &lt;code&gt;left_on&lt;/code&gt;  和 &lt;code&gt;right_on&lt;/code&gt;  参数取代 &lt;code&gt;on&lt;/code&gt;  参数分别进行指定。&lt;/p&gt;
&lt;p&gt;如果对上面的代码稍作修改，将 &lt;code&gt;how&lt;/code&gt;  参数修改为 &lt;code&gt;left&lt;/code&gt; ，大家可以思考一下代码执行的结果。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pd.merge(dept_df, all_emp_df, how=&#39;left&#39;, on=&#39;dno&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行结果比之前的输出多出了如下所示的一行，这是因为 &lt;code&gt;left&lt;/code&gt;  代表左外连接，也就意味着左表 &lt;code&gt;dept_df&lt;/code&gt;  中的数据会被完整的查出来，但是在 &lt;code&gt;all_emp_df&lt;/code&gt;  中又没有编号为 &lt;code&gt;40&lt;/code&gt;  部门的员工，所以对应的位置都被填入了空值。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;17  40  运维部  天津  NaN  NaN  NaN  NaN  NaN  NaN
&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/70.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-1/</guid>
            <title>Pandas的应用-1</title>
            <link>https://scottalive.github.io/computer-science/python/basic/70.Pandas%E7%9A%84%E5%BA%94%E7%94%A8-1/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 07:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;pandas的应用-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#pandas的应用-1&#34;&gt;#&lt;/a&gt; Pandas 的应用 - 1&lt;/h2&gt;
&lt;p&gt;Pandas 是 Wes McKinney 在 2008 年开发的一个强大的&lt;strong&gt;分析结构化数据&lt;/strong&gt;的工具集。Pandas 以 NumPy 为基础（数据表示和运算），提供了用于数据处理的函数和方法，对数据分析和数据挖掘提供了很好的支持；同时 Pandas 还可以跟数据可视化工具 Matplotlib 很好的整合在一起，非常轻松愉快的实现数据的可视化展示。&lt;/p&gt;
&lt;p&gt;Pandas 核心的数据类型是 &lt;code&gt;Series&lt;/code&gt; （数据系列）、 &lt;code&gt;DataFrame&lt;/code&gt; （数据表 / 数据框），分别用于处理一维和二维的数据，除此之外还有一个名为 &lt;code&gt;Index&lt;/code&gt;  的类型及其子类型，它为 &lt;code&gt;Series&lt;/code&gt;  和 &lt;code&gt;DataFrame&lt;/code&gt;  提供了索引功能。日常工作中以 &lt;code&gt;DataFrame&lt;/code&gt;  使用最为广泛，因为二维的数据本质就是一个有行有列的表格（想一想 Excel 电子表格和关系型数据库中的二维表）。上述这些类型都提供了大量的处理数据的方法，数据分析师可以以此为基础实现对数据的各种常规处理。&lt;/p&gt;
&lt;h3 id=&#34;series的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#series的应用&#34;&gt;#&lt;/a&gt; Series 的应用&lt;/h3&gt;
&lt;p&gt;Pandas 库中的 &lt;code&gt;Series&lt;/code&gt;  对象可以用来表示一维数据结构，跟数组非常类似，但是多了一些额外的功能。 &lt;code&gt;Series&lt;/code&gt;  的内部结构包含了两个数组，其中一个用来保存数据，另一个用来保存数据的索引。&lt;/p&gt;
&lt;h4 id=&#34;创建series对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建series对象&#34;&gt;#&lt;/a&gt; 创建 Series 对象&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：在执行下面的代码之前，请先导入 &lt;code&gt;pandas&lt;/code&gt;  以及相关的库文件，具体的做法可以参考上一章。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;方法1通过列表或数组创建series对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法1通过列表或数组创建series对象&#34;&gt;#&lt;/a&gt; 方法 1：通过列表或数组创建 Series 对象&lt;/h5&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# data参数表示数据，index参数表示数据的索引（标签）
# 如果没有指定index属性，默认使用数字索引
ser1 = pd.Series(data=[320, 180, 300, 405], index=[&#39;一季度&#39;, &#39;二季度&#39;, &#39;三季度&#39;, &#39;四季度&#39;])
ser1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一季度    320
二季度    180
三季度    300
四季度    405
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;方法2通过字典创建series对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#方法2通过字典创建series对象&#34;&gt;#&lt;/a&gt; 方法 2：通过字典创建 Series 对象。&lt;/h5&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 字典中的键就是数据的索引（标签），字典中的值就是数据
ser2 = pd.Series(&amp;#123;&#39;一季度&#39;: 320, &#39;二季度&#39;: 180, &#39;三季度&#39;: 300, &#39;四季度&#39;: 405&amp;#125;)
ser2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一季度    320
二季度    180
三季度    300
四季度    405
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;索引和切片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#索引和切片&#34;&gt;#&lt;/a&gt; 索引和切片&lt;/h4&gt;
&lt;p&gt;跟数组一样，Series 对象也可以进行索引和切片操作，不同的是 Series 对象因为内部维护了一个保存索引的数组，所以除了可以使用整数索引通过位置检索数据外，还可以通过自己设置的索引标签获取对应的数据。&lt;/p&gt;
&lt;h5 id=&#34;使用整数索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用整数索引&#34;&gt;#&lt;/a&gt; 使用整数索引&lt;/h5&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(ser2[0], ser[1], ser[2], ser[3])
ser2[0], ser2[3] = 350, 360
print(ser2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;320 180 300 405
一季度    350
二季度    180
三季度    300
四季度    360
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：如果要使用负向索引，必须在创建 &lt;code&gt;Series&lt;/code&gt;  对象时通过 &lt;code&gt;index&lt;/code&gt;  属性指定非数值类型的标签。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;使用自定义的标签索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用自定义的标签索引&#34;&gt;#&lt;/a&gt; 使用自定义的标签索引&lt;/h5&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(ser2[&#39;一季度&#39;], ser2[&#39;三季度&#39;])
ser2[&#39;一季度&#39;] = 380
print(ser2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;350 300
一季度    380
二季度    180
三季度    300
四季度    360
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;切片操作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#切片操作&#34;&gt;#&lt;/a&gt; 切片操作&lt;/h5&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(ser2[1:3])
print(ser2[&#39;二季度&#39;:&#39;四季度&#39;])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;二季度    180
三季度    300
dtype: int64
二季度    500
三季度    500
四季度    520
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser2[1:3] = 400, 500
ser2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;一季度    380
二季度    400
三季度    500
四季度    360
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;花式索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#花式索引&#34;&gt;#&lt;/a&gt; 花式索引&lt;/h5&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(ser2[[&#39;二季度&#39;, &#39;四季度&#39;]])
ser2[[&#39;二季度&#39;, &#39;四季度&#39;]] = 500, 520
print(ser2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;二季度    400
四季度    360
dtype: int64
一季度    380
二季度    500
三季度    500
四季度    520
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;布尔索引&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#布尔索引&#34;&gt;#&lt;/a&gt; 布尔索引&lt;/h5&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser2[ser2 &amp;gt;= 500]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;二季度    500
三季度    500
四季度    520
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;#### 属性和方法&lt;/p&gt;
&lt;p&gt;Series 对象的常用属性如下表所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dtype&lt;/code&gt;  /  &lt;code&gt;dtypes&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回 &lt;code&gt;Series&lt;/code&gt;  对象的数据类型&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;hasnans&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断 &lt;code&gt;Series&lt;/code&gt;  对象中有没有空值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;at&lt;/code&gt;  /  &lt;code&gt;iat&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通过索引访问 &lt;code&gt;Series&lt;/code&gt;  对象中的单个值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;loc&lt;/code&gt;  /  &lt;code&gt;iloc&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通过一组索引访问 &lt;code&gt;Series&lt;/code&gt;  对象中的一组值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;index&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回 &lt;code&gt;Series&lt;/code&gt;  对象的索引&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is_monotonic&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断 &lt;code&gt;Series&lt;/code&gt;  对象中的数据是否单调&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is_monotonic_increasing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断 &lt;code&gt;Series&lt;/code&gt;  对象中的数据是否单调递增&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is_monotonic_decreasing&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断 &lt;code&gt;Series&lt;/code&gt;  对象中的数据是否单调递减&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is_unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断 &lt;code&gt;Series&lt;/code&gt;  对象中的数据是否独一无二&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回 &lt;code&gt;Series&lt;/code&gt;  对象中元素的个数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;values&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以 &lt;code&gt;ndarray&lt;/code&gt;  的方式返回 &lt;code&gt;Series&lt;/code&gt;  对象中的值&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;  对象的方法很多，我们通过下面的代码为大家介绍一些常用的方法。&lt;/p&gt;
&lt;h5 id=&#34;统计相关的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统计相关的方法&#34;&gt;#&lt;/a&gt; 统计相关的方法&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;  对象支持各种获取描述性统计信息的方法。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 求和
print(ser2.sum())
# 求均值
print(ser2.mean())
# 求最大
print(ser2.max())
# 求最小
print(ser2.min())
# 计数
print(ser2.count())
# 求标准差
print(ser2.std())
# 求方差
print(ser2.var())
# 求中位数
print(ser2.median())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;  对象还有一个名为 &lt;code&gt;describe()&lt;/code&gt;  的方法，可以获得上述所有的描述性统计信息，如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser2.describe()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;count      4.000000
mean     475.000000
std       64.031242
min      380.000000
25%      470.000000
50%      500.000000
75%      505.000000
max      520.000000
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：因为 &lt;code&gt;describe()&lt;/code&gt;  返回的也是一个 &lt;code&gt;Series&lt;/code&gt;  对象，所以也可以用 &lt;code&gt;ser2.describe()[&#39;mean&#39;]&lt;/code&gt;  来获取平均值。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果 &lt;code&gt;Series&lt;/code&gt;  对象有重复的值，我们可以使用 &lt;code&gt;unique()&lt;/code&gt;  方法获得去重之后的 &lt;code&gt;Series&lt;/code&gt;  对象；可以使用 &lt;code&gt;nunique()&lt;/code&gt;  方法统计不重复值的数量；如果想要统计每个值重复的次数，可以使用 &lt;code&gt;value_counts()&lt;/code&gt;  方法，这个方法会返回一个 &lt;code&gt;Series&lt;/code&gt;  对象，它的索引就是原来的 &lt;code&gt;Series&lt;/code&gt;  对象中的值，而每个值出现的次数就是返回的 &lt;code&gt;Series&lt;/code&gt;  对象中的数据，在默认情况下会按照出现次数做降序排列。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser3 = pd.Series(data=[&#39;apple&#39;, &#39;banana&#39;, &#39;apple&#39;, &#39;pitaya&#39;, &#39;apple&#39;, &#39;pitaya&#39;, &#39;durian&#39;])
ser3.value_counts()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;apple     3
pitaya    2
durian    1
banana    1
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser3.nunique()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;4
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;数据处理的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据处理的方法&#34;&gt;#&lt;/a&gt; 数据处理的方法&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;  对象的 &lt;code&gt;isnull()&lt;/code&gt;  和 &lt;code&gt;notnull()&lt;/code&gt;  方法可以用于空值的判断，代码如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser4 = pd.Series(data=[10, 20, np.NaN, 30, np.NaN])
ser4.isnull()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0    False
1    False
2     True
3    False
4     True
dtype: bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser4.notnull()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0     True
1     True
2    False
3     True
4    False
dtype: bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;  对象的 &lt;code&gt;dropna()&lt;/code&gt;  和 &lt;code&gt;fillna()&lt;/code&gt;  方法分别用来删除空值和填充空值，具体的用法如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser4.dropna()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0    10.0
1    20.0
3    30.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 将空值填充为40
ser4.fillna(value=40)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0    10.0
1    20.0
2    40.0
3    30.0
4    40.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# backfill或bfill表示用后一个元素的值填充空值
# ffill或pad表示用前一个元素的值填充空值
ser4.fillna(method=&#39;ffill&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0    10.0
1    20.0
2    20.0
3    30.0
4    30.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;需要提醒大家注意的是， &lt;code&gt;dropna()&lt;/code&gt;  和 &lt;code&gt;fillna()&lt;/code&gt;  方法都有一个名为 &lt;code&gt;inplace&lt;/code&gt;  的参数，它的默认值是 &lt;code&gt;False&lt;/code&gt; ，表示删除空值或填充空值不会修改原来的 &lt;code&gt;Series&lt;/code&gt;  对象，而是返回一个新的 &lt;code&gt;Series&lt;/code&gt;  对象来表示删除或填充空值后的数据系列，如果将 &lt;code&gt;inplace&lt;/code&gt;  参数的值修改为 &lt;code&gt;True&lt;/code&gt; ，那么删除或填充空值会就地操作，直接修改原来的 &lt;code&gt;Series&lt;/code&gt;  对象，那么方法的返回值是 &lt;code&gt;None&lt;/code&gt; 。后面我们会接触到的很多方法，包括 &lt;code&gt;DataFrame&lt;/code&gt;  对象的很多方法都会有这个参数，它们的意义跟这里是一样的。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;  对象的 &lt;code&gt;mask()&lt;/code&gt;  和 &lt;code&gt;where()&lt;/code&gt;  方法可以将满足或不满足条件的值进行替换，如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser5 = pd.Series(range(5))
ser5.where(ser5 &amp;gt; 0)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0    NaN
1    1.0
2    2.0
3    3.0
4    4.0
dtype: float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser5.where(ser5 &amp;gt; 1, 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0    10
1    10
2     2
3     3
4     4
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser5.mask(ser5 &amp;gt; 1, 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0     0
1     1
2    10
3    10
4    10
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;  对象的 &lt;code&gt;duplicated()&lt;/code&gt;  方法可以帮助我们找出重复的数据，而 &lt;code&gt;drop_duplicates()&lt;/code&gt;  方法可以帮我们删除重复数据。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser3.duplicated()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0    False
1    False
2     True
3    False
4     True
5     True
6    False
dtype: bool
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser3.drop_duplicates()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0     apple
1    banana
3    pitaya
6    durian
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;  对象的 &lt;code&gt;apply()&lt;/code&gt;  和 &lt;code&gt;map()&lt;/code&gt;  方法非常重要，它们可以用于数据处理，把数据映射或转换成我们期望的样子，这个操作在数据分析的数据准备阶段非常重要。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser6 = pd.Series([&#39;cat&#39;, &#39;dog&#39;, np.nan, &#39;rabbit&#39;])
ser6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0       cat
1       dog
2       NaN
3    rabbit
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser6.map(&amp;#123;&#39;cat&#39;: &#39;kitten&#39;, &#39;dog&#39;: &#39;puppy&#39;&amp;#125;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0    kitten
1     puppy
2       NaN
3       NaN
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser6.map(&#39;I am a &amp;#123;&amp;#125;&#39;.format, na_action=&#39;ignore&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;0       I am a cat
1       I am a dog
2              NaN
3    I am a rabbit
dtype: object
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser7 = pd.Series([20, 21, 12],  index=[&#39;London&#39;, &#39;New York&#39;, &#39;Helsinki&#39;])
ser7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;London      20
New York    21
Helsinki    12
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser7.apply(np.square)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;London      400
New York    441
Helsinki    144
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser7.apply(lambda x, value: x - value, args=(5, ))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;London      15
New York    16
Helsinki     7
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h5 id=&#34;排序和取头部值的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#排序和取头部值的方法&#34;&gt;#&lt;/a&gt; 排序和取头部值的方法&lt;/h5&gt;
&lt;p&gt;&lt;code&gt;Series&lt;/code&gt;  对象的 &lt;code&gt;sort_index()&lt;/code&gt;  和 &lt;code&gt;sort_values()&lt;/code&gt;  方法可以用于对索引和数据的排序，排序方法有一个名为 &lt;code&gt;ascending&lt;/code&gt;  的布尔类型参数，该参数用于控制排序的结果是升序还是降序；而名为 &lt;code&gt;kind&lt;/code&gt;  的参数则用来控制排序使用的算法，默认使用了 &lt;code&gt;quicksort&lt;/code&gt; ，也可以选择 &lt;code&gt;mergesort&lt;/code&gt;  或 &lt;code&gt;heapsort&lt;/code&gt; ；如果存在空值，那么可以用 &lt;code&gt;na_position&lt;/code&gt;  参数空值放在最前还是最后，默认是 &lt;code&gt;last&lt;/code&gt; ，代码如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser8 = pd.Series(
    data=[35, 96, 12, 57, 25, 89], 
index=[&#39;grape&#39;, &#39;banana&#39;, &#39;pitaya&#39;, &#39;apple&#39;, &#39;peach&#39;, &#39;orange&#39;]
)
# 按值从小到大排序
ser8.sort_values()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pitaya    12
peach     25
grape     35
apple     57
orange    89
banana    96
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 按索引从大到小排序
ser8.sort_index(ascending=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pitaya    12
peach     25
orange    89
grape     35
banana    96
apple     57
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要从 &lt;code&gt;Series&lt;/code&gt;  对象中找出元素中最大或最小的 “Top-N”，实际上是不需要对所有的值进行排序的，可以使用 &lt;code&gt;nlargest()&lt;/code&gt;  和 &lt;code&gt;nsmallest()&lt;/code&gt;  方法来完成，如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 值最大的3个
ser8.nlargest(3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;banana    96
orange    89
apple     57
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 值最小的2个
ser8.nsmallest(2)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;pitaya    12
peach     25
dtype: int64
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;绘制图表&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#绘制图表&#34;&gt;#&lt;/a&gt; 绘制图表&lt;/h4&gt;
&lt;p&gt;Series 对象有一个名为 &lt;code&gt;plot&lt;/code&gt;  的方法可以用来生成图表，如果选择生成折线图、饼图、柱状图等，默认会使用 Series 对象的索引作为横坐标，使用 Series 对象的数据作为纵坐标。&lt;/p&gt;
&lt;p&gt;首先导入 &lt;code&gt;matplotlib&lt;/code&gt;  中 &lt;code&gt;pyplot&lt;/code&gt;  模块并进行必要的配置。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import matplotlib.pyplot as plt

# 配置支持中文的非衬线字体（默认的字体无法显示中文）
plt.rcParams[&#39;font.sans-serif&#39;] = [&#39;SimHei&#39;, ]
# 使用指定的中文字体时需要下面的配置来避免负号无法显示
plt.rcParams[&#39;axes.unicode_minus&#39;] = False
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;创建 &lt;code&gt;Series&lt;/code&gt;  对象并绘制对应的柱状图。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;ser9 = pd.Series(&amp;#123;&#39;一季度&#39;: 400, &#39;二季度&#39;: 520, &#39;三季度&#39;: 180, &#39;四季度&#39;: 380&amp;#125;)
# 通过Series对象的plot方法绘图（kind=&#39;bar&#39;表示绘制柱状图）
ser9.plot(kind=&#39;bar&#39;, color=[&#39;r&#39;, &#39;g&#39;, &#39;b&#39;, &#39;y&#39;])
# x轴的坐标旋转到0度（中文水平显示）
plt.xticks(rotation=0)
# 在柱状图的柱子上绘制数字
for i in range(4):
    plt.text(i, ser9[i] + 5, ser9[i], ha=&#39;center&#39;)
# 显示图像
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20220619171513.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;绘制反映每个季度占比的饼图。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# autopct参数可以配置在饼图上显示每块饼的占比
ser9.plot(kind=&#39;pie&#39;, autopct=&#39;%.1f%%&#39;)
# 设置y轴的标签（显示在饼图左侧的文字）
plt.ylabel(&#39;各季度占比&#39;)
plt.show()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20220619171503.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/69.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-2/</guid>
            <title>NumPy的应用-2</title>
            <link>https://scottalive.github.io/computer-science/python/basic/69.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-2/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 06:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;numpy的应用-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy的应用-2&#34;&gt;#&lt;/a&gt; NumPy 的应用 - 2&lt;/h2&gt;
&lt;h3 id=&#34;数组的运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组的运算&#34;&gt;#&lt;/a&gt; 数组的运算&lt;/h3&gt;
&lt;p&gt;使用 NumPy 最为方便的是当需要对数组元素进行运算时，不用编写循环代码遍历每个元素，所有的运算都会自动的&lt;strong&gt;矢量化&lt;/strong&gt;（使用高效的、提前编译的底层代码来对数据序列进行数学操作）。简单的说就是，NumPy 中的数学运算和数学函数会自动作用于数组中的每个成员。&lt;/p&gt;
&lt;h4 id=&#34;数组跟标量的运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组跟标量的运算&#34;&gt;#&lt;/a&gt; 数组跟标量的运算&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array35 = np.arange(1, 10)
print(array35 + 10)
print(array35 * 10)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[11 12 13 14 15 16 17 18 19]
[10 20 30 40 50 60 70 80 90]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;数组跟数组的运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组跟数组的运算&#34;&gt;#&lt;/a&gt; 数组跟数组的运算&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array36 = np.array([1, 1, 1, 2, 2, 2, 3, 3, 3])
print(array35 + array36)
print(array35 * array36)
print(array35 ** array36)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[ 2  3  4  6  7  8 10 11 12]
[ 1  2  3  8 10 12 21 24 27]
[  1   2   3  16  25  36 343 512 729]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;通用一元函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通用一元函数&#34;&gt;#&lt;/a&gt; 通用一元函数&lt;/h4&gt;
&lt;p&gt;通用函数是对 &lt;code&gt;ndarray&lt;/code&gt;  中的数据执行元素级运算的函数。你可以将其看做普通函数（接收一个标量值作为参数，返回一个标量值）的矢量化包装器，如下所示。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(np.sqrt(array35))
print(np.log2(array35))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[1.         1.41421356 1.73205081 2.         2.23606798 2.44948974
 2.64575131 2.82842712 3.        ]
[0.         1.         1.5849625  2.         2.32192809 2.5849625
 2.80735492 3.         3.169925  ]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;表 1：通用一元函数&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;abs&lt;/code&gt;  /  &lt;code&gt;fabs&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;求绝对值的函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sqrt&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;求平方根的函数，相当于 &lt;code&gt;array ** 0.5 &lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;square&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;求平方的函数，相当于 &lt;code&gt;array ** 2&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;exp&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msup&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/msup&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;e^x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.664392em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.664392em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;log&lt;/code&gt;  /  &lt;code&gt;log10&lt;/code&gt;  /  &lt;code&gt;log2&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;对数函数（ &lt;code&gt;e&lt;/code&gt;  为底 /  &lt;code&gt;10&lt;/code&gt;  为底 /  &lt;code&gt;2&lt;/code&gt;  为底）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sign&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;符号函数（ &lt;code&gt;1&lt;/code&gt;  - 正数； &lt;code&gt;0&lt;/code&gt;  - 零； &lt;code&gt;-1&lt;/code&gt;  - 负数）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;ceil&lt;/code&gt;  /  &lt;code&gt;floor&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;上取整 /  下取整&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isnan&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回布尔数组，NaN 对应 &lt;code&gt;True&lt;/code&gt; ，非 NaN 对应 &lt;code&gt;False&lt;/code&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;isfinite&lt;/code&gt;  /  &lt;code&gt;isinf&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断数值是否为无穷大的函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cos&lt;/code&gt;  /  &lt;code&gt;cosh&lt;/code&gt;  /  &lt;code&gt;sin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;三角函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sinh&lt;/code&gt;  /  &lt;code&gt;tan&lt;/code&gt;  /  &lt;code&gt;tanh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;三角函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arccos&lt;/code&gt;  /  &lt;code&gt;arccosh&lt;/code&gt;  /  &lt;code&gt;arcsin&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;反三角函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;arcsinh&lt;/code&gt;  /  &lt;code&gt;arctan&lt;/code&gt;  /  &lt;code&gt;arctanh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;反三角函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;rint&lt;/code&gt;  /  &lt;code&gt;round&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;四舍五入函数&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;通用二元函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#通用二元函数&#34;&gt;#&lt;/a&gt; 通用二元函数&lt;/h4&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array37 = np.array([[4, 5, 6], [7, 8, 9]])
array38 = np.array([[1, 2, 3], [3, 2, 1]])
print(array37 ** array38)
print(np.power(array37, array38))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[  4  25 216]
 [343  64   9]]
[[  4  25 216]
 [343  64   9]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;表 2：通用二元函数&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;add(x, y)&lt;/code&gt;  /  &lt;code&gt;substract(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加法函数 / 减法函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;multiply(x, y)&lt;/code&gt;  /  &lt;code&gt;divide(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;乘法函数 / 除法函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;floor_divide(x, y)&lt;/code&gt;  /  &lt;code&gt;mod(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;整除函数 / 求模函数&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;allclose(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;检查数组 &lt;code&gt;x&lt;/code&gt;  和 &lt;code&gt;y&lt;/code&gt;  元素是否几乎相等&lt;/td&gt;
&lt;/tr&gt;
&lt;tr y_i=&#34;&#34;&gt;
&lt;td&gt;&lt;code&gt;power(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数组&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的元素&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;x&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;x_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.58056em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;x&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 和数组&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;y&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的元素&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;y&lt;/mi&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;y_i&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;y&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.31166399999999994em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.03588em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，计算x_i^&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;maximum(x, y)&lt;/code&gt;  /  &lt;code&gt;fmax(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;两两比较元素获取最大值 / 获取最大值（忽略 NaN）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;minimum(x, y)&lt;/code&gt;  /  &lt;code&gt;fmin(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;两两比较元素获取最小值 / 获取最小值（忽略 NaN）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dot(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;点积运算（数量积，通常记为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;⋯&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\cdots&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.31em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;⋯&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，用于欧几里得空间（Euclidean space））&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;inner(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;内积运算（内积的含义要高于点积，点积相当于是内积在欧几里得空间 $$ 的特例，而内积可以推广到&lt;strong&gt;赋范向量空间&lt;/strong&gt;，只要它满足平行四边形法则即可）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;cross(x, y) &lt;/code&gt;&lt;/td&gt;
&lt;td&gt;叉积运算（向量积，通常记为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\times&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;×&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，运算结果是一个向量）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;outer(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;外积运算（张量积，通常记为&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo&gt;⨂&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\bigotimes&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.00001em;vertical-align:-0.25001em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop op-symbol small-op&#34; style=&#34;position:relative;top:-0.0000050000000000050004em;&#34;&gt;⨂&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，运算结果通常是一个矩阵）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;intersect1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算 &lt;code&gt;x&lt;/code&gt;  和 &lt;code&gt;y&lt;/code&gt;  的交集，返回这些元素构成的有序数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;union1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算 &lt;code&gt;x&lt;/code&gt;  和 &lt;code&gt;y&lt;/code&gt;  的并集，返回这些元素构成的有序数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;in1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回由判断 &lt;code&gt;x&lt;/code&gt;  的元素是否在 &lt;code&gt;y&lt;/code&gt;  中得到的布尔值构成的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setdiff1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算 &lt;code&gt;x&lt;/code&gt;  和 &lt;code&gt;y&lt;/code&gt;  的差集，返回这些元素构成的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;setxor1d(x, y)&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算 &lt;code&gt;x&lt;/code&gt;  和 &lt;code&gt;y&lt;/code&gt;  的对称差，返回这些元素构成的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;补充说明&lt;/strong&gt;：在二维空间内，两个向量&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;[&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{A}=\begin{bmatrix} a_1 \\ a_2 \end{bmatrix}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68611em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.40003em;vertical-align:-0.95003em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.4099999999999997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500000000000004em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 和&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;[&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{B}=\begin{bmatrix} b_1 \\ b_2 \end{bmatrix}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68611em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34; style=&#34;margin-right:0.04835em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.40003em;vertical-align:-0.95003em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;[&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.4099999999999997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500000000000004em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的叉积是这样定义的：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mo&gt;×&lt;/mo&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;/mrow&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{A}\times \boldsymbol{B}=\begin{vmatrix} a_1 \quad a_2 \\ b_1 \quad b_2 \end{vmatrix}=a_1b_2 - a_2b_1&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.76944em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;×&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68611em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34; style=&#34;margin-right:0.04835em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.42999em;vertical-align:-0.9500199999999999em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.4099999999999997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500000000000004em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.84444em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.84444em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，其中&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\begin{vmatrix} a_1 \quad a_2 \\ b_1 \quad b_2 \end{vmatrix}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.42999em;vertical-align:-0.9500199999999999em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.4099999999999997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500000000000004em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 称为行列式。但是一定要注意，叉积并不等同于行列式，行列式的运算结果是一个标量，而叉积运算的结果是一个向量。如果不明白，我们可以看看三维空间两个向量，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;[&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{A}=\begin{bmatrix} a_1 \\ a_2 \\ a_3 \end{bmatrix}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68611em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:3.6010299999999997em;vertical-align:-1.55002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.0510099999999998em;&#34;&gt;&lt;span style=&#34;top:-2.2500000000000004em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.8099900000000004em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-4.05101em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎡&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55002em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0099999999999993em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.8099999999999994em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.5500000000000007em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.0510099999999998em;&#34;&gt;&lt;span style=&#34;top:-2.2500000000000004em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.8099900000000004em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-4.05101em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55002em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 和&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;B&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;[&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{B}=\begin{bmatrix} b_1 \\ b_2 \\ b_3 \end{bmatrix}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68611em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34; style=&#34;margin-right:0.04835em;&#34;&gt;B&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:3.6010299999999997em;vertical-align:-1.55002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.0510099999999998em;&#34;&gt;&lt;span style=&#34;top:-2.2500000000000004em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.8099900000000004em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎢&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-4.05101em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎡&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55002em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.05em;&#34;&gt;&lt;span style=&#34;top:-4.21em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.0099999999999993em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-1.8099999999999994em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.5500000000000007em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:2.0510099999999998em;&#34;&gt;&lt;span style=&#34;top:-2.2500000000000004em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎦&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.8099900000000004em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎥&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-4.05101em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3.1550000000000002em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size4&#34;&gt;&lt;span&gt;⎤&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.55002em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的叉积是&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;&amp;lt;&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;/mrow&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;3&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;/mrow&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;mrow&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;mtable rowspacing=&#34;0.15999999999999992em&#34; columnspacing=&#34;1em&#34;&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;mtr&gt;&lt;mtd&gt;&lt;mstyle scriptlevel=&#34;0&#34; displaystyle=&#34;false&#34;&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;/msub&gt;&lt;mspace width=&#34;1em&#34;/&gt;&lt;msub&gt;&lt;mi&gt;b&lt;/mi&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mstyle&gt;&lt;/mtd&gt;&lt;/mtr&gt;&lt;/mtable&gt;&lt;mo fence=&#34;true&#34;&gt;∣&lt;/mo&gt;&lt;/mrow&gt;&lt;mo fence=&#34;true&#34;&gt;&amp;gt;&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\left&amp;lt; \hat{i} \begin{vmatrix} a_2 \quad a_3 \\ b_2 \quad b_3 \end{vmatrix}, -\hat{j} \begin{vmatrix} a_1 \quad a_3 \\ b_1 \quad b_3 \end{vmatrix}, \hat{k} \begin{vmatrix} a_1 \quad a_2 \\ b_1 \quad b_2 \end{vmatrix} \right&amp;gt;&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:2.43em;vertical-align:-0.95003em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;⟨&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.92296em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.22852em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.25em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.4099999999999997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500000000000004em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.92296em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.22852em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.25em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.19444em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.4099999999999997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;3&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500000000000004em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9578799999999998em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.26344em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.25em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;&lt;span class=&#34;mopen&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mtable&#34;&gt;&lt;span class=&#34;col-align-c&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.45em;&#34;&gt;&lt;span style=&#34;top:-3.61em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.4099999999999997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:1em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500000000000004em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;&lt;span class=&#34;delimsizing mult&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:1.4799700000000002em;&#34;&gt;&lt;span style=&#34;top:-1.65598em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.25698em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.85798em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-2.87897em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.47997em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.606em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;delimsizinginner delim-size1&#34;&gt;&lt;span&gt;∣&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9500199999999999em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose delimcenter&#34; style=&#34;top:0em;&#34;&gt;&lt;span class=&#34;delimsizing size3&#34;&gt;⟩&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，其中&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;i&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;j&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mover accent=&#34;true&#34;&gt;&lt;mi&gt;k&lt;/mi&gt;&lt;mo&gt;^&lt;/mo&gt;&lt;/mover&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\hat{i}, \hat{j}, \hat{k}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.1523199999999998em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.92296em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;i&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.22852em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.25em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.92296em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.05724em;&#34;&gt;j&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.22852em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.25em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.19444em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord accent&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.9578799999999998em;&#34;&gt;&lt;span style=&#34;top:-3em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03148em;&#34;&gt;k&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;top:-3.26344em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:3em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;accent-body&#34; style=&#34;left:-0.25em;&#34;&gt;&lt;span class=&#34;mord&#34;&gt;^&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 代表每个维度的单位向量。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;广播机制&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#广播机制&#34;&gt;#&lt;/a&gt; 广播机制&lt;/h4&gt;
&lt;p&gt;上面的例子中，两个二元运算的数组形状是完全相同的，我们再来研究一下，两个形状不同的数组是否可以直接做二元运算或使用二元函数进行运算，请看下面的例子。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array39 = np.array([[0, 0, 0], [1, 1, 1], [2, 2, 2], [3, 3, 3]])
array40 = np.array([1, 2, 3])
array39 + array40
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [2, 3, 4],
       [3, 4, 5],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array41 = np.array([[1], [2], [3], [4]])
array39 + array41
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 1, 1],
       [3, 3, 3],
       [5, 5, 5],
       [7, 7, 7]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过上面的例子，我们发现形状不同的数组仍然有机会进行二元运算，但也绝对不是任意的数组都可以进行二元运算。简单的说，只有两个数组后缘维度相同或者其中一个数组后缘维度为 1 时，广播机制会被触发，而通过广播机制如果能够使两个数组的形状一致，才能进行二元运算。所谓后缘维度，指的是数组 &lt;code&gt;shape&lt;/code&gt;  属性对应的元组中最后一个元素的值（从后往前数最后一个维度的值），例如，我们之前打开的图像对应的数组后缘维度为 3，3 行 4 列的二维数组后缘维度为 4，而有 5 个元素的一维数组后缘维度为 5。简单的说就是，后缘维度相同或者其中一个数组的后缘维度为 1，就可以应用广播机制；而广播机制如果能够使得数组的形状一致，就满足了两个数组对应元素做运算的需求，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005115640.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005115658.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005115800.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;其他常用函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他常用函数&#34;&gt;#&lt;/a&gt; 其他常用函数&lt;/h3&gt;
&lt;p&gt;除了上面讲到的函数外，NumPy 中还提供了很多用于处理数组的函数， &lt;code&gt;ndarray&lt;/code&gt;  对象的很多方法也可以通过直接调用函数来实现，下表给出了一些常用的函数。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;表 3：NumPy 其他常用函数&lt;/strong&gt;&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;unique&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;去除数组重复元素，返回唯一元素构成的有序数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;copy&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回拷贝数组得到的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;sort&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;返回数组元素排序后的拷贝&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;split&lt;/code&gt;  /  &lt;code&gt;hsplit&lt;/code&gt;  /  &lt;code&gt;vsplit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将数组拆成若干个子数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;stack&lt;/code&gt;  /  &lt;code&gt;hstack&lt;/code&gt;  /  &lt;code&gt;vstack&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将多个数组堆叠成新数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;concatenate&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;沿着指定的轴连接多个数组构成新数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;append&lt;/code&gt;  /  &lt;code&gt;insert&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向数组末尾追加元素 / 在数组指定位置插入元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;argwhere&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;找出数组中非 0 元素的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;extract&lt;/code&gt;  /  &lt;code&gt;select&lt;/code&gt;  /  &lt;code&gt;where&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;按照指定的条件从数组中抽取或处理数组元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;flip&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;沿指定的轴翻转数组中的元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fromiter&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通过迭代器创建数组对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;fromregex&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通过读取文件和正则表达式解析获取数据创建数组对象&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;repeat&lt;/code&gt;  /  &lt;code&gt;tile&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;通过对元素的重复来创建新数组&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;roll&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;沿指定轴对数组元素进行移位&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;resize&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;重新调整数组的大小&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;place&lt;/code&gt;  /  &lt;code&gt;put&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将数组中满足条件的元素 / 指定的元素替换为指定的值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;partition&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;用选定的元素对数组进行一次划分并返回划分后的数组&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：上面的 &lt;code&gt;resize&lt;/code&gt;  函数和 &lt;code&gt;ndarray&lt;/code&gt;  对象的 &lt;code&gt;resize&lt;/code&gt;  方法是有区别的， &lt;code&gt;resize&lt;/code&gt;  函数在调整数组大小时会重复数组中的元素作为填补多出来的元素的值，而 &lt;code&gt;ndarry&lt;/code&gt;  对象的 &lt;code&gt;resize&lt;/code&gt;  方法是用 0 来填补多出来的元素。这些小细节不清楚暂时也不要紧，但是如果用到对应的功能了就要引起注意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array42 = np.array([[1, 1, 1], [2, 2, 2], [3, 3, 3]])
array43 = np.array([[4, 4, 4], [5, 5, 5], [6, 6, 6]])
np.hstack((array42, array43))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 1, 1, 4, 4, 4],
       [2, 2, 2, 5, 5, 5],
       [3, 3, 3, 6, 6, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;np.vstack((array42, array43))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 1, 1],
       [2, 2, 2],
       [3, 3, 3],
       [4, 4, 4],
       [5, 5, 5],
       [6, 6, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;np.concatenate((array42, array43))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 1, 1],
       [2, 2, 2],
       [3, 3, 3],
       [4, 4, 4],
       [5, 5, 5],
       [6, 6, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;np.concatenate((array42, array43), axis=1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 1, 1, 4, 4, 4],
       [2, 2, 2, 5, 5, 5],
       [3, 3, 3, 6, 6, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;矩阵运算&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#矩阵运算&#34;&gt;#&lt;/a&gt; 矩阵运算&lt;/h3&gt;
&lt;p&gt;NumPy 中提供了专门用于线性代数（linear algebra）的模块和表示矩阵的类型 &lt;code&gt;matrix&lt;/code&gt; ，当然我们通过二维数组也可以表示一个矩阵，官方并不推荐使用 &lt;code&gt;matrix&lt;/code&gt;  类而是建议使用二维数组，而且有可能在将来的版本中会移除 &lt;code&gt;matrix&lt;/code&gt;  类。无论如何，利用这些已经封装好的类和函数，我们可以轻松愉快的实现线性代数中很多的操作。&lt;/p&gt;
&lt;h4 id=&#34;线性代数快速回顾&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线性代数快速回顾&#34;&gt;#&lt;/a&gt; 线性代数快速回顾&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;向量&lt;/strong&gt;也叫&lt;strong&gt;矢量&lt;/strong&gt;，是一个同时具有大小和方向，且满足平行四边形法则的几何对象。与向量相对的概念叫&lt;strong&gt;标量&lt;/strong&gt;或&lt;strong&gt;数量&lt;/strong&gt;，标量只有大小、绝大多数情况下没有方向。&lt;/li&gt;
&lt;li&gt;向量可以进行&lt;strong&gt;加&lt;/strong&gt;、&lt;strong&gt;减&lt;/strong&gt;、&lt;strong&gt;数乘&lt;/strong&gt;、&lt;strong&gt;点积&lt;/strong&gt;、&lt;strong&gt;叉积&lt;/strong&gt;等运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;行列式&lt;/strong&gt;由向量组成，它的性质可以由向量解释。&lt;/li&gt;
&lt;li&gt;行列式可以使用&lt;strong&gt;行列式公式&lt;/strong&gt;计算：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mo&gt;∑&lt;/mo&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;!&lt;/mo&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;±&lt;/mo&gt;&lt;mrow&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;α&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mrow&gt;&lt;mn&gt;2&lt;/mn&gt;&lt;mi&gt;β&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;mo&gt;⋯&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;mi&gt;ω&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;det(\boldsymbol{A})=\sum_{n!} \pm {a_{1\alpha}a_{2\beta} \cdots a_{n\omega}}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1.0497100000000001em;vertical-align:-0.29971000000000003em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mop&#34;&gt;&lt;span class=&#34;mop op-symbol small-op&#34; style=&#34;position:relative;top:-0.0000050000000000050004em;&#34;&gt;∑&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.1863979999999999em;&#34;&gt;&lt;span style=&#34;top:-2.40029em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mclose mtight&#34;&gt;!&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.29971000000000003em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;±&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.0037em;&#34;&gt;α&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.3361079999999999em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.05278em;&#34;&gt;β&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.286108em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;⋯&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.151392em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34; style=&#34;margin-right:0.03588em;&#34;&gt;ω&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;高阶行列式可以用&lt;strong&gt;代数余子式&lt;/strong&gt;展开成多个低阶行列式，如：&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;d&lt;/mi&gt;&lt;mi&gt;e&lt;/mi&gt;&lt;mi&gt;t&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;(&lt;/mo&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;11&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mn&gt;11&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mn&gt;12&lt;/mn&gt;&lt;/msub&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;mo&gt;⋯&lt;/mo&gt;&lt;mo&gt;+&lt;/mo&gt;&lt;msub&gt;&lt;mi&gt;a&lt;/mi&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;msub&gt;&lt;mi&gt;C&lt;/mi&gt;&lt;mrow&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;/msub&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;det(\boldsymbol{A})=a_{11}C_{11}+a_{12}C_{12}+ \cdots +a_{1n}C_{1n}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;d&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;t&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mtight&#34;&gt;2&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.66666em;vertical-align:-0.08333em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;minner&#34;&gt;⋯&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mbin&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2222222222222222em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.83333em;vertical-align:-0.15em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.07153em;&#34;&gt;C&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t vlist-t2&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.30110799999999993em;&#34;&gt;&lt;span style=&#34;top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord mathnormal mtight&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-s&#34;&gt;​&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.15em;&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;矩阵&lt;/strong&gt;是由一系列元素排成的矩形阵列，矩阵里的元素可以是数字、符号或数学公式。&lt;/li&gt;
&lt;li&gt;矩阵可以进行&lt;strong&gt;加法&lt;/strong&gt;、&lt;strong&gt;减法&lt;/strong&gt;、&lt;strong&gt;数乘&lt;/strong&gt;、&lt;strong&gt;乘法&lt;/strong&gt;、&lt;strong&gt;转置&lt;/strong&gt;等运算。&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;逆矩阵&lt;/strong&gt;用&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;&lt;msup&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mrow&gt;&lt;mo mathvariant=&#34;bold-italic&#34;&gt;−&lt;/mo&gt;&lt;mn mathvariant=&#34;bold&#34;&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{A^{-1}}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999998em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999998em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathbf mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathbf mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 表示，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mi&gt;&lt;msup&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mrow&gt;&lt;mo mathvariant=&#34;bold-italic&#34;&gt;−&lt;/mo&gt;&lt;mn mathvariant=&#34;bold&#34;&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi&gt;&lt;msup&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mrow&gt;&lt;mo mathvariant=&#34;bold-italic&#34;&gt;−&lt;/mo&gt;&lt;mn mathvariant=&#34;bold&#34;&gt;1&lt;/mn&gt;&lt;/mrow&gt;&lt;/msup&gt;&lt;/mi&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;I&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{A}\boldsymbol{A^{-1}}=\boldsymbol{A^{-1}}\boldsymbol{A}=\boldsymbol{I}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999998em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999998em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathbf mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathbf mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.8141079999999998em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;span class=&#34;msupsub&#34;&gt;&lt;span class=&#34;vlist-t&#34;&gt;&lt;span class=&#34;vlist-r&#34;&gt;&lt;span class=&#34;vlist&#34; style=&#34;height:0.8141079999999998em;&#34;&gt;&lt;span style=&#34;top:-3.063em;margin-right:0.05em;&#34;&gt;&lt;span class=&#34;pstrut&#34; style=&#34;height:2.7em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;sizing reset-size6 size3 mtight&#34;&gt;&lt;span class=&#34;mord mtight&#34;&gt;&lt;span class=&#34;mord mathbf mtight&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord mathbf mtight&#34;&gt;1&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68611em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34; style=&#34;margin-right:0.07778em;&#34;&gt;I&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;；没有逆矩阵的方阵是&lt;strong&gt;奇异矩阵&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;如果一个方阵是&lt;strong&gt;满秩矩阵&lt;/strong&gt; (矩阵的秩等于矩阵的阶数)，该方阵对应的线性方程有唯一解。&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;strong&gt;矩阵的秩&lt;/strong&gt;是指矩阵中线性无关的行 / 列向量的最大个数，同时也是矩阵对应的线性变换的像空间的维度。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;numpy中矩阵相关函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy中矩阵相关函数&#34;&gt;#&lt;/a&gt; NumPy 中矩阵相关函数&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;创建矩阵对象。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# matrix构造函数可以传入类数组对象也可以传入字符串
m1 = np.matrix(&#39;1 2 3; 4 5 6&#39;)
m1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;matrix([[1, 2, 3],
        [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# asmatrix函数也可以写成mat函数，它们其实是同一个函数
m2 = np.asmatrix(np.array([[1, 1], [2, 2], [3, 3]]))
m2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;matrix([[1, 1],
        [2, 2],
        [3, 3]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;m1 * m2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;matrix([[14, 14],
        [32, 32]])
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：注意 &lt;code&gt;matrix&lt;/code&gt;  对象和 &lt;code&gt;ndarray&lt;/code&gt;  对象乘法运算的差别，如果两个二维数组要做矩阵乘法运算，应该使用 &lt;code&gt;@&lt;/code&gt; 运算符或 &lt;code&gt;matmul&lt;/code&gt;  函数，而不是 &lt;code&gt;*&lt;/code&gt;  运算符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;矩阵对象的属性。&lt;/p&gt;
&lt;p&gt;| 属性    | 说明                                      |&lt;br /&gt;
| ------- | ----------------------------------------- |&lt;br /&gt;
|  &lt;code&gt;A&lt;/code&gt;      | 获取矩阵对象对应的 &lt;code&gt;ndarray&lt;/code&gt;  对象           |&lt;br /&gt;
|  &lt;code&gt;A1&lt;/code&gt;     | 获取矩阵对象对应的扁平化后的 &lt;code&gt;ndarray&lt;/code&gt;  对象 |&lt;br /&gt;
|  &lt;code&gt;I&lt;/code&gt;      | 可逆矩阵的逆矩阵                          |&lt;br /&gt;
|  &lt;code&gt;T&lt;/code&gt;      | 矩阵的转置                                |&lt;br /&gt;
|  &lt;code&gt;H&lt;/code&gt;      | 矩阵的共轭转置                            |&lt;br /&gt;
|  &lt;code&gt;shape&lt;/code&gt;  | 矩阵的形状                                |&lt;br /&gt;
|  &lt;code&gt;size&lt;/code&gt;   | 矩阵元素的个数                            |&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;矩阵对象的方法。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;矩阵对象的方法跟之前讲过的 &lt;code&gt;ndarray&lt;/code&gt;  数组对象的方法基本差不多，此处不再进行赘述。&lt;/p&gt;
&lt;h4 id=&#34;numpy的线性代数模块&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy的线性代数模块&#34;&gt;#&lt;/a&gt; NumPy 的线性代数模块&lt;/h4&gt;
&lt;p&gt;NumPy 的 &lt;code&gt;linalg&lt;/code&gt;  模块中有一组标准的矩阵分解运算以及诸如求逆和行列式之类的函数，它们跟 MATLAB 和 R 等语言所使用的是相同的行业标准线性代数库，下面的表格列出了 &lt;code&gt;numpy&lt;/code&gt;  以及 &lt;code&gt;linalg&lt;/code&gt;  模块中常用的跟线性代数相关的函数。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;函数&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;diag&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;以一维数组的形式返回方阵的对角线元素或将一维数组转换为方阵（非对角元素元素为 0）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;vdot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;向量的点积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;dot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数组的点积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;inner&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数组的内积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;outer&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;数组的叉积&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;trace&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算对角线元素的和&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;norm&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;求模（范数）运算&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;det&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算行列式的值（在方阵上计算会得到一个标量）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;matrix_rank&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算矩阵的秩&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;eig&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算矩阵的特征值（eigenvalue）和特征向量（eigenvector）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;inv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算非奇异矩阵（&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;n&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;n&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;n&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 阶方阵）的逆矩阵&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;pinv&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算矩阵的摩尔 - 彭若斯（Moore-Penrose）广义逆&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;qr&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;QR 分解（把矩阵分解成一个正交矩阵与一个上三角矩阵的积）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;svd&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算奇异值分解（singular value decomposition）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;solve&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;解线性方程组&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;x&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{A}\boldsymbol{x}=\boldsymbol{b}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68611em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，其中&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{A}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68611em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 是一个方阵&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;lstsq&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;计算&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;A&lt;/mi&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;x&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mi mathvariant=&#34;bold-italic&#34;&gt;b&lt;/mi&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\boldsymbol{A}\boldsymbol{x}=\boldsymbol{b}&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.68611em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;A&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;x&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.69444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord&#34;&gt;&lt;span class=&#34;mord boldsymbol&#34;&gt;b&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的最小二乘解&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;大家如果有兴趣可以用下面的代码验证上面的函数。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;m3 = np.array([[1., 2.], [3., 4.]])
np.linalg.inv(m3)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[-2. ,  1. ],
       [ 1.5, -0.5]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;m4 = np.array([[1, 3, 5], [2, 4, 6], [4, 7, 9]])
np.linalg.det(m4)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 解线性方程组ax=b
# 3*x1 + x2= 9，x1 + 2*x2 = 8
a = np.array([[3,1], [1,2]])
b = np.array([9, 8])
np.linalg.solve(a, b)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([2., 3.])
&lt;/code&gt;&lt;/pre&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/68.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-1/</guid>
            <title>NumPy的应用-1</title>
            <link>https://scottalive.github.io/computer-science/python/basic/68.NumPy%E7%9A%84%E5%BA%94%E7%94%A8-1/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 05:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;numpy的应用-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#numpy的应用-1&#34;&gt;#&lt;/a&gt; NumPy 的应用 - 1&lt;/h2&gt;
&lt;p&gt;Numpy 是一个开源的 Python 科学计算库，&lt;strong&gt;用于快速处理任意维度的数组&lt;/strong&gt;。Numpy &lt;strong&gt;支持常见的数组和矩阵操作&lt;/strong&gt;，对于同样的数值计算任务，使用 NumPy 不仅代码要简洁的多，而且 NumPy 的性能远远优于原生 Python，基本是一个到两个数量级的差距，而且数据量越大，NumPy 的优势就越明显。&lt;/p&gt;
&lt;p&gt;Numpy 最为核心的数据类型是 &lt;code&gt;ndarray&lt;/code&gt; ，使用 &lt;code&gt;ndarray&lt;/code&gt;  可以处理一维、二维和多维数组，该对象相当于是一个快速而灵活的大数据容器。NumPy 底层代码使用 C 语言编写，解决了 GIL 的限制， &lt;code&gt;ndarray&lt;/code&gt;  在存取数据的时候，数据与数据的地址都是连续的，这确保了可以进行高效率的批量操作，远远优于 Python 中的 &lt;code&gt;list&lt;/code&gt; ；另一方面 &lt;code&gt;ndarray&lt;/code&gt;  对象提供了更多的方法来处理数据，尤其是和统计相关的方法，这些方法也是 Python 原生的 &lt;code&gt;list&lt;/code&gt;  没有的。&lt;/p&gt;
&lt;h3 id=&#34;准备工作&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#准备工作&#34;&gt;#&lt;/a&gt; 准备工作&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;启动 Notebook&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：在启动 Notebook 之前，建议先安装好数据分析相关依赖项，包括之前提到的三大神器以及相关依赖项，包括： &lt;code&gt;numpy&lt;/code&gt; 、 &lt;code&gt;pandas&lt;/code&gt; 、 &lt;code&gt;matplotlib&lt;/code&gt; 、 &lt;code&gt;openpyxl&lt;/code&gt;  等。如果使用 Anaconda，则无需单独安装。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;导入&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：如果已经启动了 Notebook 但尚未安装相关依赖库，例如尚未安装 &lt;code&gt;numpy&lt;/code&gt; ，可以在 Notebook 的单元格中输入 &lt;code&gt;!pip install numpy&lt;/code&gt;  并运行该单元格来安装 NumPy，也可以一次性安装多个三方库，需要在单元格中输入 &lt;code&gt;%pip install numpy pandas matplotlib&lt;/code&gt; 。注意上面的代码，我们不仅导入了 NumPy，还将 pandas 和 matplotlib 库一并导入了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;创建数组对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#创建数组对象&#34;&gt;#&lt;/a&gt; 创建数组对象&lt;/h3&gt;
&lt;p&gt;创建 &lt;code&gt;ndarray&lt;/code&gt;  对象有很多种方法，下面就如何创建一维数组、二维数组和多维数组进行说明。&lt;/p&gt;
&lt;h4 id=&#34;一维数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一维数组&#34;&gt;#&lt;/a&gt; 一维数组&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法一：使用 &lt;code&gt;array&lt;/code&gt;  函数，通过 &lt;code&gt;list&lt;/code&gt;  创建数组对象&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array1 = np.array([1, 2, 3, 4, 5])
array1
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3, 4, 5])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法二：使用 &lt;code&gt;arange&lt;/code&gt;  函数，指定取值范围创建数组对象&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array2 = np.arange(0, 20, 2)
array2
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([ 0,  2,  4,  6,  8, 10, 12, 14, 16, 18])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法三：使用 &lt;code&gt;linspace&lt;/code&gt;  函数，用指定范围均匀间隔的数字创建数组对象&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array3 = np.linspace(-5, 5, 101)
array3
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([-5. , -4.9, -4.8, -4.7, -4.6, -4.5, -4.4, -4.3, -4.2, -4.1, -4. ,
       -3.9, -3.8, -3.7, -3.6, -3.5, -3.4, -3.3, -3.2, -3.1, -3. , -2.9,
       -2.8, -2.7, -2.6, -2.5, -2.4, -2.3, -2.2, -2.1, -2. , -1.9, -1.8,
       -1.7, -1.6, -1.5, -1.4, -1.3, -1.2, -1.1, -1. , -0.9, -0.8, -0.7,
       -0.6, -0.5, -0.4, -0.3, -0.2, -0.1,  0. ,  0.1,  0.2,  0.3,  0.4,
        0.5,  0.6,  0.7,  0.8,  0.9,  1. ,  1.1,  1.2,  1.3,  1.4,  1.5,
        1.6,  1.7,  1.8,  1.9,  2. ,  2.1,  2.2,  2.3,  2.4,  2.5,  2.6,
        2.7,  2.8,  2.9,  3. ,  3.1,  3.2,  3.3,  3.4,  3.5,  3.6,  3.7,
        3.8,  3.9,  4. ,  4.1,  4.2,  4.3,  4.4,  4.5,  4.6,  4.7,  4.8,
        4.9,  5. ])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法四：使用 &lt;code&gt;numpy.random&lt;/code&gt;  模块的函数生成随机数创建数组对象&lt;/p&gt;
&lt;p&gt;产生 10 个&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;[0, 1)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 范围的随机小数，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array4 = np.random.rand(10)
array4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([0.45556132, 0.67871326, 0.4552213 , 0.96671509, 0.44086463,
       0.72650875, 0.79877188, 0.12153022, 0.24762739, 0.6669852 ])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;产生 10 个&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;100&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;[1, 100)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 范围的随机整数，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array5 = np.random.randint(1, 100, 10)
array5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([29, 97, 87, 47, 39, 19, 71, 32, 79, 34])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;产生 20 个&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;μ&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;50&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\mu=50&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.625em;vertical-align:-0.19444em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34;&gt;μ&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;5&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;，&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mi&gt;σ&lt;/mi&gt;&lt;mo&gt;=&lt;/mo&gt;&lt;mn&gt;10&lt;/mn&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;\sigma=10&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.43056em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord mathnormal&#34; style=&#34;margin-right:0.03588em;&#34;&gt;σ&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mrel&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.2777777777777778em;&#34;&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:0.64444em;vertical-align:0em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 的正态分布随机数，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array6 = np.random.normal(50, 10, 20)
array6
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([55.04155586, 46.43510797, 20.28371158, 62.67884053, 61.23185964,
       38.22682148, 53.17126151, 43.54741592, 36.11268017, 40.94086676,
       63.27911699, 46.92688903, 37.1593374 , 67.06525656, 67.47269463,
       23.37925889, 31.45312239, 48.34532466, 55.09180924, 47.95702787])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：创建一维数组还有很多其他的方式，比如通过读取字符串、读取文件、解析正则表达式等方式，这里我们暂不讨论这些方式，有兴趣的读者可以自行研究。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;二维数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#二维数组&#34;&gt;#&lt;/a&gt; 二维数组&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;方法一：使用 &lt;code&gt;array&lt;/code&gt;  函数，通过嵌套的 &lt;code&gt;list&lt;/code&gt;  创建数组对象&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array7 = np.array([[1, 2, 3], [4, 5, 6]])
array7
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法二：使用 &lt;code&gt;zeros&lt;/code&gt; 、 &lt;code&gt;ones&lt;/code&gt; 、 &lt;code&gt;full&lt;/code&gt;  函数指定数组的形状创建数组对象&lt;/p&gt;
&lt;p&gt;使用 &lt;code&gt;zeros&lt;/code&gt;  函数，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array8 = np.zeros((3, 4))
array8
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[0., 0., 0., 0.],
       [0., 0., 0., 0.],
       [0., 0., 0., 0.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;ones&lt;/code&gt;  函数，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array9 = np.ones((3, 4))
array9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1., 1., 1., 1.],
       [1., 1., 1., 1.],
       [1., 1., 1., 1.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;使用 &lt;code&gt;full&lt;/code&gt;  函数，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array10 = np.full((3, 4), 10)
array10
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[10, 10, 10, 10],
       [10, 10, 10, 10],
       [10, 10, 10, 10]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法三：使用 eye 函数创建单位矩阵&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array11 = np.eye(4)
array11
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1., 0., 0., 0.],
       [0., 1., 0., 0.],
       [0., 0., 1., 0.],
       [0., 0., 0., 1.]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法四：通过 &lt;code&gt;reshape&lt;/code&gt;  将一维数组变成二维数组&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array12 = np.array([1, 2, 3, 4, 5, 6]).reshape(2, 3)
array12
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2, 3],
       [4, 5, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;： &lt;code&gt;reshape&lt;/code&gt;  是 &lt;code&gt;ndarray&lt;/code&gt;  对象的一个方法，使用 &lt;code&gt;reshape&lt;/code&gt;  方法时需要确保调形后的数组元素个数与调形前数组元素个数保持一致，否则将会产生异常。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;方法五：通过 &lt;code&gt;numpy.random&lt;/code&gt;  模块的函数生成随机数创建数组对象&lt;/p&gt;
&lt;p&gt;产生&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;0&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;[0, 1)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 范围的随机小数构成的 3 行 4 列的二维数组，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array13 = np.random.rand(3, 4)
array13
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[0.54017809, 0.46797771, 0.78291445, 0.79501326],
       [0.93973783, 0.21434806, 0.03592874, 0.88838892],
       [0.84130479, 0.3566601 , 0.99935473, 0.26353598]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;产生&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mn&gt;1&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;100&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;)&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;[1, 100)&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;)&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt; 范围的随机整数构成的 3 行 4 列的二维数组，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array14 = np.random.randint(1, 100, (3, 4))
array14
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[83, 30, 64, 53],
       [39, 92, 53, 43],
       [43, 48, 91, 72]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&#34;多维数组&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多维数组&#34;&gt;#&lt;/a&gt; 多维数组&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;使用随机的方式创建多维数组&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array15 = np.random.randint(1, 100, (3, 4, 5))
array15
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[[94, 26, 49, 24, 43],
        [27, 27, 33, 98, 33],
        [13, 73,  6,  1, 77],
        [54, 32, 51, 86, 59]],

       [[62, 75, 62, 29, 87],
        [90, 26,  6, 79, 41],
        [31, 15, 32, 56, 64],
        [37, 84, 61, 71, 71]],

       [[45, 24, 78, 77, 41],
        [75, 37,  4, 74, 93],
        [ 1, 36, 36, 60, 43],
        [23, 84, 44, 89, 79]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将一维二维的数组调形为多维数组&lt;/p&gt;
&lt;p&gt;一维数组调形为多维数组，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array16 = np.arange(1, 25).reshape((2, 3, 4))
array16
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array([[[ 1,  2,  3,  4],
        [ 5,  6,  7,  8],
        [ 9, 10, 11, 12]],

       [[13, 14, 15, 16],
        [17, 18, 19, 20],
        [21, 22, 23, 24]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;二维数组调形为多维数组，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array17 = np.random.randint(1, 100, (4, 6)).reshape((4, 3, 2))
array17
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[[60, 59],
        [31, 80],
        [54, 91]],

       [[67,  4],
        [ 4, 59],
        [47, 49]],

       [[16,  4],
        [ 5, 71],
        [80, 53]],

       [[38, 49],
        [70,  5],
        [76, 80]]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;读取图片获得对应的三维数组&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array18 = plt.imread(&#39;guido.jpg&#39;)
array18
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[[ 36,  33,  28],
        [ 36,  33,  28],
        [ 36,  33,  28],
        ...,
        [ 32,  31,  29],
        [ 32,  31,  27],
        [ 31,  32,  26]],

       [[ 37,  34,  29],
        [ 38,  35,  30],
        [ 38,  35,  30],
        ...,
        [ 31,  30,  28],
        [ 31,  30,  26],
        [ 30,  31,  25]],

       [[ 38,  35,  30],
        [ 38,  35,  30],
        [ 38,  35,  30],
        ...,
        [ 30,  29,  27],
        [ 30,  29,  25],
        [ 29,  30,  25]],

       ...,

       [[239, 178, 123],
        [237, 176, 121],
        [235, 174, 119],
        ...,
        [ 78,  68,  56],
        [ 75,  67,  54],
        [ 73,  65,  52]],

       [[238, 177, 120],
        [236, 175, 118],
        [234, 173, 116],
        ...,
        [ 82,  70,  58],
        [ 78,  68,  56],
        [ 75,  66,  51]],

       [[238, 176, 119],
        [236, 175, 118],
        [234, 173, 116],
        ...,
        [ 84,  70,  61],
        [ 81,  69,  57],
        [ 79,  67,  53]]], dtype=uint8)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码读取了当前路径下名为 &lt;code&gt;guido.jpg&lt;/code&gt;  的图片文件，计算机系统中的图片通常由若干行若干列的像素点构成，而每个像素点又是由红绿蓝三原色构成的，所以能够用三维数组来表示。读取图片用到了 &lt;code&gt;matplotlib&lt;/code&gt;  库的 &lt;code&gt;imread&lt;/code&gt;  函数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;数组对象的属性&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组对象的属性&#34;&gt;#&lt;/a&gt; 数组对象的属性&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;size&lt;/code&gt;  属性：数组元素个数&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array19 = np.arange(1, 100, 2)
array20 = np.random.rand(3, 4)
print(array19.size, array20.size)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;50 12
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;shape&lt;/code&gt;  属性：数组的形状&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array19.shape, array20.shape)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;(50,) (3, 4)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dtype&lt;/code&gt;  属性：数组元素的数据类型&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array19.dtype, array20.dtype)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;int64 float64
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;ndarray&lt;/code&gt;  对象元素的数据类型可以参考如下所示的表格。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL215cGljLzIwMjExMDA1MTE0ODEzLnBuZw==&#34;&gt;https://github.com/mypic/20211005114813.png&lt;/span&gt;&amp;quot; width=&amp;quot;85%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;ndim&lt;/code&gt;  属性：数组的维度&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array19.ndim, array20.ndim)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 2
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;itemsize&lt;/code&gt;  属性：数组单个元素占用内存空间的字节数&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array21 = np.arange(1, 100, 2, dtype=np.int8)
print(array19.itemsize, array20.itemsize, array21.itemsize)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;8 8 1
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：在使用 &lt;code&gt;arange&lt;/code&gt;  创建数组对象时，通过 &lt;code&gt;dtype&lt;/code&gt;  参数指定元素的数据类型。可以看出， &lt;code&gt;np.int8&lt;/code&gt;  代表的是 8 位有符号整数，只占用 1 个字节的内存空间，取值范围是&lt;span class=&#34;katex&#34;&gt;&lt;span class=&#34;katex-mathml&#34;&gt;&lt;math xmlns=&#34;http://www.w3.org/1998/Math/MathML&#34;&gt;&lt;semantics&gt;&lt;mrow&gt;&lt;mo stretchy=&#34;false&#34;&gt;[&lt;/mo&gt;&lt;mo&gt;−&lt;/mo&gt;&lt;mn&gt;128&lt;/mn&gt;&lt;mo separator=&#34;true&#34;&gt;,&lt;/mo&gt;&lt;mn&gt;127&lt;/mn&gt;&lt;mo stretchy=&#34;false&#34;&gt;]&lt;/mo&gt;&lt;/mrow&gt;&lt;annotation encoding=&#34;application/x-tex&#34;&gt;[-128,127]&lt;/annotation&gt;&lt;/semantics&gt;&lt;/math&gt;&lt;/span&gt;&lt;span class=&#34;katex-html&#34; aria-hidden=&#34;true&#34;&gt;&lt;span class=&#34;base&#34;&gt;&lt;span class=&#34;strut&#34; style=&#34;height:1em;vertical-align:-0.25em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mopen&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;−&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;8&lt;/span&gt;&lt;span class=&#34;mpunct&#34;&gt;,&lt;/span&gt;&lt;span class=&#34;mspace&#34; style=&#34;margin-right:0.16666666666666666em;&#34;&gt;&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;2&lt;/span&gt;&lt;span class=&#34;mord&#34;&gt;7&lt;/span&gt;&lt;span class=&#34;mclose&#34;&gt;]&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nbytes&lt;/code&gt;  属性：数组所有元素占用内存空间的字节数&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array19.nbytes, array20.nbytes, array21.nbytes)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;400 96 50
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flat&lt;/code&gt;  属性：数组（一维化之后）元素的迭代器&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from typing import Iterable

print(isinstance(array20.flat, np.ndarray), isinstance(array20.flat, Iterable))
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;False True
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;base&lt;/code&gt;  属性：数组的基对象（如果数组共享了其他数组的内存空间）&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array22 = array19[:]
print(array22.base is array19, array22.base is array21)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;True False
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码用到了数组的切片操作，它类似于 Python 中 &lt;code&gt;list&lt;/code&gt;  类型的切片，但在细节上又不完全相同，下面会专门讲解这个知识点。通过上面的代码可以发现， &lt;code&gt;ndarray&lt;/code&gt;  切片后得到的新的数组对象跟原来的数组对象共享了内存中的数据，因此 &lt;code&gt;array22&lt;/code&gt;  的 &lt;code&gt;base&lt;/code&gt;  属性就是 &lt;code&gt;array19&lt;/code&gt;  对应的数组对象。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数组的索引和切片&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组的索引和切片&#34;&gt;#&lt;/a&gt; 数组的索引和切片&lt;/h3&gt;
&lt;p&gt;和 Python 中的列表类似，NumPy 的 &lt;code&gt;ndarray&lt;/code&gt;  对象可以进行索引和切片操作，通过索引可以获取或修改数组中的元素，通过切片可以取出数组的一部分。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;索引运算（普通索引）&lt;/p&gt;
&lt;p&gt;一维数组，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array23 = np.array([1, 2, 3, 4, 5, 6, 7, 8, 9])
print(array23[0], array23[array23.size - 1])
print(array23[-array23.size], array23[-1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;1 9
1 9
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;二维数组，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array24 = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
print(array24[2])
print(array24[0][0], array24[-1][-1])
print(array24[1][1], array24[1, 1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[7 8 9]
1 9
5 5
[[ 1  2  3]
 [ 4 10  6]
 [ 7  8  9]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array24[1][1] = 10
print(array24)
array24[1] = [10, 11, 12]
print(array24)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[ 1  2  3]
 [ 4 10  6]
 [ 7  8  9]]
[[ 1  2  3]
 [10 11 12]
 [ 7  8  9]]
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;切片运算（切片索引）&lt;/p&gt;
&lt;p&gt;切片是形如 &lt;code&gt;[开始索引:结束索引:步长]&lt;/code&gt;  的语法，通过指定&lt;strong&gt;开始索引&lt;/strong&gt;（默认值无穷小）、&lt;strong&gt;结束索引&lt;/strong&gt;（默认值无穷大）和&lt;strong&gt;步长&lt;/strong&gt;（默认值 1），从数组中取出指定部分的元素并构成新的数组。因为开始索引、结束索引和步长都有默认值，所以它们都可以省略，如果不指定步长，第二个冒号也可以省略。一维数组的切片运算跟 Python 中的 &lt;code&gt;list&lt;/code&gt;  类型的切片非常类似，此处不再赘述，二维数组的切片可以参考下面的代码，相信非常容易理解。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array24[:2, 1:])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[2 3]
 [5 6]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array24[2])
print(array24[2, :])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[7 8 9]
[7 8 9]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array24[2:, :])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[7 8 9]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array24[:, :2])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[1 2]
 [4 5]
 [7 8]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array24[1, :2])
print(array24[1:2, :2])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[4 5]
[[4 5]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array24[::2, ::2])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[1 3]
 [7 9]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;print(array24[::-2, ::-2])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;[[9 7]
 [3 1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关于数组的索引和切片运算，大家可以通过下面的两张图来增强印象，这两张图来自&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMjM5ODcyNS5odG1s&#34;&gt;《利用 Python 进行数据分析》&lt;/span&gt;一书，它是 &lt;code&gt;pandas&lt;/code&gt;  库的作者 Wes McKinney 撰写的 Python 数据分析领域的经典教科书，有兴趣的读者可以购买和阅读原书。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMDA1MTE1MDA1LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211005115005.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom: 65%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMDA1MTE1MDQxLnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211005115041.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:65%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;花式索引（fancy index）&lt;/p&gt;
&lt;p&gt;花式索引（Fancy indexing）是指利用整数数组进行索引，这里所说的整数数组可以是 NumPy 的 &lt;code&gt;ndarray&lt;/code&gt; ，也可以是 Python 中 &lt;code&gt;list&lt;/code&gt; 、 &lt;code&gt;tuple&lt;/code&gt;  等可迭代类型，可以使用正向或负向索引。&lt;/p&gt;
&lt;p&gt;一维数组的花式索引，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array25 = np.array([50, 30, 15, 20, 40])
array25[[0, 1, -1]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([50, 30, 40])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;二维数组的花式索引，代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array26 = np.array([[30, 20, 10], [40, 60, 50], [10, 90, 80]])
# 取二维数组的第1行和第3行
array26[[0, 2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[30, 20, 10],
       [10, 90, 80]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 取二维数组第1行第2列，第3行第3列的两个元素
array26[[0, 2], [1, 2]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([20, 80])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 取二维数组第1行第2列，第3行第2列的两个元素
array26[[0, 2], 1]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([20, 90])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;布尔索引&lt;/p&gt;
&lt;p&gt;布尔索引就是通过布尔类型的数组对数组元素进行索引，布尔类型的数组可以手动构造，也可以通过关系运算来产生布尔类型的数组。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array27 = np.arange(1, 10)
array27[[True, False, True, True, False, False, False, False, True]]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([1, 3, 4, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array27 &amp;gt;= 5
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([False, False, False, False,  True,  True,  True,  True,  True])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# ~运算符可以实现逻辑变反，看看运行结果跟上面有什么不同
~(array27 &amp;gt;= 5)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([ True,  True,  True,  True, False, False, False, False, False])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array27[array27 &amp;gt;= 5]
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([5, 6, 7, 8, 9])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：切片操作虽然创建了新的数组对象，但是新数组和原数组共享了数组中的数据，简单的说，如果通过新数组对象或原数组对象修改数组中的数据，其实修改的是同一块数据。花式索引和布尔索引也会创建新的数组对象，而且新数组复制了原数组的元素，新数组和原数组并不是共享数据的关系，这一点通过前面讲的数组的 &lt;code&gt;base&lt;/code&gt;  属性也可以了解到，在使用的时候要引起注意。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;案例通过数组切片处理图像&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#案例通过数组切片处理图像&#34;&gt;#&lt;/a&gt; 案例：通过数组切片处理图像&lt;/h4&gt;
&lt;p&gt;学习基础知识总是比较枯燥且没有成就感的，所以我们还是来个案例为大家演示下上面学习的数组索引和切片操作到底有什么用。前面我们说到过，可以用三维数组来表示图像，那么通过图像对应的三维数组进行操作，就可以实现对图像的处理，如下所示。&lt;/p&gt;
&lt;p&gt;读入图片创建三维数组对象。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;guido_image = plt.imread(&#39;guido.jpg&#39;)
plt.imshow(guido_image)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对数组的 0 轴进行反向切片，实现图像的垂直翻转。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.imshow(guido_image[::-1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005115228.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;对数组的 1 轴进行反向切片，实现图像的水平翻转。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.imshow(guido_image[:,::-1])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005115242.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;将 Guido 的头切出来。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;plt.imshow(guido_image[30:350, 90:300])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005115305.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h3 id=&#34;数组对象的方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数组对象的方法&#34;&gt;#&lt;/a&gt; 数组对象的方法&lt;/h3&gt;
&lt;h4 id=&#34;统计方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#统计方法&#34;&gt;#&lt;/a&gt; 统计方法&lt;/h4&gt;
&lt;p&gt;统计方法主要包括： &lt;code&gt;sum()&lt;/code&gt; 、 &lt;code&gt;mean()&lt;/code&gt; 、 &lt;code&gt;std()&lt;/code&gt; 、 &lt;code&gt;var()&lt;/code&gt; 、 &lt;code&gt;min()&lt;/code&gt; 、 &lt;code&gt;max()&lt;/code&gt; 、 &lt;code&gt;argmin()&lt;/code&gt; 、 &lt;code&gt;argmax()&lt;/code&gt; 、 &lt;code&gt;cumsum()&lt;/code&gt;  等，分别用于对数组中的元素求和、求平均、求标准差、求方差、找最大、找最小、求累积和等，请参考下面的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array28 = np.array([1, 2, 3, 4, 5, 5, 4, 3, 2, 1])
print(array28.sum())
print(array28.mean())
print(array28.max())
print(array28.min())
print(array28.std())
print(array28.var())
print(array28.cumsum())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;30
3.0
5
1
1.4142135623730951
2.0
[ 1  3  6 10 15 20 24 27 29 30]
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;其他方法&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他方法&#34;&gt;#&lt;/a&gt; 其他方法&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;all()&lt;/code&gt;  /  &lt;code&gt;any()&lt;/code&gt;  方法：判断数组是否所有元素都是 &lt;code&gt;True&lt;/code&gt;  / 判断数组是否有为 &lt;code&gt;True&lt;/code&gt;  的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;astype()&lt;/code&gt;  方法：拷贝数组，并将数组中的元素转换为指定的类型。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;dump()&lt;/code&gt;  方法：保存数组到文件中，可以通过 NumPy 中的 &lt;code&gt;load()&lt;/code&gt;  函数从保存的文件中加载数据创建数组。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array31.dump(&#39;array31-data&#39;)
array32 = np.load(&#39;array31-data&#39;, allow_pickle=True)
array32
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 2],
       [3, 4],
       [5, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;fill()&lt;/code&gt;  方法：向数组中填充指定的元素。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;flatten()&lt;/code&gt;  方法：将多维数组扁平化为一维数组。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array32.flatten()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([1, 2, 3, 4, 5, 6])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;nonzero()&lt;/code&gt;  方法：返回非 0 元素的索引。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;round()&lt;/code&gt;  方法：对数组中的元素做四舍五入操作。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;sort()&lt;/code&gt;  方法：对数组进行就地排序。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;array33 = np.array([35, 96, 12, 78, 66, 54, 40, 82])
array33.sort()
array33
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([12, 35, 40, 54, 66, 78, 82, 96])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;swapaxes()&lt;/code&gt;  和 &lt;code&gt;transpose()&lt;/code&gt;  方法：交换数组指定的轴。&lt;/p&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 指定需要交换的两个轴，顺序无所谓
array32.swapaxes(0, 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 3, 5],
      [2, 4, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 对于二维数组，transpose相当于实现了矩阵的转置
array32.transpose()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;array([[1, 3, 5],
      [2, 4, 6]])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;tolist()&lt;/code&gt;  方法：将数组转成 Python 中的 &lt;code&gt;list&lt;/code&gt; 。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/67.%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</guid>
            <title>环境准备</title>
            <link>https://scottalive.github.io/computer-science/python/basic/67.%E7%8E%AF%E5%A2%83%E5%87%86%E5%A4%87/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 24 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;环境准备&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#环境准备&#34;&gt;#&lt;/a&gt; 环境准备&lt;/h2&gt;
&lt;p&gt;如果希望快速开始使用 Python 处理数据科学相关的工作，建议大家直接安装 Anaconda，然后使用 Anaconda 中集成的 Notebook 或 JupyterLab 工具来编写代码。因为对于新手来说，先安装官方的 Python 解释器，再逐个安装工作中会使用到的三方库文件会比较麻烦，尤其是在 Windows 环境下，经常会因为构建工具或 DLL 文件的缺失导致安装失败，而一般新手也很难根据错误提示信息采取正确的解决措施，容易产生严重的挫败感。如果计算机上已经有 Python 解释器环境了，也可以直接使用 Python 的包管理工具 pip 安装 Jupyter，再根据实际工作的需要安装三方库，这种方式适合有一定经验的用户。&lt;/p&gt;
&lt;h3 id=&#34;安装和使用-anaconda&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装和使用-anaconda&#34;&gt;#&lt;/a&gt; 安装和使用 Anaconda&lt;/h3&gt;
&lt;p&gt;对于个人用户来说，可以从 Anaconda 的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuYW5hY29uZGEuY29tLw==&#34;&gt;官方网站&lt;/span&gt;下载它的 “个人版（Individual Edition）” 安装程序，安装完成后，你的计算机上不仅拥有了 Python 环境和 Spyder（类似于 PyCharm 的集成开发工具），还拥有了与数据科学工作相关的近 200 个工具包，包括我们上面提到 Python 数据分析三大神器。除此之外，Anaconda 还提供了一个名为 conda 的包管理工具，通过这个工具不仅可以管理 Python 的工具包，还可以用于创建运行 Python 程序的虚拟环境。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMDA1MTExNDE3LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211005111417.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;如上图所示，可以通过 Anaconda 官网提供的下载链接选择适合自己操作系统的安装程序，建议大家选择图形化的安装程序，下载完成后双击安装程序开始安装。安装过程基本使用默认设置即可，完成安装后，macOS 用户可以在 “应用程序” 或 “Launchpad” 中找到名为 “Anaconda-Navigator” 的应用程序，运行该程序可以看到如下所示的界面，我们可以在这里选择需要执行的操作。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRodWIuY29tL2phY2tmcnVlZC9teXBpYy9yYXcvbWFzdGVyLzIwMjExMDA1MTExNzI5LnBuZw==&#34;&gt;https://github.com/jackfrued/mypic/raw/master/20211005111729.png&lt;/span&gt;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;对于 Windows 用户，建议按照安装向导的提示和推荐的选项来安装 Anaconda（除了安装路径，基本也没有什么需要选择的），安装完成后可以在 “开始菜单” 中找到 “Anaconda3”。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;温馨提示&lt;/strong&gt;：可以选择 Miniconda 作为 Anaconda 的替代品，Miniconda 只会安装 Python 解释器环境和一些必要的工具，其他的三方库由用户自行选择安装。其实我个人并不喜欢 Anaconda，因为它是给小白用户使用的，我们有了 Python 以后完全可以按照自己的意愿来安装需要的三方库。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4 id=&#34;conda命令&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#conda命令&#34;&gt;#&lt;/a&gt; conda 命令&lt;/h4&gt;
&lt;p&gt;如果希望使用 conda 工具来管理依赖项或者创建项目的虚拟环境，可以在终端或命令行提示符中使用 conda 命令。Windows 用户可以在 “开始菜单” 中找到 “Anaconda3”，然后点击 “Anaconda Prompt” 来启动支持 conda 的命令行提示符。macOS 用户建议直接使用 “Anaconda-Navigator” 中的 “Environments”，通过可视化的方式对虚拟环境和依赖项进行管理。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;版本和帮助信息。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看版本： &lt;code&gt;conda -V&lt;/code&gt;  或 &lt;code&gt;conda --version&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;获取帮助： &lt;code&gt;conda -h&lt;/code&gt;  或 &lt;code&gt;conda --help&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;相关信息： &lt;code&gt;conda list&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;虚拟环境相关。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;显示所有虚拟环境： &lt;code&gt;conda env list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建虚拟环境： &lt;code&gt;conda create --name venv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定 Python 版本创建虚拟环境： &lt;code&gt;conda create --name venv python=3.7&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定 Python 版本创建虚拟环境并安装指定依赖项： &lt;code&gt;conda create --name venv python=3.7 numpy pandas&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过克隆现有虚拟环境的方式创建虚拟环境： &lt;code&gt;conda create --name venv2 --clone venv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;分享虚拟环境并重定向到指定的文件中： &lt;code&gt;conda env export &amp;gt; environment.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;通过分享的虚拟环境文件创建虚拟环境： &lt;code&gt;conda env create -f environment.yml&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;激活虚拟环境： &lt;code&gt;conda activate venv&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;退出虚拟环境： &lt;code&gt;conda deactivate&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;删除虚拟环境： &lt;code&gt;conda remove --name venv --all&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的命令中， &lt;code&gt;venv&lt;/code&gt;  和 &lt;code&gt;venv2&lt;/code&gt;  是虚拟环境文件夹的名字，可以将其替换为自己喜欢的名字，但是&lt;strong&gt;强烈建议&lt;/strong&gt;使用英文且不要出现空格或其他特殊字符。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;包（三方库或工具）管理。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;查看已经安装的包： &lt;code&gt;conda list&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;搜索指定的包： &lt;code&gt;conda search matplotlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装指定的包： &lt;code&gt;conda install matplotlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;更新指定的包： &lt;code&gt;conda update matplotlib&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;移除指定的包： &lt;code&gt;conda remove matplotlib&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：在搜索、安装和更新软件包时，默认会连接到官方网站进行操作，如果觉得速度不给力，可以将默认的官方网站替换为国内的镜像网站，推荐使用清华大学的开源镜像网站。将默认源更换为国内镜像的命令是： &lt;code&gt;conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/&lt;/code&gt;  和 &lt;code&gt;conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main&lt;/code&gt; 。如果需要换回默认源，可以使用命令 &lt;code&gt;conda config --remove-key channels&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;使用notebook&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用notebook&#34;&gt;#&lt;/a&gt; 使用 Notebook&lt;/h3&gt;
&lt;h4 id=&#34;安装和启动notebook&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装和启动notebook&#34;&gt;#&lt;/a&gt; 安装和启动 Notebook&lt;/h4&gt;
&lt;p&gt;如果已经安装了 Anaconda，macOS 用户可以按照上面所说的方式在 “Anaconda-Navigator” 中直接启动 “Jupyter Notebook”（以下统一简称为 Notebook）。Windows 用户可以在 “开始菜单” 中找到 Anaconda 文件夹，接下来选择运行文件夹中的 “Jupyter Notebook” 就可以开始数据科学的探索之旅。&lt;/p&gt;
&lt;p&gt;对于安装了 Python 环境但是没有安装 Anaconda 的用户，可以用 Python 的包管理工具 &lt;code&gt;pip&lt;/code&gt;  来安装 &lt;code&gt;jupyter&lt;/code&gt; ，然后在终端（Windows 系统为命令行提示符）中运行 &lt;code&gt;jupyter notebook&lt;/code&gt;  命令来启动 Notebook，如下所示。&lt;/p&gt;
&lt;p&gt;安装 Notebook：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install jupyter
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;安装三大神器：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install numpy pandas matplotlib
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行 Notebook：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;jupyter notebook
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Notebook 是基于网页的用于交互计算的应用程序，可以用于代码开发、文档撰写、代码运行和结果展示。简单的说，你可以在网页中直接&lt;strong&gt;编写代码&lt;/strong&gt;和&lt;strong&gt;运行代码&lt;/strong&gt;，代码的运行结果也会直接在代码块下方进行展示。如在编写代码的过程中需要编写说明文档，可在同一个页面中使用 Markdown 格式进行编写，而且可以直接看到渲染后的效果。此外，Notebook 的设计初衷是提供一个能够支持多种编程语言的工作环境，目前它能够支持超过 40 种编程语言，包括 Python、R、Julia、Scala 等。&lt;/p&gt;
&lt;p&gt;首先，我们可以创建一个用于书写 Python 代码的 Notebook，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211129131353.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;接下来，我们就可以编写代码、撰写文档和运行程序啦，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005113900.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;notebook使用技巧&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#notebook使用技巧&#34;&gt;#&lt;/a&gt; Notebook 使用技巧&lt;/h4&gt;
&lt;p&gt;如果使用 Python 做工程化的项目开发，PyCharm 肯定是最好的选择，它提供了一个集成开发环境应该具有的所有功能，尤其是智能提示、代码补全、自动纠错这类功能会让开发人员感到非常舒服。如果使用 Python 做数据科学相关的工作，Notebook 并不比 PyCharm 逊色，在数据和图表展示方面 Notebook 更加优秀。这个工具的使用非常简单，大家可以看看 Notebook 菜单栏，相信理解起来不会有太多困难，在知乎上有一篇名为&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly96aHVhbmxhbi56aGlodS5jb20vcC8zMjMyMDIxNA==&#34;&gt;《最详尽使用指南：超快上手 Jupyter Notebook》&lt;/span&gt;的文章，也可以帮助大家快速认识 Notebook。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9qdXB5dGVyLm9yZy8=&#34;&gt;Jupyter 官网&lt;/span&gt;上还有一个名为 JupyterLab 的工具，被称之为 “Next-Generation Notebook”，用户界面较之 Notebook 更加友好，有兴趣的读者可以使用 &lt;code&gt;pip install jupyterlab&lt;/code&gt;  命令来安装这个工具，然后通过 &lt;code&gt;jupyter lab&lt;/code&gt;  来启动它。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;下面我为大家介绍一些 Notebook 的使用技巧，希望能够帮助大家提升工作效率。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;自动补全。在使用 Notebook 编写代码时，按 &lt;code&gt;Tab&lt;/code&gt;  键会获得代码提示。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;获得帮助。在使用 Notebook 时，如果希望了解一个对象（如变量、类、函数等）的相关信息或使用方式，可以在对象后面使用 &lt;code&gt;?&lt;/code&gt;  并运行代码， 窗口下方会显示出对应的信息，帮助我们了解该对象，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005113848.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;搜索命名。如果只记得一个类或一个函数名字的一部分，可以使用通配符 &lt;code&gt;*&lt;/code&gt;  并配合 &lt;code&gt;?&lt;/code&gt;  进行搜索，如下所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005113836.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调用命令。可以在 Notebook 中使用 &lt;code&gt;!&lt;/code&gt;  后面跟系统命令的方式来执行系统命令。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;魔法指令。Notebook 中有很多非常有趣且有用的魔法指令，例如可以使用 &lt;code&gt;%timeit&lt;/code&gt;  测试语句的执行时间，可以使用 &lt;code&gt;%pwd&lt;/code&gt;  查看当前工作目录等。如果想查看所有的魔法指令，可以使用 &lt;code&gt;%lsmagic&lt;/code&gt; ，如果了解魔法指令的用法，可以使用 &lt;code&gt;%magic&lt;/code&gt;  来查看，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005113825.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;常用的魔法指令有：&lt;/p&gt;
&lt;p&gt;| 魔法指令                                    | 功能说明                                   |&lt;br /&gt;
| ------------------------------------------- | ------------------------------------------ |&lt;br /&gt;
|  &lt;code&gt;%pwd&lt;/code&gt;                                       | 查看当前工作目录                           |&lt;br /&gt;
|  &lt;code&gt;%ls&lt;/code&gt;                                        | 列出当前或指定文件夹下的内容               |&lt;br /&gt;
|  &lt;code&gt;%cat&lt;/code&gt;                                       | 查看指定文件的内容                         |&lt;br /&gt;
|  &lt;code&gt;%hist&lt;/code&gt;                                      | 查看输入历史                               |&lt;br /&gt;
|  &lt;code&gt;%matplotlib inline&lt;/code&gt;                         | 设置在页面中嵌入 matplotlib 输出的统计图表   |&lt;br /&gt;
|  &lt;code&gt;%config Inlinebackend.figure_format=&#39;svg&#39;&lt;/code&gt;  | 设置统计图表使用 SVG 格式（矢量图）          |&lt;br /&gt;
|  &lt;code&gt;%run&lt;/code&gt;                                       | 运行指定的程序                             |&lt;br /&gt;
|  &lt;code&gt;%load&lt;/code&gt;                                      | 加载指定的文件到单元格中                   |&lt;br /&gt;
|  &lt;code&gt;%quickref&lt;/code&gt;                                  | 显示 IPython 的快速参考                      |&lt;br /&gt;
|  &lt;code&gt;%timeit&lt;/code&gt;                                    | 多次运行代码并统计代码执行时间             |&lt;br /&gt;
|  &lt;code&gt;%prun&lt;/code&gt;                                      | 用 &lt;code&gt;cProfile.run&lt;/code&gt;  运行代码并显示分析器的输出 |&lt;br /&gt;
|  &lt;code&gt;%who&lt;/code&gt;  /  &lt;code&gt;%whos&lt;/code&gt;                             | 显示命名空间中的变量                       |&lt;br /&gt;
|  &lt;code&gt;%xdel&lt;/code&gt;                                      | 删除一个对象并清理所有对它的引用           |&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;快捷键。Notebook 中的很多操作可以通过快捷键来实现，使用快捷键可以提升工作效率。Notebook 的快捷键又可以分为命令模式下的快捷键和编辑模式下的快捷键，所谓编辑模式就是处于输入代码或撰写文档状态的模式，在编辑模式下按 &lt;code&gt;Esc&lt;/code&gt;  可以回到命令模式，在命令模式下按 &lt;code&gt;Enter&lt;/code&gt;  可以进入编辑模式。&lt;/p&gt;
&lt;p&gt;命令模式下的快捷键：&lt;/p&gt;
&lt;p&gt;| 快捷键                                   | 功能说明                                     |&lt;br /&gt;
| ---------------------------------------- | -------------------------------------------- |&lt;br /&gt;
|  &lt;code&gt;Alt&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt; （ &lt;code&gt;Option&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt; ）    | 运行当前单元格并在下面插入新的单元格         |&lt;br /&gt;
|  &lt;code&gt;Shift&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt;                         | 运行当前单元格并选中下方的单元格             |&lt;br /&gt;
|  &lt;code&gt;Ctrl&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt; （ &lt;code&gt;Command&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt; ）  | 运行当前单元格                               |&lt;br /&gt;
|  &lt;code&gt;j&lt;/code&gt;  /  &lt;code&gt;k&lt;/code&gt; 、 &lt;code&gt;Shift&lt;/code&gt;  +  &lt;code&gt;j&lt;/code&gt;  /  &lt;code&gt;Shift&lt;/code&gt;  +  &lt;code&gt;k&lt;/code&gt;  | 选中下方 / 上方单元格、连续选中下方 / 上方单元格 |&lt;br /&gt;
|  &lt;code&gt;a&lt;/code&gt;  /  &lt;code&gt;b&lt;/code&gt;                                 | 在下方 / 上方插入新的单元格                    |&lt;br /&gt;
|  &lt;code&gt;c&lt;/code&gt;  /  &lt;code&gt;x&lt;/code&gt;                                 | 复制单元格 / 剪切单元格                      |&lt;br /&gt;
|  &lt;code&gt;v&lt;/code&gt;  /  &lt;code&gt;Shift&lt;/code&gt;  +  &lt;code&gt;v&lt;/code&gt;                       | 在下方 / 上方粘贴单元格                        |&lt;br /&gt;
|  &lt;code&gt;dd&lt;/code&gt;  /  &lt;code&gt;z&lt;/code&gt;                                | 删除单元格 / 恢复删除的单元格                |&lt;br /&gt;
|  &lt;code&gt;l&lt;/code&gt;  /  &lt;code&gt;Shift&lt;/code&gt;  +  &lt;code&gt;l&lt;/code&gt;                       | 显示或隐藏当前 / 所有单元格行号                |&lt;br /&gt;
|  &lt;code&gt;ii&lt;/code&gt;  /  &lt;code&gt;00&lt;/code&gt;                               | 中断 / 重启 Notebook 内核                        |&lt;br /&gt;
|  &lt;code&gt;Space&lt;/code&gt;  /  &lt;code&gt;Shift&lt;/code&gt;  +  &lt;code&gt;Space&lt;/code&gt;               | 向下 / 向上滚动页面                            |&lt;/p&gt;
&lt;p&gt;编辑模式下的快捷键：&lt;/p&gt;
&lt;p&gt;| 快捷键                                                       | 功能说明                               |&lt;br /&gt;
| ------------------------------------------------------------ | -------------------------------------- |&lt;br /&gt;
|  &lt;code&gt;Shift&lt;/code&gt;  +  &lt;code&gt;Tab&lt;/code&gt;                                               | 获得提示信息                           |&lt;br /&gt;
|  &lt;code&gt;Ctrl&lt;/code&gt;  +  &lt;code&gt;]&lt;/code&gt; （ &lt;code&gt;Command&lt;/code&gt;  +  &lt;code&gt;]&lt;/code&gt; ）/  &lt;code&gt;Ctrl&lt;/code&gt;  +  &lt;code&gt;[&lt;/code&gt; （ &lt;code&gt;Command&lt;/code&gt;  +  &lt;code&gt;[&lt;/code&gt; ） | 增加 / 减少缩进                          |&lt;br /&gt;
|  &lt;code&gt;Alt&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt; （ &lt;code&gt;Option&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt; ）                        | 运行当前单元格并在下面插入新的单元格   |&lt;br /&gt;
|  &lt;code&gt;Shift&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt;                                             | 运行当前单元格并选中下方的单元格       |&lt;br /&gt;
|  &lt;code&gt;Ctrl&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt; （ &lt;code&gt;Command&lt;/code&gt;  +  &lt;code&gt;Enter&lt;/code&gt; ）                      | 运行当前单元格                         |&lt;br /&gt;
|  &lt;code&gt;Ctrl&lt;/code&gt;  +  &lt;code&gt;Left&lt;/code&gt;  /  &lt;code&gt;Right&lt;/code&gt; （ &lt;code&gt;Command&lt;/code&gt;  +  &lt;code&gt;Left&lt;/code&gt;  /  &lt;code&gt;Right&lt;/code&gt; ）    | 光标移到行首 / 行尾                      |&lt;br /&gt;
|  &lt;code&gt;Ctrl&lt;/code&gt;  +  &lt;code&gt;Up&lt;/code&gt;  /  &lt;code&gt;Down&lt;/code&gt; （ &lt;code&gt;Command&lt;/code&gt;  +  &lt;code&gt;Up&lt;/code&gt;  /  &lt;code&gt;Down&lt;/code&gt; ）          | 光标移动代码开头 / 结尾处                |&lt;br /&gt;
|  &lt;code&gt;Up&lt;/code&gt;  /  &lt;code&gt;Down&lt;/code&gt;                                                 | 光标上移 / 下移一行或移到上 / 下一个单元格 |&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;温馨提示&lt;/strong&gt;：如果记不住这些快捷键也没有关系，在命令模式下按 &lt;code&gt;h&lt;/code&gt;  键可以打开 Notebook 的帮助系统，马上就可以看到快捷键的设置，而且可以根据实际的需要重新编辑快捷键，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://github.com/jackfrued/mypic/raw/master/20211005113812.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/66.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/</guid>
            <title>数据分析概述</title>
            <link>https://scottalive.github.io/computer-science/python/basic/66.%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E6%A6%82%E8%BF%B0/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Wed, 23 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;数据分析概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据分析概述&#34;&gt;#&lt;/a&gt; 数据分析概述&lt;/h2&gt;
&lt;p&gt;当今世界对信息技术的依赖程度在不断加深，每天都会有大量的数据产生，我们经常会感到数据越来越多，但是要从中发现有价值的信息却越来越难。这里所说的信息，可以理解为对数据集处理之后的结果，是从数据集中提炼出的可用于其他场合的结论性的东西，而&lt;strong&gt;从原始数据中抽取出有价值的信息&lt;/strong&gt;的这个过程我们就称之为&lt;strong&gt;数据分析&lt;/strong&gt;，它是数据科学工作的一部分。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;定义：&lt;strong&gt;数据分析是有针对性的收集、加工、整理数据并采用统计、挖掘等技术对数据进行分析和解释的科学和艺术&lt;/strong&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;数据分析师的职责和技能栈&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据分析师的职责和技能栈&#34;&gt;#&lt;/a&gt; 数据分析师的职责和技能栈&lt;/h3&gt;
&lt;p&gt;HR 在发布招聘需求时，通常将数据工程、数据分析、数据挖掘等岗位都统称为数据分析岗位，但是根据工作性质的不同，又可以分为偏工程的&lt;strong&gt;数据治理方向&lt;/strong&gt;、偏业务的&lt;strong&gt;数据分析方向&lt;/strong&gt;、偏算法的&lt;strong&gt;数据挖掘方向&lt;/strong&gt;、偏开发的&lt;strong&gt;数据开发方向&lt;/strong&gt;、偏产品的&lt;strong&gt;数据产品经理&lt;/strong&gt;。我们通常所说的数据分析师主要是指&lt;strong&gt;业务数据分析师&lt;/strong&gt;，很多数据分析师的职业生涯都是从这个岗位开始的，而且这个岗位也是招聘数量最多的岗位。业务数据分析师在公司通常不属于研发部门而属于运营部门，所以这个岗位也称为&lt;strong&gt;数据运营&lt;/strong&gt;或&lt;strong&gt;商业分析&lt;/strong&gt;，这类人员通常也被称为 “BI 工程师”。通常招聘信息对这个岗位的描述（JD）是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;负责相关报表的输出。&lt;/li&gt;
&lt;li&gt;建立和优化指标体系。&lt;/li&gt;
&lt;li&gt;监控数据波动和异常，找出问题。&lt;/li&gt;
&lt;li&gt;优化和驱动业务，推动数字化运营。&lt;/li&gt;
&lt;li&gt;找出潜在的市场和产品的上升空间。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;根据上面的描述，作为业务数据分析师，我们的工作不是给领导一个简单浅显的结论，而是结合公司的业务，完成&lt;strong&gt;监控数据&lt;/strong&gt;、&lt;strong&gt;揪出异常&lt;/strong&gt;、&lt;strong&gt;找到原因&lt;/strong&gt;、&lt;strong&gt;探索趋势&lt;/strong&gt;等工作。作为数据分析师，不管是用 Python 语言、Excel、SPSS 或其他的商业智能工具，工具只是达成目标的手段，&lt;strong&gt;数据思维是核心技能&lt;/strong&gt;，从实际业务问题出发到最终&lt;strong&gt;发现数据中的商业价值&lt;/strong&gt;是终极目标。数据分析师在很多公司只是一个基础岗位，精于业务的数据分析师可以向&lt;strong&gt;数据分析经理&lt;/strong&gt;或&lt;strong&gt;数据运营总监&lt;/strong&gt;等管理岗位发展；对于熟悉机器学习算法的数据分析师来说，可以向&lt;strong&gt;数据挖掘工程师&lt;/strong&gt;或&lt;strong&gt;算法专家&lt;/strong&gt;方向发展，而这些岗位除了需要相应的数学和统计学知识，在编程能力方面也比数据分析师有更高的要求，可能还需要有大数据存储和处理的相关经验。数据治理岗位主要是帮助公司建设数据仓库或数据湖，实现数据从业务系统、埋点系统、日志系统到分析库的转移，为后续的数据分析和挖掘提供基础设施。数据治理岗位对 SQL 和 HiveSQL 有着较高的要求，要求能够熟练的使用 ETL 工具，此外可能还需要对 Hadoop 生态圈有一个很好的认知。作为数据产品经理，除了传统产品经理的技能栈之外，也需要较强的技术能力，例如要了解常用的推荐算法、机器学习模型，能够为算法的改进提供依据，能够制定相关埋点的规范和口径，虽然不需要精通各种算法，但是要站在产品的角度去考虑数据模型、指标、算法等的落地&lt;/p&gt;
&lt;p&gt;以下是我总结的数据分析师的技能栈，仅供参考。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;计算机科学（数据分析工具、编程语言、数据库）&lt;/li&gt;
&lt;li&gt;数学和统计学（数据思维、统计思维）&lt;/li&gt;
&lt;li&gt;人工智能（机器学习中的数据挖掘算法）&lt;/li&gt;
&lt;li&gt;业务理解能力（沟通、表达、经验）&lt;/li&gt;
&lt;li&gt;总结和表述能力（商业 PPT、文字总结）&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据分析的流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据分析的流程&#34;&gt;#&lt;/a&gt; 数据分析的流程&lt;/h3&gt;
&lt;p&gt;我们提到数分析这个词很多时候可能指的都是&lt;strong&gt;狭义的数据分析&lt;/strong&gt;，这类数据分析主要目标就是生成可视化报表并通过这些报表来洞察业务中的问题。&lt;strong&gt;广义的数据分析&lt;/strong&gt;还包含了数据挖掘的部分，不仅要通过数据实现对业务的监控和分析，还要利用机器学习算法，找出隐藏在数据背后的知识，并利用这些知识为将来的决策提供支撑。简单的说，&lt;strong&gt;一个完整的数据分析应该包括基本的数据分析和深入的数据挖掘两个部分&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;基本的数据分析工作一般包含以下几个方面的内容，当然因为行业和工作内容的不同会略有差异。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定目标（输入）：理解业务，确定指标口径&lt;/li&gt;
&lt;li&gt;获取数据：数据仓库、电子表格、三方接口、网络爬虫、开放数据集等&lt;/li&gt;
&lt;li&gt;清洗数据：缺失值 / 重复值 / 异常值处理、数据变换（格式化、规范化）、离散化等&lt;/li&gt;
&lt;li&gt;数据透视：运算、统计、分组、聚合、可视化&lt;/li&gt;
&lt;li&gt;数据报告（输出）：数据发布，工作成果总结汇报&lt;/li&gt;
&lt;li&gt;分析洞察（后续）：解释数据的变化，提出对应的方案&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;深入的数据挖掘工作通常包含以下几个方面的内容，当然因为行业和工作内容的不同会略有差异。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;确定目标（输入）：理解业务，明确挖掘目标&lt;/li&gt;
&lt;li&gt;数据准备：数据采集、数据描述、数据探索、质量判定等&lt;/li&gt;
&lt;li&gt;数据加工：提取数据、清洗数据、数据变换、特殊编码、降维、特征选择等&lt;/li&gt;
&lt;li&gt;数据建模：模型比较、模型选择、算法应用&lt;/li&gt;
&lt;li&gt;模型评估：交叉检验、参数调优、结果评价&lt;/li&gt;
&lt;li&gt;模型部署（输出）：模型落地、业务改进、运营监控、报告撰写&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;数据分析相关库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据分析相关库&#34;&gt;#&lt;/a&gt; 数据分析相关库&lt;/h3&gt;
&lt;p&gt;使用 Python 从事数据科学相关的工作是一个非常棒的选择，因为 Python 整个生态圈中，有大量的成熟的用于数据科学的软件包（工具库）。而且不同于其他的用于数据科学的编程语言（如：Julia、R），Python 除了可以用于数据科学，能做的事情还很多，可以说 Python 语言几乎是无所不能的。&lt;/p&gt;
&lt;h4 id=&#34;三大神器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#三大神器&#34;&gt;#&lt;/a&gt; 三大神器&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9udW1weS5vcmcv&#34;&gt;NumPy&lt;/span&gt;：支持常见的数组和矩阵操作，通过 &lt;code&gt;ndarray&lt;/code&gt;  类实现了对多维数组的封装，提供了操作这些数组的方法和函数集。由于 NumPy 内置了并行运算功能，当使用多核 CPU 时，Numpy 会自动做并行计算。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9wYW5kYXMucHlkYXRhLm9yZy8=&#34;&gt;Pandas&lt;/span&gt;：pandas 的核心是其特有的数据结构 &lt;code&gt;DataFrame&lt;/code&gt;  和 &lt;code&gt;Series&lt;/code&gt; ，这使得 pandas 可以处理包含不同类型的数据的负责表格和时间序列，这一点是 NumPy 的 &lt;code&gt;ndarray&lt;/code&gt;  做不到的。使用 pandas，可以轻松顺利的加载各种形式的数据，然后对数据进行切片、切块、处理缺失值、聚合、重塑和可视化等操作。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tYXRwbG90bGliLm9yZy8=&#34;&gt;Matplotlib&lt;/span&gt;：matplotlib 是一个包含各种绘图模块的库，能够根据我们提供的数据创建高质量的图形。此外，matplotlib 还提供了 pylab 模块，这个模块包含了很多像 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cubWF0aHdvcmtzLmNvbS9wcm9kdWN0cy9tYXRsYWIuaHRtbA==&#34;&gt;MATLAB&lt;/span&gt; 一样的绘图组件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;其他相关库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#其他相关库&#34;&gt;#&lt;/a&gt; 其他相关库&lt;/h4&gt;
&lt;ol&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zY2lweS5vcmcv&#34;&gt;SciPy&lt;/span&gt;：完善了 NumPy 的功能，封装了大量科学计算的算法，包括线性代数、稀疏矩阵、信号和图像处理、最优化问题、快速傅里叶变换等。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWFib3JuLnB5ZGF0YS5vcmcv&#34;&gt;Seaborn&lt;/span&gt;：seaborn 是基于 matplotlib 的图形可视化工具，直接使用 matplotlib 虽然可以定制出漂亮的统计图表，但是总体来说还不够简单方便，seaborn 相当于是对 matplotlib 做了封装，让用户能够以更简洁有效的方式做出各种有吸引力的统计图表。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zY2lraXQtbGVhcm4ub3JnLw==&#34;&gt;Scikit-learn&lt;/span&gt;：scikit-learn 最初是 SciPy 的一部分，它是 Python 数据科学运算的核心，提供了大量机器学习可能用到的工具，包括：数据预处理、监督学习（分类、回归）、无监督学习（聚类）、模式选择、交叉检验等。&lt;/li&gt;
&lt;li&gt;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuc3RhdHNtb2RlbHMub3JnL3N0YWJsZS9pbmRleC5odG1s&#34;&gt;Statsmodels&lt;/span&gt;：包含了经典统计学和经济计量学算法的库。&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/65.%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6Scrapy%E7%AE%80%E4%BB%8B/</guid>
            <title>爬虫框架Scrapy简介</title>
            <link>https://scottalive.github.io/computer-science/python/basic/65.%E7%88%AC%E8%99%AB%E6%A1%86%E6%9E%B6Scrapy%E7%AE%80%E4%BB%8B/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Tue, 22 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;爬虫框架scrapy简介&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#爬虫框架scrapy简介&#34;&gt;#&lt;/a&gt; 爬虫框架 Scrapy 简介&lt;/h2&gt;
&lt;p&gt;当你写了很多个爬虫程序之后，你会发现每次写爬虫程序时，都需要将页面获取、页面解析、爬虫调度、异常处理、反爬应对这些代码从头至尾实现一遍，这里面有很多工作其实都是简单乏味的重复劳动。那么，有没有什么办法可以提升我们编写爬虫代码的效率呢？答案是肯定的，那就是利用爬虫框架，而在所有的爬虫框架中，Scrapy 应该是最流行、最强大的框架。&lt;/p&gt;
&lt;h3 id=&#34;scrapy-概述&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scrapy-概述&#34;&gt;#&lt;/a&gt; Scrapy 概述&lt;/h3&gt;
&lt;p&gt;Scrapy 是基于 Python 的一个非常流行的网络爬虫框架，可以用来抓取 Web 站点并从页面中提取结构化的数据。下图展示了 Scrapy 的基本架构，其中包含了主要组件和系统的数据处理流程（图中带数字的红色箭头）。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/jackfrued/mypic/raw/master/20210824003638.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;h4 id=&#34;scrapy的组件&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#scrapy的组件&#34;&gt;#&lt;/a&gt; Scrapy 的组件&lt;/h4&gt;
&lt;p&gt;我们先来说说 Scrapy 中的组件。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Scrapy 引擎（Engine）：用来控制整个系统的数据处理流程。&lt;/li&gt;
&lt;li&gt;调度器（Scheduler）：调度器从引擎接受请求并排序列入队列，并在引擎发出请求后返还给它们。&lt;/li&gt;
&lt;li&gt;下载器（Downloader）：下载器的主要职责是抓取网页并将网页内容返还给蜘蛛（Spiders）。&lt;/li&gt;
&lt;li&gt;蜘蛛程序（Spiders）：蜘蛛是用户自定义的用来解析网页并抓取特定 URL 的类，每个蜘蛛都能处理一个域名或一组域名，简单的说就是用来定义特定网站的抓取和解析规则的模块。&lt;/li&gt;
&lt;li&gt;数据管道（Item Pipeline）：管道的主要责任是负责处理有蜘蛛从网页中抽取的数据条目，它的主要任务是清理、验证和存储数据。当页面被蜘蛛解析后，将被发送到数据管道，并经过几个特定的次序处理数据。每个数据管道组件都是一个 Python 类，它们获取了数据条目并执行对数据条目进行处理的方法，同时还需要确定是否需要在数据管道中继续执行下一步或是直接丢弃掉不处理。数据管道通常执行的任务有：清理 HTML 数据、验证解析到的数据（检查条目是否包含必要的字段）、检查是不是重复数据（如果重复就丢弃）、将解析到的数据存储到数据库（关系型数据库或 NoSQL 数据库）中。&lt;/li&gt;
&lt;li&gt;中间件（Middlewares）：中间件是介于引擎和其他组件之间的一个钩子框架，主要是为了提供自定义的代码来拓展 Scrapy 的功能，包括下载器中间件和蜘蛛中间件。&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;数据处理流程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#数据处理流程&#34;&gt;#&lt;/a&gt; 数据处理流程&lt;/h4&gt;
&lt;p&gt;Scrapy 的整个数据处理流程由引擎进行控制，通常的运转流程包括以下的步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;引擎询问蜘蛛需要处理哪个网站，并让蜘蛛将第一个需要处理的 URL 交给它。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引擎让调度器将需要处理的 URL 放在队列中。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引擎从调度那获取接下来进行爬取的页面。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;调度将下一个爬取的 URL 返回给引擎，引擎将它通过下载中间件发送到下载器。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当网页被下载器下载完成以后，响应内容通过下载中间件被发送到引擎；如果下载失败了，引擎会通知调度器记录这个 URL，待会再重新下载。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引擎收到下载器的响应并将它通过蜘蛛中间件发送到蜘蛛进行处理。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;蜘蛛处理响应并返回爬取到的数据条目，此外还要将需要跟进的新的 URL 发送给引擎。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;引擎将抓取到的数据条目送入数据管道，把新的 URL 发送给调度器放入队列中。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述操作中的第 2 步到第 8 步会一直重复直到调度器中没有需要请求的 URL，爬虫就停止工作。&lt;/p&gt;
&lt;h3 id=&#34;安装和使用scrapy&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#安装和使用scrapy&#34;&gt;#&lt;/a&gt; 安装和使用 Scrapy&lt;/h3&gt;
&lt;p&gt;可以使用 Python 的包管理工具 &lt;code&gt;pip&lt;/code&gt;  来安装 Scrapy。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;pip install scrapy
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在命令行中使用 &lt;code&gt;scrapy&lt;/code&gt;  命令创建名为 &lt;code&gt;demo&lt;/code&gt;  的项目。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;scrapy startproject demo
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;项目的目录结构如下图所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;demo
|____ demo
|________ spiders
|____________ __init__.py
|________ __init__.py
|________ items.py
|________ middlewares.py
|________ pipelines.py
|________ settings.py
|____ scrapy.cfg
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;切换到 &lt;code&gt;demo&lt;/code&gt;  目录，用下面的命令创建名为 &lt;code&gt;douban&lt;/code&gt;  的蜘蛛程序。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;scrapy genspider douban movie.douban.com
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;一个简单的例子&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#一个简单的例子&#34;&gt;#&lt;/a&gt; 一个简单的例子&lt;/h4&gt;
&lt;p&gt;接下来，我们实现一个爬取豆瓣电影 Top250 电影标题、评分和金句的爬虫。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;在 &lt;code&gt;items.py&lt;/code&gt;  的 &lt;code&gt;Item&lt;/code&gt;  类中定义字段，这些字段用来保存数据，方便后续的操作。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import scrapy


class DoubanItem(scrapy.Item):
    title = scrapy.Field()
    score = scrapy.Field()
    motto = scrapy.Field()
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 &lt;code&gt;spiders&lt;/code&gt;  文件夹中名为 &lt;code&gt;douban.py&lt;/code&gt;  的文件，它是蜘蛛程序的核心，需要我们添加解析页面的代码。在这里，我们可以通过对 &lt;code&gt;Response&lt;/code&gt;  对象的解析，获取电影的信息，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import scrapy
from scrapy import Selector, Request
from scrapy.http import HtmlResponse

from demo.items import MovieItem


class DoubanSpider(scrapy.Spider):
    name = &#39;douban&#39;
    allowed_domains = [&#39;movie.douban.com&#39;]
    start_urls = [&#39;https://movie.douban.com/top250?start=0&amp;amp;filter=&#39;]

    def parse(self, response: HtmlResponse):
        sel = Selector(response)
        movie_items = sel.css(&#39;#content &amp;gt; div &amp;gt; div.article &amp;gt; ol &amp;gt; li&#39;)
        for movie_sel in movie_items:
            item = MovieItem()
            item[&#39;title&#39;] = movie_sel.css(&#39;.title::text&#39;).extract_first()
            item[&#39;score&#39;] = movie_sel.css(&#39;.rating_num::text&#39;).extract_first()
            item[&#39;motto&#39;] = movie_sel.css(&#39;.inq::text&#39;).extract_first()
            yield item
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过上面的代码不难看出，我们可以使用 CSS 选择器进行页面解析。当然，如果你愿意也可以使用 XPath 或正则表达式进行页面解析，对应的方法分别是 &lt;code&gt;xpath&lt;/code&gt;  和 &lt;code&gt;re&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;如果还要生成后续爬取的请求，我们可以用 &lt;code&gt;yield&lt;/code&gt;  产出 &lt;code&gt;Request&lt;/code&gt;  对象。 &lt;code&gt;Request&lt;/code&gt;  对象有两个非常重要的属性，一个是 &lt;code&gt;url&lt;/code&gt; ，它代表了要请求的地址；一个是 &lt;code&gt;callback&lt;/code&gt; ，它代表了获得响应之后要执行的回调函数。我们可以将上面的代码稍作修改。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import scrapy
from scrapy import Selector, Request
from scrapy.http import HtmlResponse

from demo.items import MovieItem


class DoubanSpider(scrapy.Spider):
    name = &#39;douban&#39;
    allowed_domains = [&#39;movie.douban.com&#39;]
    start_urls = [&#39;https://movie.douban.com/top250?start=0&amp;amp;filter=&#39;]

    def parse(self, response: HtmlResponse):
        sel = Selector(response)
        movie_items = sel.css(&#39;#content &amp;gt; div &amp;gt; div.article &amp;gt; ol &amp;gt; li&#39;)
        for movie_sel in movie_items:
            item = MovieItem()
            item[&#39;title&#39;] = movie_sel.css(&#39;.title::text&#39;).extract_first()
            item[&#39;score&#39;] = movie_sel.css(&#39;.rating_num::text&#39;).extract_first()
            item[&#39;motto&#39;] = movie_sel.css(&#39;.inq::text&#39;).extract_first()
            yield item

        hrefs = sel.css(&#39;#content &amp;gt; div &amp;gt; div.article &amp;gt; div.paginator &amp;gt; a::attr(&amp;quot;href&amp;quot;)&#39;)
        for href in hrefs:
            full_url = response.urljoin(href.extract())
            yield Request(url=full_url)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;到这里，我们已经可以通过下面的命令让爬虫运转起来。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;scrapy crawl movie
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以在控制台看到爬取到的数据，如果想将这些数据保存到文件中，可以通过 &lt;code&gt;-o&lt;/code&gt;  参数来指定文件名，Scrapy 支持我们将爬取到的数据导出成 JSON、CSV、XML 等格式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;scrapy crawl moive -o result.json
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;不知大家是否注意到，通过运行爬虫获得的 JSON 文件中有 &lt;code&gt;275&lt;/code&gt;  条数据，那是因为首页被重复爬取了。要解决这个问题，可以对上面的代码稍作调整，不在 &lt;code&gt;parse&lt;/code&gt;  方法中解析获取新页面的 URL，而是通过 &lt;code&gt;start_requests&lt;/code&gt;  方法提前准备好待爬取页面的 URL，调整后的代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import scrapy
from scrapy import Selector, Request
from scrapy.http import HtmlResponse

from demo.items import MovieItem


class DoubanSpider(scrapy.Spider):
    name = &#39;douban&#39;
    allowed_domains = [&#39;movie.douban.com&#39;]

    def start_requests(self):
        for page in range(10):
            yield Request(url=f&#39;https://movie.douban.com/top250?start=&amp;#123;page * 25&amp;#125;&#39;)

    def parse(self, response: HtmlResponse):
        sel = Selector(response)
        movie_items = sel.css(&#39;#content &amp;gt; div &amp;gt; div.article &amp;gt; ol &amp;gt; li&#39;)
        for movie_sel in movie_items:
            item = MovieItem()
            item[&#39;title&#39;] = movie_sel.css(&#39;.title::text&#39;).extract_first()
            item[&#39;score&#39;] = movie_sel.css(&#39;.rating_num::text&#39;).extract_first()
            item[&#39;motto&#39;] = movie_sel.css(&#39;.inq::text&#39;).extract_first()
            yield item
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果希望完成爬虫数据的持久化，可以在数据管道中处理蜘蛛程序产生的 &lt;code&gt;Item&lt;/code&gt;  对象。例如，我们可以通过前面讲到的 &lt;code&gt;openpyxl&lt;/code&gt;  操作 Excel 文件，将数据写入 Excel 文件中，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import openpyxl

from demo.items import MovieItem


class MovieItemPipeline:

    def __init__(self):
        self.wb = openpyxl.Workbook()
        self.sheet = self.wb.active
        self.sheet.title = &#39;Top250&#39;
        self.sheet.append((&#39;名称&#39;, &#39;评分&#39;, &#39;名言&#39;))

    def process_item(self, item: MovieItem, spider):
        self.sheet.append((item[&#39;title&#39;], item[&#39;score&#39;], item[&#39;motto&#39;]))
        return item

    def close_spider(self, spider):
        self.wb.save(&#39;豆瓣电影数据.xlsx&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的 &lt;code&gt;process_item&lt;/code&gt;  和 &lt;code&gt;close_spider&lt;/code&gt;  都是回调方法（钩子函数）， 简单的说就是 Scrapy 框架会自动去调用的方法。当蜘蛛程序产生一个 &lt;code&gt;Item&lt;/code&gt;  对象交给引擎时，引擎会将该 &lt;code&gt;Item&lt;/code&gt;  对象交给数据管道，这时我们配置好的数据管道的 &lt;code&gt;parse_item&lt;/code&gt;  方法就会被执行，所以我们可以在该方法中获取数据并完成数据的持久化操作。另一个方法 &lt;code&gt;close_spider&lt;/code&gt;  是在爬虫结束运行前会自动执行的方法，在上面的代码中，我们在这个地方进行了保存 Excel 文件的操作，相信这段代码大家是很容易读懂的。&lt;/p&gt;
&lt;p&gt;总而言之，数据管道可以帮助我们完成以下操作：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;清理 HTML 数据，验证爬取的数据。&lt;/li&gt;
&lt;li&gt;丢弃重复的不必要的内容。&lt;/li&gt;
&lt;li&gt;将爬取的结果进行持久化操作。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改 &lt;code&gt;settings.py&lt;/code&gt;  文件对项目进行配置，主要需要修改以下几个配置。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 用户浏览器
USER_AGENT = &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#39;

# 并发请求数量 
CONCURRENT_REQUESTS = 4

# 下载延迟
DOWNLOAD_DELAY = 3
# 随机化下载延迟
RANDOMIZE_DOWNLOAD_DELAY = True

# 是否遵守爬虫协议
ROBOTSTXT_OBEY = True

# 配置数据管道
ITEM_PIPELINES = &amp;#123;
   &#39;demo.pipelines.MovieItemPipeline&#39;: 300,
&amp;#125;
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面配置文件中的 &lt;code&gt;ITEM_PIPELINES&lt;/code&gt;  选项是一个字典，可以配置多个处理数据的管道，后面的数字代表了执行的优先级，数字小的先执行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/64.%E4%BD%BF%E7%94%A8Selenium%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/</guid>
            <title>使用Selenium抓取网页动态内容</title>
            <link>https://scottalive.github.io/computer-science/python/basic/64.%E4%BD%BF%E7%94%A8Selenium%E6%8A%93%E5%8F%96%E7%BD%91%E9%A1%B5%E5%8A%A8%E6%80%81%E5%86%85%E5%AE%B9/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Mon, 21 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;使用selenium抓取网页动态内容&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用selenium抓取网页动态内容&#34;&gt;#&lt;/a&gt; 使用 Selenium 抓取网页动态内容&lt;/h2&gt;
&lt;p&gt;根据权威机构发布的全球互联网可访问性审计报告，全球约有四分之三的网站其内容或部分内容是通过 JavaScript 动态生成的，这就意味着在浏览器窗口中 “查看网页源代码” 时无法在 HTML 代码中找到这些内容，也就是说我们之前用的抓取数据的方式无法正常运转了。解决这样的问题基本上有两种方案，一是获取提供动态内容的数据接口，这种方式也适用于抓取手机 App 的数据；另一种是通过自动化测试工具 Selenium 运行浏览器获取渲染后的动态内容。对于第一种方案，我们可以使用浏览器的 “开发者工具” 或者更为专业的抓包工具（如：Charles、Fiddler、Wireshark 等）来获取到数据接口，后续的操作跟上一个章节中讲解的获取 “360 图片” 网站的数据是一样的，这里我们不再进行赘述。这一章我们重点讲解如何使用自动化测试工具 Selenium 来获取网站的动态内容。&lt;/p&gt;
&lt;h3 id=&#34;selenium-介绍&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selenium-介绍&#34;&gt;#&lt;/a&gt; Selenium 介绍&lt;/h3&gt;
&lt;p&gt;Selenium 是一个自动化测试工具，利用它可以驱动浏览器执行特定的行为，最终帮助爬虫开发者获取到网页的动态内容。简单的说，只要我们在浏览器窗口中能够看到的内容，都可以使用 Selenium 获取到，对于那些使用了 JavaScript 动态渲染技术的网站，Selenium 会是一个重要的选择。下面，我们还是以 Chrome 浏览器为例，来讲解 Selenium 的用法，大家需要先安装 Chrome 浏览器并下载它的驱动。Chrome 浏览器的驱动程序可以在&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9jaHJvbWVkcml2ZXIuY2hyb21pdW0ub3JnL2Rvd25sb2Fkcw==&#34;&gt; ChromeDriver 官网&lt;/span&gt;进行下载，驱动的版本要跟浏览器的版本对应，如果没有完全对应的版本，就选择版本代号最为接近的版本。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vamFja2ZydWVkL215cGljL3Jhdy9tYXN0ZXIvMjAyMjAzMTAxMzQ1NTgucG5n&#34;&gt;https://gitee.com/jackfrued/mypic/raw/master/20220310134558.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom: 35%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;h3 id=&#34;使用selenium&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用selenium&#34;&gt;#&lt;/a&gt; 使用 Selenium&lt;/h3&gt;
&lt;p&gt;我们可以先通过 &lt;code&gt;pip&lt;/code&gt;  来安装 Selenium，命令如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;pip install selenium
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;加载页面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#加载页面&#34;&gt;#&lt;/a&gt; 加载页面&lt;/h4&gt;
&lt;p&gt;接下来，我们通过下面的代码驱动 Chrome 浏览器打开百度。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from selenium import webdriver

# 创建Chrome浏览器对象
browser = webdriver.Chrome()
# 加载指定的页面
browser.get(&#39;https://www.baidu.com/&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果不愿意使用 Chrome 浏览器，也可以修改上面的代码操控其他浏览器，只需创建对应的浏览器对象（如 Firefox、Safari 等）即可。运行上面的程序，如果看到如下所示的错误提示，那是说明我们还没有将 Chrome 浏览器的驱动添加到 PATH 环境变量中，也没有在程序中指定 Chrome 浏览器驱动所在的位置。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Shell&#34;&gt;selenium.common.exceptions.WebDriverException: Message: &#39;chromedriver&#39; executable needs to be in PATH. Please see https://sites.google.com/a/chromium.org/chromedriver/home
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;解决这个问题的办法有三种：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;将下载的 ChromeDriver 放到已有的 PATH 环境变量下，建议直接跟 Python 解释器放在同一个目录，因为之前安装 Python 的时候我们已经将 Python 解释器的路径放到 PATH 环境变量中了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;将 ChromeDriver 放到项目虚拟环境下的  &lt;code&gt;bin&lt;/code&gt;  文件夹中（Windows 系统对应的目录是  &lt;code&gt;Scripts&lt;/code&gt; ），这样 ChromeDriver 就跟虚拟环境下的 Python 解释器在同一个位置，肯定是能够找到的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;修改上面的代码，在创建 Chrome 对象时，通过 &lt;code&gt;service&lt;/code&gt;  参数配置 &lt;code&gt;Service&lt;/code&gt;  对象，并通过创建 &lt;code&gt;Service&lt;/code&gt;  对象的 &lt;code&gt;executable_path&lt;/code&gt;  参数指定 ChromeDriver 所在的位置，如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from selenium import webdriver
from selenium.webdriver.chrome.service import Service

browser = webdriver.Chrome(service=Service(executable_path=&#39;venv/bin/chromedriver&#39;))
browser.get(&#39;https://www.baidu.com/&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h4 id=&#34;查找元素和模拟用户行为&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#查找元素和模拟用户行为&#34;&gt;#&lt;/a&gt; 查找元素和模拟用户行为&lt;/h4&gt;
&lt;p&gt;接下来，我们可以尝试模拟用户在百度首页的文本框输入搜索关键字并点击 “百度一下” 按钮。在完成页面加载后，可以通过 &lt;code&gt;Chrome&lt;/code&gt;  对象的 &lt;code&gt;find_element&lt;/code&gt;  和 &lt;code&gt;find_elements&lt;/code&gt;  方法来获取页面元素，Selenium 支持多种获取元素的方式，包括：CSS 选择器、XPath、元素名字（标签名）、元素 ID、类名等，前者可以获取单个页面元素（ &lt;code&gt;WebElement&lt;/code&gt;  对象），后者可以获取多个页面元素构成的列表。获取到 &lt;code&gt;WebElement&lt;/code&gt;  对象以后，可以通过 &lt;code&gt;send_keys&lt;/code&gt;  来模拟用户输入行为，可以通过 &lt;code&gt;click&lt;/code&gt;  来模拟用户点击操作，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from selenium import webdriver
from selenium.webdriver.common.by import By

browser = webdriver.Chrome()
browser.get(&#39;https://www.baidu.com/&#39;)
# 通过元素ID获取元素
kw_input = browser.find_element(By.ID, &#39;kw&#39;)
# 模拟用户输入行为
kw_input.send_keys(&#39;Python&#39;)
# 通过CSS选择器获取元素
su_button = browser.find_element(By.CSS_SELECTOR, &#39;#su&#39;)
# 模拟用户点击行为
su_button.click()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;如果要执行一个系列动作，例如模拟拖拽操作，可以创建 &lt;code&gt;ActionChains&lt;/code&gt;  对象，有兴趣的读者可以自行研究。&lt;/p&gt;
&lt;h4 id=&#34;隐式等待和显式等待&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#隐式等待和显式等待&#34;&gt;#&lt;/a&gt; 隐式等待和显式等待&lt;/h4&gt;
&lt;p&gt;这里还有一个细节需要大家知道，网页上的元素可能是动态生成的，在我们使用 &lt;code&gt;find_element&lt;/code&gt;  或 &lt;code&gt;find_elements&lt;/code&gt;  方法获取的时候，可能还没有完成渲染，这时会引发 &lt;code&gt;NoSuchElementException&lt;/code&gt;  错误。为了解决这个问题，我们可以使用隐式等待的方式，通过设置等待时间让浏览器完成对页面元素的渲染。除此之外，我们还可以使用显示等待，通过创建 &lt;code&gt;WebDriverWait&lt;/code&gt;  对象，并设置等待时间和条件，当条件没有满足时，我们可以先等待再尝试进行后续的操作，具体的代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait

browser = webdriver.Chrome()
# 设置浏览器窗口大小
browser.set_window_size(1200, 800)
browser.get(&#39;https://www.baidu.com/&#39;)
# 设置隐式等待时间为10秒
browser.implicitly_wait(10)
kw_input = browser.find_element(By.ID, &#39;kw&#39;)
kw_input.send_keys(&#39;Python&#39;)
su_button = browser.find_element(By.CSS_SELECTOR, &#39;#su&#39;)
su_button.click()
# 创建显示等待对象
wait_obj = WebDriverWait(browser, 10)
# 设置等待条件（等搜索结果的div出现）
wait_obj.until(
    expected_conditions.presence_of_element_located(
        (By.CSS_SELECTOR, &#39;#content_left&#39;)
    )
)
# 截屏
browser.get_screenshot_as_file(&#39;python_result.png&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面设置的等待条件 &lt;code&gt;presence_of_element_located&lt;/code&gt;  表示等待指定元素出现，下面的表格列出了常用的等待条件及其含义。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;等待条件&lt;/th&gt;
&lt;th&gt;具体含义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title_is / title_contains&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;标题是指定的内容 / 标题包含指定的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;visibility_of&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;presence_of_element_located&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定位的元素加载完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;visibility_of_element_located&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定位的元素变得可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;invisibility_of_element_located&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定位的元素变得不可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;presence_of_all_elements_located&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定位的所有元素加载完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;text_to_be_present_in_element&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素包含指定的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;text_to_be_present_in_element_value&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素的 &lt;code&gt;value&lt;/code&gt;  属性包含指定的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;frame_to_be_available_and_switch_to_it&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;载入并切换到指定的内部窗口&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;element_to_be_clickable&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素可点击&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;element_to_be_selected&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素被选中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;element_located_to_be_selected&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;定位的元素被选中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;alert_is_present&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;出现 Alert 弹窗&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;执行javascript代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#执行javascript代码&#34;&gt;#&lt;/a&gt; 执行 JavaScript 代码&lt;/h4&gt;
&lt;p&gt;对于使用瀑布式加载的页面，如果希望在浏览器窗口中加载更多的内容，可以通过浏览器对象的 &lt;code&gt;execute_scripts&lt;/code&gt;  方法执行 JavaScript 代码来实现。对于一些高级的爬取操作，也很有可能会用到类似的操作，如果你的爬虫代码需要 JavaScript 的支持，建议先对 JavaScript 进行适当的了解，尤其是 JavaScript 中的 BOM 和 DOM 操作。我们在上面的代码中截屏之前加入下面的代码，这样就可以利用 JavaScript 将网页滚到最下方。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 执行JavaScript代码
browser.execute_script(&#39;document.documentElement.scrollTop = document.documentElement.scrollHeight&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;selenium反爬的破解&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#selenium反爬的破解&#34;&gt;#&lt;/a&gt; Selenium 反爬的破解&lt;/h4&gt;
&lt;p&gt;有一些网站专门针对 Selenium 设置了反爬措施，因为使用 Selenium 驱动的浏览器，在控制台中可以看到如下所示的 &lt;code&gt;webdriver&lt;/code&gt;  属性值为 &lt;code&gt;true&lt;/code&gt; ，如果要绕过这项检查，可以在加载页面之前，先通过执行 JavaScript 代码将其修改为 &lt;code&gt;undefined&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vamFja2ZydWVkL215cGljL3Jhdy9tYXN0ZXIvMjAyMjAzMTAxNTQyNDYucG5n&#34;&gt;https://gitee.com/jackfrued/mypic/raw/master/20220310154246.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;另一方面，我们还可以将浏览器窗口上的 “Chrome 正受到自动测试软件的控制” 隐藏掉，完整的代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;# 创建Chrome参数对象
options = webdriver.ChromeOptions()
# 添加试验性参数
options.add_experimental_option(&#39;excludeSwitches&#39;, [&#39;enable-automation&#39;])
options.add_experimental_option(&#39;useAutomationExtension&#39;, False)
# 创建Chrome浏览器对象并传入参数
browser = webdriver.Chrome(options=options)
# 执行Chrome开发者协议命令（在加载页面时执行指定的JavaScript代码）
browser.execute_cdp_cmd(
    &#39;Page.addScriptToEvaluateOnNewDocument&#39;,
    &amp;#123;&#39;source&#39;: &#39;Object.defineProperty(navigator, &amp;quot;webdriver&amp;quot;, &amp;#123;get: () =&amp;gt; undefined&amp;#125;)&#39;&amp;#125;
)
browser.set_window_size(1200, 800)
browser.get(&#39;https://www.baidu.com/&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;无头浏览器&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#无头浏览器&#34;&gt;#&lt;/a&gt; 无头浏览器&lt;/h4&gt;
&lt;p&gt;很多时候，我们在爬取数据时并不需要看到浏览器窗口，只要有 Chrome 浏览器以及对应的驱动程序，我们的爬虫就能够运转起来。如果不想看到浏览器窗口，我们可以通过下面的方式设置使用无头浏览器。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;options = webdriver.ChromeOptions()
options.add_argument(&#39;--headless&#39;)
browser = webdriver.Chrome(options=options)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;api参考&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#api参考&#34;&gt;#&lt;/a&gt; API 参考&lt;/h3&gt;
&lt;p&gt;Selenium 相关的知识还有很多，我们在此就不一一赘述了，下面为大家罗列一些浏览器对象和 &lt;code&gt;WebElement&lt;/code&gt;  对象常用的属性和方法。具体的内容大家还可以参考 Selenium &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9zZWxlbml1bS1weXRob24temgucmVhZHRoZWRvY3MuaW8vZW4vbGF0ZXN0L2luZGV4Lmh0bWw=&#34;&gt;官方文档的中文翻译&lt;/span&gt;。&lt;/p&gt;
&lt;h4 id=&#34;浏览器对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#浏览器对象&#34;&gt;#&lt;/a&gt; 浏览器对象&lt;/h4&gt;
&lt;p&gt;表 1. 常用属性&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;current_url&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前页面的 URL&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;current_window_handle&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前窗口的句柄（引用）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浏览器的名称&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;orientation&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前设备的方向（横屏、竖屏）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;page_source&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前页面的源代码（包括动态内容）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;当前页面的标题&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;window_handles&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;浏览器打开的所有窗口的句柄&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表 2. 常用方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;back&lt;/code&gt;  /  &lt;code&gt;forward&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;在浏览历史记录中后退 / 前进&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;close&lt;/code&gt;  /  &lt;code&gt;quit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;关闭当前浏览器窗口 / 退出浏览器实例&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;加载指定 URL 的页面到浏览器中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;maximize_window&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;将浏览器窗口最大化&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;refresh&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;刷新当前页面&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;set_page_load_timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置页面加载超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;set_script_timeout&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置 JavaScript 执行超时时间&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;implicit_wait&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;设置等待元素被找到或目标指令完成&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_cookie&lt;/code&gt;  /  &lt;code&gt;get_cookies&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;获取指定的 Cookie / 获取所有 Cookie&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;add_cookie&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;添加 Cookie 信息&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;delete_cookie&lt;/code&gt;  /  &lt;code&gt;delete_all_cookies&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;删除指定的 Cookie / 删除所有 Cookie&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;find_element&lt;/code&gt;  /  &lt;code&gt;find_elements&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;查找单个元素 / 查找一系列元素&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id=&#34;webelement对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#webelement对象&#34;&gt;#&lt;/a&gt; WebElement 对象&lt;/h4&gt;
&lt;p&gt;表 1. WebElement 常用属性&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;属性名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;location&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素的位置&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;size&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素的尺寸&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;text&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素的文本内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;id&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素的 ID&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;tag_name&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;元素的标签名&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;表 2. 常用方法&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;方法名&lt;/th&gt;
&lt;th&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;clear&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;清空文本框或文本域中的内容&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;click&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;点击元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;get_attribute&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;获取元素的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is_displayed&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断元素对于用户是否可见&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is_enabled&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断元素是否处于可用状态&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;is_selected&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;判断元素（单选框和复选框）是否被选中&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;send_keys&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;模拟输入文本&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;submit&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;提交表单&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;value_of_css_property&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;获取指定的 CSS 属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;find_element&lt;/code&gt;  /  &lt;code&gt;find_elements&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;获取单个子元素 / 获取一系列子元素&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;screenshot&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;为元素生成快照&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h3 id=&#34;简单案例&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单案例&#34;&gt;#&lt;/a&gt; 简单案例&lt;/h3&gt;
&lt;p&gt;下面的例子演示了如何使用 Selenium 从 “360 图片” 网站搜索和下载图片。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import os
import time
from concurrent.futures import ThreadPoolExecutor

import requests
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys

DOWNLOAD_PATH = &#39;images/&#39;


def download_picture(picture_url: str):
    &amp;quot;&amp;quot;&amp;quot;
    下载保存图片
    :param picture_url: 图片的URL
    &amp;quot;&amp;quot;&amp;quot;
    filename = picture_url[picture_url.rfind(&#39;/&#39;) + 1:]
    resp = requests.get(picture_url)
    with open(os.path.join(DOWNLOAD_PATH, filename), &#39;wb&#39;) as file:
        file.write(resp.content)


if not os.path.exists(DOWNLOAD_PATH):
    os.makedirs(DOWNLOAD_PATH)
browser = webdriver.Chrome()
browser.get(&#39;https://image.so.com/z?ch=beauty&#39;)
browser.implicitly_wait(10)
kw_input = browser.find_element(By.CSS_SELECTOR, &#39;input[name=q]&#39;)
kw_input.send_keys(&#39;苍老师&#39;)
kw_input.send_keys(Keys.ENTER)
for _ in range(10):
    browser.execute_script(
        &#39;document.documentElement.scrollTop = document.documentElement.scrollHeight&#39;
    )
    time.sleep(1)
imgs = browser.find_elements(By.CSS_SELECTOR, &#39;div.waterfall img&#39;)
with ThreadPoolExecutor(max_workers=32) as pool:
    for img in imgs:
        pic_url = img.get_attribute(&#39;src&#39;)
        pool.submit(download_picture, pic_url)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;运行上面的代码，检查指定的目录下是否下载了根据关键词搜索到的图片。&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-3/</guid>
            <title>Python中的并发编程-3</title>
            <link>https://scottalive.github.io/computer-science/python/basic/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-3/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Sun, 20 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;python中的并发编程-3&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中的并发编程-3&#34;&gt;#&lt;/a&gt; Python 中的并发编程 - 3&lt;/h2&gt;
&lt;p&gt;爬虫是典型的 I/O 密集型任务，I/O 密集型任务的特点就是程序会经常性的因为 I/O 操作而进入阻塞状态，比如我们之前使用 &lt;code&gt;requests&lt;/code&gt;  获取页面代码或二进制内容，发出一个请求之后，程序必须要等待网站返回响应之后才能继续运行，如果目标网站不是很给力或者网络状况不是很理想，那么等待响应的时间可能会很久，而在这个过程中整个程序是一直阻塞在那里，没有做任何的事情。通过前面的课程，我们已经知道了可以通过多线程的方式为爬虫提速，使用多线程的本质就是，当一个线程阻塞的时候，程序还有其他的线程可以继续运转，因此整个程序就不会在阻塞和等待中浪费了大量的时间。&lt;/p&gt;
&lt;p&gt;事实上，还有一种非常适合 I/O 密集型任务的并发编程方式，我们称之为异步编程，你也可以将它称为异步 I/O。这种方式并不需要启动多个线程或多个进程来实现并发，它是通过多个子程序相互协作的方式来提升 CPU 的利用率，解决了 I/O 密集型任务 CPU  利用率很低的问题，我一般将这种方式称为 “协作式并发”。这里，我不打算探讨操作系统的各种 I/O 模式，因为这对很多读者来说都太过抽象；但是我们得先抛出两组概念给大家，一组叫做 “阻塞” 和 “非阻塞”，一组叫做 “同步” 和 “异步”。&lt;/p&gt;
&lt;h3 id=&#34;基本概念&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#基本概念&#34;&gt;#&lt;/a&gt; 基本概念&lt;/h3&gt;
&lt;h4 id=&#34;阻塞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#阻塞&#34;&gt;#&lt;/a&gt; 阻塞&lt;/h4&gt;
&lt;p&gt;阻塞状态指程序未得到所需计算资源时被挂起的状态。程序在等待某个操作完成期间，自身无法继续处理其他的事情，则称该程序在该操作上是阻塞的。阻塞随时都可能发生，最典型的就是 I/O 中断（包括网络 I/O 、磁盘 I/O 、用户输入等）、休眠操作、等待某个线程执行结束，甚至包括在 CPU 切换上下文时，程序都无法真正的执行，这就是所谓的阻塞。&lt;/p&gt;
&lt;h4 id=&#34;非阻塞&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#非阻塞&#34;&gt;#&lt;/a&gt; 非阻塞&lt;/h4&gt;
&lt;p&gt;程序在等待某操作过程中，自身不被阻塞，可以继续处理其他的事情，则称该程序在该操作上是非阻塞的。非阻塞并不是在任何程序级别、任何情况下都可以存在的。仅当程序封装的级别可以囊括独立的子程序单元时，它才可能存在非阻塞状态。显然，某个操作的阻塞可能会导程序耗时以及效率低下，所以我们会希望把它变成非阻塞的。&lt;/p&gt;
&lt;h4 id=&#34;同步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#同步&#34;&gt;#&lt;/a&gt; 同步&lt;/h4&gt;
&lt;p&gt;不同程序单元为了完成某个任务，在执行过程中需靠某种通信方式以协调一致，我们称这些程序单元是同步执行的。例如前面讲过的给银行账户存钱的操作，我们在代码中使用了 “锁” 作为通信信号，让多个存钱操作强制排队顺序执行，这就是所谓的同步。&lt;/p&gt;
&lt;h4 id=&#34;异步&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步&#34;&gt;#&lt;/a&gt; 异步&lt;/h4&gt;
&lt;p&gt;不同程序单元在执行过程中无需通信协调，也能够完成一个任务，这种方式我们就称之为异步。例如，使用爬虫下载页面时，调度程序调用下载程序后，即可调度其他任务，而无需与该下载任务保持通信以协调行为。不同网页的下载、保存等操作都是不相关的，也无需相互通知协调。很显然，异步操作的完成时刻和先后顺序并不能确定。&lt;/p&gt;
&lt;p&gt;很多人都不太能准确的把握这几个概念，这里我们简单的总结一下，同步与异步的关注点是&lt;strong&gt;消息通信机制&lt;/strong&gt;，最终表现出来的是 “有序” 和 “无序” 的区别；阻塞和非阻塞的关注点是&lt;strong&gt;程序在等待消息时状态&lt;/strong&gt;，最终表现出来的是程序在等待时能不能做点别的。如果想深入理解这些内容，推荐大家阅读经典著作&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pdGVtLmpkLmNvbS8xMTg4MDA0Ny5odG1s&#34;&gt;《UNIX 网络编程》&lt;/span&gt;，这本书非常的赞。&lt;/p&gt;
&lt;h3 id=&#34;生成器和协程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#生成器和协程&#34;&gt;#&lt;/a&gt; 生成器和协程&lt;/h3&gt;
&lt;p&gt;前面我们说过，异步编程是一种 “协作式并发”，即通过多个子程序相互协作的方式提升 CPU 的利用率，从而减少程序在阻塞和等待中浪费的时间，最终达到并发的效果。我们可以将多个相互协作的子程序称为 “协程”，它是实现异步编程的关键。在介绍协程之前，我们先通过下面的代码，看看什么是生成器。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;def fib(max_count):
    a, b = 0, 1
    for _ in range(max_count):
        a, b = b, a + b
        yield a
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面我们编写了一个生成斐波那契数列的生成器，调用上面的 &lt;code&gt;fib&lt;/code&gt;  函数并不是执行该函数获得返回值，因为 &lt;code&gt;fib&lt;/code&gt;  函数中有一个特殊的关键字 &lt;code&gt;yield&lt;/code&gt; 。这个关键字使得 &lt;code&gt;fib&lt;/code&gt;  函数跟普通的函数有些区别，调用该函数会得到一个生成器对象，我们可以通过下面的代码来验证这一点。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;gen_obj = fib(20)
print(gen_obj)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;generator object fib at 0x106daee40&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;我们可以使用内置函数 &lt;code&gt;next&lt;/code&gt;  从生成器对象中获取斐波那契数列的值，也可以通过 &lt;code&gt;for-in&lt;/code&gt;  循环对生成器能够提供的值进行遍历，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;for value in gen_obj:
    print(value)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;生成器经过预激活，就是一个协程，它可以跟其他子程序协作。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;def calc_average():
    total, counter = 0, 0
    avg_value = None
    while True:
        curr_value = yield avg_value
        total += curr_value
        counter += 1
        avg_value = total / counter


def main():
    obj = calc_average()
    # 生成器预激活
    obj.send(None)
    for _ in range(5):
        print(obj.send(float(input())))


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的 &lt;code&gt;main&lt;/code&gt;  函数首先通过生成器对象的 &lt;code&gt;send&lt;/code&gt;  方法发送一个 &lt;code&gt;None&lt;/code&gt;  值来将其激活为协程，也可以通过 &lt;code&gt;next(obj)&lt;/code&gt;  达到同样的效果。接下来，协程对象会接收 &lt;code&gt;main&lt;/code&gt;  函数发送的数据并产出（ &lt;code&gt;yield&lt;/code&gt; ）数据的平均值。通过上面的例子，不知道大家是否看出两段子程序是怎么 “协作” 的。&lt;/p&gt;
&lt;h3 id=&#34;异步函数&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步函数&#34;&gt;#&lt;/a&gt; 异步函数&lt;/h3&gt;
&lt;p&gt;Python 3.5 版本中，引入了两个非常有意思的元素，一个叫 &lt;code&gt;async&lt;/code&gt; ，一个叫 &lt;code&gt;await&lt;/code&gt; ，它们在 Python 3.7 版本中成为了正式的关键字。通过这两个关键字，可以简化协程代码的编写，可以用更为简单的方式让多个子程序很好的协作起来。我们通过一个例子来加以说明，请大家先看看下面的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import time


def display(num):
    time.sleep(1)
    print(num)


def main():
    start = time.time()
    for i in range(1, 10):
        display(i)
    end = time.time()
    print(f&#39;&amp;#123;end - start:.3f&amp;#125;秒&#39;)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的代码每次执行都会依次输出 &lt;code&gt;1&lt;/code&gt;  到 &lt;code&gt;9&lt;/code&gt;  的数字，每个间隔 &lt;code&gt;1&lt;/code&gt;  秒钟，整个代码需要执行大概需要 &lt;code&gt;9&lt;/code&gt;  秒多的时间，这一点我相信大家都能看懂。不知道大家是否意识到，这段代码就是以同步和阻塞的方式执行的，同步可以从代码的输出看出来，而阻塞是指在调用 &lt;code&gt;display&lt;/code&gt;  函数发生休眠时，整个代码的其他部分都不能继续执行，必须等待休眠结束。&lt;/p&gt;
&lt;p&gt;接下来，我们尝试用异步的方式改写上面的代码，让 &lt;code&gt;display&lt;/code&gt;  函数以异步的方式运转。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import asyncio
import time


async def display(num):
    await asyncio.sleep(1)
    print(num)


def main():
    start = time.time()
    objs = [display(i) for i in range(1, 10)]
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.wait(objs))
    loop.close()
    end = time.time()
    print(f&#39;&amp;#123;end - start:.3f&amp;#125;秒&#39;)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;Python 中的 &lt;code&gt;asyncio&lt;/code&gt;  模块提供了对异步 I/O 的支持。上面的代码中，我们首先在 &lt;code&gt;display&lt;/code&gt;  函数前面加上了 &lt;code&gt;async&lt;/code&gt;  关键字使其变成一个异步函数，调用异步函数不会执行函数体而是获得一个协程对象。我们将 &lt;code&gt;display&lt;/code&gt;  函数中的 &lt;code&gt;time.sleep(1)&lt;/code&gt;  修改为 &lt;code&gt;await asyncio.sleep(1)&lt;/code&gt; ，二者的区别在于，后者不会让整个代码陷入阻塞，因为 &lt;code&gt;await&lt;/code&gt;  操作会让其他协作的子程序有获得 CPU 资源而得以运转的机会。为了让这些子程序可以协作起来，我们需要将他们放到一个事件循环（实现消息分派传递的系统）上，因为&lt;strong&gt;当协程遭遇 I/O 操作阻塞时，就会到事件循环中监听 I/O 操作是否完成，并注册自身的上下文以及自身的唤醒函数（以便恢复执行），之后该协程就变为阻塞状态&lt;/strong&gt;。上面的第 12 行代码创建了 &lt;code&gt;9&lt;/code&gt;  个协程对象并放到一个列表中，第 13 行代码通过 &lt;code&gt;asyncio&lt;/code&gt;  模块的 &lt;code&gt;get_event_loop&lt;/code&gt;  函数获得了系统的事件循环，第 14 行通过 &lt;code&gt;asyncio&lt;/code&gt;  模块的 &lt;code&gt;run_until_complete&lt;/code&gt;  函数将协程对象挂载到事件循环上。执行上面的代码会发现， &lt;code&gt;9&lt;/code&gt;  个分别会阻塞 &lt;code&gt;1&lt;/code&gt;  秒钟的协程总共只阻塞了约 &lt;code&gt;1&lt;/code&gt;  秒种的时间，因为&lt;strong&gt;阻塞的协程对象会放弃对 CPU 的占有而不是让 CPU 处于闲置状态，这种方式大大的提升了 CPU 的利用率&lt;/strong&gt;。而且我们还会注意到，数字并不是按照从 &lt;code&gt;1&lt;/code&gt;  到 &lt;code&gt;9&lt;/code&gt;  的顺序打印输出的，这正是我们想要的结果，说明它们是&lt;strong&gt;异步执行&lt;/strong&gt;的。对于爬虫这样的 I/O 密集型任务来说，这种协作式并发在很多场景下是比使用多线程更好的选择，因为这种做法减少了管理和维护多个线程以及多个线程切换所带来的开销。&lt;/p&gt;
&lt;h3 id=&#34;aiohttp库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#aiohttp库&#34;&gt;#&lt;/a&gt; aiohttp 库&lt;/h3&gt;
&lt;p&gt;我们之前使用的 &lt;code&gt;requests&lt;/code&gt;  三方库并不支持异步 I/O，如果希望使用异步 I/O 的方式来加速爬虫代码的执行，我们可以安装和使用名为 &lt;code&gt;aiohttp&lt;/code&gt;  的三方库。&lt;/p&gt;
&lt;p&gt;安装 &lt;code&gt;aiohttp&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install aiohttp
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面的代码使用 &lt;code&gt;aiohttp&lt;/code&gt;  抓取了 &lt;code&gt;10&lt;/code&gt;  个网站的首页并解析出它们的标题。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import asyncio
import re

import aiohttp
from aiohttp import ClientSession

TITLE_PATTERN = re.compile(r&#39;&amp;lt;title.*?&amp;gt;(.*?)&amp;lt;/title&amp;gt;&#39;, re.DOTALL)


async def fetch_page_title(url):
    async with aiohttp.ClientSession(headers=&amp;#123;
        &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36&#39;,
    &amp;#125;) as session:  # type: ClientSession
        async with session.get(url, ssl=False) as resp:
            if resp.status == 200:
                html_code = await resp.text()
                matcher = TITLE_PATTERN.search(html_code)
                title = matcher.group(1).strip()
                print(title)


def main():
    urls = [
        &#39;https://www.python.org/&#39;,
        &#39;https://www.jd.com/&#39;,
        &#39;https://www.baidu.com/&#39;,
        &#39;https://www.taobao.com/&#39;,
        &#39;https://git-scm.com/&#39;,
        &#39;https://www.sohu.com/&#39;,
        &#39;https://gitee.com/&#39;,
        &#39;https://www.amazon.com/&#39;,
        &#39;https://www.usa.gov/&#39;,
        &#39;https://www.nasa.gov/&#39;
    ]
    objs = [fetch_page_title(url) for url in urls]
    loop = asyncio.get_event_loop()
    loop.run_until_complete(asyncio.wait(objs))
    loop.close()


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;输出：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;京东(JD.COM)-正品低价、品质保障、配送及时、轻松购物！
搜狐
淘宝网 - 淘！我喜欢
百度一下，你就知道
Gitee - 基于 Git 的代码托管和研发协作平台
Git
NASA
Official Guide to Government Information and Services   &amp;amp;#124; USAGov
Amazon.com. Spend less. Smile more.
Welcome to Python.org
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从上面的输出可以看出，网站首页标题的输出顺序跟它们的 URL 在列表中的顺序没有关系。代码的第 11 行到第 13 行创建了 &lt;code&gt;ClientSession&lt;/code&gt;  对象，通过它的 &lt;code&gt;get&lt;/code&gt;  方法可以向指定的 URL 发起请求，如第 14 行所示，跟 &lt;code&gt;requests&lt;/code&gt;  中的 &lt;code&gt;Session&lt;/code&gt;  对象并没有本质区别，唯一的区别是这里使用了异步上下文。代码第 16 行的 &lt;code&gt;await&lt;/code&gt;  会让因为 I/O 操作阻塞的子程序放弃对 CPU 的占用，这使得其他的子程序可以运转起来去抓取页面。代码的第 17 行和第 18 行使用了正则表达式捕获组操作解析网页标题。 &lt;code&gt;fetch_page_title&lt;/code&gt;  是一个被 &lt;code&gt;async&lt;/code&gt;  关键字修饰的异步函数，调用该函数会获得协程对象，如代码第 35 行所示。后面的代码跟之前的例子没有什么区别，相信大家能够理解。&lt;/p&gt;
&lt;p&gt;大家可以尝试将 &lt;code&gt;aiohttp&lt;/code&gt;  换回到 &lt;code&gt;requests&lt;/code&gt; ，看看不使用异步 I/O 也不使用多线程，到底和上面的代码有什么区别，相信通过这样的对比，大家能够更深刻的理解我们之前强调的几个概念：同步和异步，阻塞和非阻塞。&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-2/</guid>
            <title>Python中的并发编程-2</title>
            <link>https://scottalive.github.io/computer-science/python/basic/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-2/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Sat, 19 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;python中的并发编程-2&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中的并发编程-2&#34;&gt;#&lt;/a&gt; Python 中的并发编程 - 2&lt;/h2&gt;
&lt;p&gt;在上一课中我们说过，由于 GIL 的存在，CPython 中的多线程并不能发挥 CPU 的多核优势，如果希望突破 GIL 的限制，可以考虑使用多进程。对于多进程的程序，每个进程都有一个属于自己的 GIL，所以多进程不会受到 GIL 的影响。那么，我们应该如何在 Python 程序中创建和使用多进程呢？&lt;/p&gt;
&lt;p&gt;### 创建进程&lt;/p&gt;
&lt;p&gt;在 Python 中可以基于 &lt;code&gt;Process&lt;/code&gt;  类来创建进程，虽然进程和线程有着本质的差别，但是 &lt;code&gt;Process&lt;/code&gt;  类和 &lt;code&gt;Thread&lt;/code&gt;  类的用法却非常类似。在使用 &lt;code&gt;Process&lt;/code&gt;  类的构造器创建对象时，也是通过 &lt;code&gt;target&lt;/code&gt;  参数传入一个函数来指定进程要执行的代码，而 &lt;code&gt;args&lt;/code&gt;  和 &lt;code&gt;kwargs&lt;/code&gt;  参数可以指定该函数使用的参数值。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from multiprocessing import Process, current_process
from time import sleep


def sub_task(content, nums):
    # 通过current_process函数获取当前进程对象
    # 通过进程对象的pid和name属性获取进程的ID号和名字
    print(f&#39;PID: &amp;#123;current_process().pid&amp;#125;&#39;)
    print(f&#39;Name: &amp;#123;current_process().name&amp;#125;&#39;)
    # 通过下面的输出不难发现，每个进程都有自己的nums列表，进程之间本就不共享内存
    # 在创建子进程时复制了父进程的数据结构，三个进程从列表中pop(0)得到的值都是20
    counter, total = 0, nums.pop(0)
    print(f&#39;Loop count: &amp;#123;total&amp;#125;&#39;)
    sleep(0.5)
    while counter &amp;lt; total:
        counter += 1
        print(f&#39;&amp;#123;counter&amp;#125;: &amp;#123;content&amp;#125;&#39;)
        sleep(0.01)


def main():
    nums = [20, 30, 40]
    # 创建并启动进程来执行指定的函数
    Process(target=sub_task, args=(&#39;Ping&#39;, nums)).start()
    Process(target=sub_task, args=(&#39;Pong&#39;, nums)).start()
    # 在主进程中执行sub_task函数
    sub_task(&#39;Good&#39;, nums)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码通过 &lt;code&gt;current_process&lt;/code&gt;  函数获取当前进程对象，再通过进程对象的 &lt;code&gt;pid&lt;/code&gt;  属性获取进程 ID。在 Python 中，使用 &lt;code&gt;os&lt;/code&gt;  模块的 &lt;code&gt;getpid&lt;/code&gt;  函数也可以达到同样的效果。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果愿意，也可以使用 &lt;code&gt;os&lt;/code&gt;  模块的 &lt;code&gt;fork&lt;/code&gt;  函数来创建进程，调用该函数时，操作系统自动把当前进程（父进程）复制一份（子进程），父进程的 &lt;code&gt;fork&lt;/code&gt;  函数会返回子进程的 ID，而子进程中的 &lt;code&gt;fork&lt;/code&gt;  函数会返回 &lt;code&gt;0&lt;/code&gt; ，也就是说这个函数调用一次会在父进程和子进程中得到两个不同的返回值。需要注意的是，Windows 系统并不支持 &lt;code&gt;fork&lt;/code&gt;  函数，如果你使用的是 Linux 或 macOS 系统，可以试试下面的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import os

print(f&#39;PID: &amp;#123;os.getpid()&amp;#125;&#39;)
pid = os.fork()
if pid == 0:
    print(f&#39;子进程 - PID: &amp;#123;os.getpid()&amp;#125;&#39;)
    print(&#39;Todo: 在子进程中执行的代码&#39;)
else:
    print(f&#39;父进程 - PID: &amp;#123;os.getpid()&amp;#125;&#39;)
    print(&#39;Todo: 在父进程中执行的代码&#39;)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;简而言之，我们还是推荐大家通过直接使用 &lt;code&gt;Process&lt;/code&gt;  类、继承 &lt;code&gt;Process&lt;/code&gt;  类和使用进程池（ &lt;code&gt;ProcessPoolExecutor&lt;/code&gt; ）这三种方式来创建和使用多进程，这三种方式不同于上面的 &lt;code&gt;fork&lt;/code&gt;  函数，能够保证代码的兼容性和可移植性。具体的做法跟之前讲过的创建和使用多线程的方式比较接近，此处不再进行赘述。&lt;/p&gt;
&lt;h3 id=&#34;多进程和多线程的比较&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多进程和多线程的比较&#34;&gt;#&lt;/a&gt; 多进程和多线程的比较&lt;/h3&gt;
&lt;p&gt;对于爬虫这类 I/O 密集型任务来说，使用多进程并没有什么优势；但是对于计算密集型任务来说，多进程相比多线程，在效率上会有显著的提升，我们可以通过下面的代码来加以证明。下面的代码会通过多线程和多进程两种方式来判断一组大整数是不是质数，很显然这是一个计算密集型任务，我们将任务分别放到多个线程和多个进程中来加速代码的执行，让我们看看多线程和多进程的代码具体表现有何不同。&lt;/p&gt;
&lt;p&gt;我们先实现一个多线程的版本，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import concurrent.futures

PRIMES = [
    1116281,
    1297337,
    104395303,
    472882027,
    533000389,
    817504243,
    982451653,
    112272535095293,
    112582705942171,
    112272535095293,
    115280095190773,
    115797848077099,
    1099726899285419
] * 5


def is_prime(n):
    &amp;quot;&amp;quot;&amp;quot;判断素数&amp;quot;&amp;quot;&amp;quot;
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return n != 1


def main():
    &amp;quot;&amp;quot;&amp;quot;主函数&amp;quot;&amp;quot;&amp;quot;
    with concurrent.futures.ThreadPoolExecutor(max_workers=16) as executor:
        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):
            print(&#39;%d is prime: %s&#39; % (number, prime))


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;假设上面的代码保存在名为 &lt;code&gt;example.py&lt;/code&gt;  的文件中，在 Linux 或 macOS 系统上，可以使用 &lt;code&gt;time python example.py&lt;/code&gt;  命令执行程序并获得操作系统关于执行时间的统计，在我的 macOS 上，某次的运行结果的最后一行输出如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python example09.py  38.69s user 1.01s system 101% cpu 39.213 total
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;从运行结果可以看出，多线程的代码只能让 CPU 利用率达到 100%，这其实已经证明了多线程的代码无法利用 CPU 多核特性来加速代码的执行，我们再看看多进程的版本，我们将上面代码中的线程池（ &lt;code&gt;ThreadPoolExecutor&lt;/code&gt; ）更换为进程池（ &lt;code&gt;ProcessPoolExecutor&lt;/code&gt; ）。&lt;/p&gt;
&lt;p&gt;多进程的版本。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import concurrent.futures

PRIMES = [
    1116281,
    1297337,
    104395303,
    472882027,
    533000389,
    817504243,
    982451653,
    112272535095293,
    112582705942171,
    112272535095293,
    115280095190773,
    115797848077099,
    1099726899285419
] * 5


def is_prime(n):
    &amp;quot;&amp;quot;&amp;quot;判断素数&amp;quot;&amp;quot;&amp;quot;
    for i in range(2, int(n ** 0.5) + 1):
        if n % i == 0:
            return False
    return n != 1


def main():
    &amp;quot;&amp;quot;&amp;quot;主函数&amp;quot;&amp;quot;&amp;quot;
    with concurrent.futures.ProcessPoolExecutor(max_workers=16) as executor:
        for number, prime in zip(PRIMES, executor.map(is_prime, PRIMES)):
            print(&#39;%d is prime: %s&#39; % (number, prime))


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;：运行上面的代码时，可以通过操作系统的任务管理器（资源监视器）来查看是否启动了多个 Python  解释器进程。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我们仍然通过 &lt;code&gt;time python example.py&lt;/code&gt;  的方式来执行上述代码，运行结果的最后一行如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python example09.py 106.63s user 0.57s system 389% cpu 27.497 total
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;可以看出，多进程的版本在我使用的这台电脑上，让 CPU 的利用率达到了将近 400%，而运行代码时用户态耗费的 CPU 的时间（106.63 秒）几乎是代码运行总时间（27.497 秒）的 4 倍，从这两点都可以看出，我的电脑使用了一款 4 核的 CPU。当然，要知道自己的电脑有几个 CPU 或几个核，可以直接使用下面的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import os

print(os.cpu_count())
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;综上所述，多进程可以突破 GIL 的限制，充分利用 CPU 多核特性，对于计算密集型任务，这一点是相当重要的。常见的计算密集型任务包括科学计算、图像处理、音视频编解码等，如果这些计算密集型任务本身是可以并行的，那么使用多进程应该是更好的选择。&lt;/p&gt;
&lt;h3 id=&#34;进程间通信&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#进程间通信&#34;&gt;#&lt;/a&gt; 进程间通信&lt;/h3&gt;
&lt;p&gt;在讲解进程间通信之前，先给大家一个任务：启动两个进程，一个输出 “Ping”，一个输出 “Pong”，两个进程输出的 “Ping” 和 “Pong” 加起来一共有 50 个时，就结束程序。听起来是不是非常简单，但是实际编写代码时，由于多个进程之间不能够像多个线程之间直接通过共享内存的方式交换数据，所以下面的代码是达不到我们想要的结果的。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from multiprocessing import Process
from time import sleep

counter = 0


def sub_task(string):
    global counter
    while counter &amp;lt; 50:
        print(string, end=&#39;&#39;, flush=True)
        counter += 1
        sleep(0.01)

        
def main():
    Process(target=sub_task, args=(&#39;Ping&#39;, )).start()
    Process(target=sub_task, args=(&#39;Pong&#39;, )).start()


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的代码看起来没毛病，但是最后的结果是 “Ping” 和 “Pong” 各输出了 50 个。再次提醒大家，当我们在程序中创建进程的时候，子进程会复制父进程及其所有的数据结构，每个子进程有自己独立的内存空间，这也就意味着两个子进程中各有一个 &lt;code&gt;counter&lt;/code&gt;  变量，它们都会从 &lt;code&gt;0&lt;/code&gt;  加到 &lt;code&gt;50&lt;/code&gt; ，所以结果就可想而知了。要解决这个问题比较简单的办法是使用 &lt;code&gt;multiprocessing&lt;/code&gt;  模块中的 &lt;code&gt;Queue&lt;/code&gt;  类，它是可以被多个进程共享的队列，底层是通过操作系统底层的管道和信号量（semaphore）机制来实现的，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import time
from multiprocessing import Process, Queue


def sub_task(content, queue):
    counter = queue.get()
    while counter &amp;lt; 50:
        print(content, end=&#39;&#39;, flush=True)
        counter += 1
        queue.put(counter)
        time.sleep(0.01)
        counter = queue.get()


def main():
    queue = Queue()
    queue.put(0)
    p1 = Process(target=sub_task, args=(&#39;Ping&#39;, queue))
    p1.start()
    p2 = Process(target=sub_task, args=(&#39;Pong&#39;, queue))
    p2.start()
    while p1.is_alive() and p2.is_alive():
        pass
    queue.put(50)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;提示&lt;/strong&gt;： &lt;code&gt;multiprocessing.Queue&lt;/code&gt;  对象的 &lt;code&gt;get&lt;/code&gt;  方法默认在队列为空时是会阻塞的，直到获取到数据才会返回。如果不希望该方法阻塞以及需要指定阻塞的超时时间，可以通过指定 &lt;code&gt;block&lt;/code&gt;  和 &lt;code&gt;timeout&lt;/code&gt;  参数进行设定。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的代码通过 &lt;code&gt;Queue&lt;/code&gt;  类的 &lt;code&gt;get&lt;/code&gt;  和 &lt;code&gt;put&lt;/code&gt;  方法让三个进程（ &lt;code&gt;p1&lt;/code&gt; 、 &lt;code&gt;p2&lt;/code&gt;  和主进程）实现了数据的共享，这就是所谓的进程间的通信，通过这种方式，当 &lt;code&gt;Queue&lt;/code&gt;  中取出的值已经大于等于 &lt;code&gt;50&lt;/code&gt;  时， &lt;code&gt;p1&lt;/code&gt;  和 &lt;code&gt;p2&lt;/code&gt;  就会跳出 &lt;code&gt;while&lt;/code&gt;  循环，从而终止进程的执行。代码第 22 行的循环是为了等待 &lt;code&gt;p1&lt;/code&gt;  和 &lt;code&gt;p2&lt;/code&gt;  两个进程中的一个结束，这时候主进程还需要向 &lt;code&gt;Queue&lt;/code&gt;  中放置一个大于等于 &lt;code&gt;50&lt;/code&gt;  的值，这样另一个尚未结束的进程也会因为读到这个大于等于 &lt;code&gt;50&lt;/code&gt;  的值而终止。&lt;/p&gt;
&lt;p&gt;进程间通信的方式还有很多，比如使用套接字也可以实现两个进程的通信，甚至于这两个进程并不在同一台主机上，有兴趣的读者可以自行了解。&lt;/p&gt;
&lt;h3 id=&#34;简单的总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单的总结&#34;&gt;#&lt;/a&gt; 简单的总结&lt;/h3&gt;
&lt;p&gt;在 Python 中，我们还可以通过 &lt;code&gt;subprocess&lt;/code&gt;  模块的 &lt;code&gt;call&lt;/code&gt;  函数执行其他的命令来创建子进程，相当于就是在我们的程序中调用其他程序，这里我们暂不探讨这些知识，有兴趣的读者可以自行研究。&lt;/p&gt;
&lt;p&gt;对于 Python 开发者来说，以下情况需要考虑使用多线程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序需要维护许多共享的状态（尤其是可变状态），Python 中的列表、字典、集合都是线程安全的（多个线程同时操作同一个列表、字典或集合，不会引发错误和数据问题），所以使用线程而不是进程维护共享状态的代价相对较小。&lt;/li&gt;
&lt;li&gt;程序会花费大量时间在 I/O 操作上，没有太多并行计算的需求且不需占用太多的内存。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;那么在遇到下列情况时，应该考虑使用多进程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;程序执行计算密集型任务（如：音视频编解码、数据压缩、科学计算等）。&lt;/li&gt;
&lt;li&gt;程序的输入可以并行的分成块，并且可以将运算结果合并。&lt;/li&gt;
&lt;li&gt;程序在内存使用方面没有任何限制且不强依赖于 I/O 操作（如读写文件、套接字等）。&lt;/li&gt;
&lt;/ol&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-1/</guid>
            <title>Python中的并发编程-1</title>
            <link>https://scottalive.github.io/computer-science/python/basic/63.Python%E4%B8%AD%E7%9A%84%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B-1/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Fri, 18 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;python中的并发编程-1&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#python中的并发编程-1&#34;&gt;#&lt;/a&gt; Python 中的并发编程 - 1&lt;/h2&gt;
&lt;p&gt;现如今，我们使用的计算机早已是多 CPU 或多核的计算机，而我们使用的操作系统基本都支持 “多任务”，这使得我们可以同时运行多个程序，也可以将一个程序分解为若干个相对独立的子任务，让多个子任务 “并行” 或 “并发” 的执行，从而缩短程序的执行时间，同时也让用户获得更好的体验。因此当下，不管用什么编程语言进行开发，实现 “并行” 或 “并发” 编程已经成为了程序员的标配技能。为了讲述如何在 Python 程序中实现 “并行” 或 “并发”，我们需要先了解两个重要的概念：进程和线程。&lt;/p&gt;
&lt;h3 id=&#34;线程和进程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#线程和进程&#34;&gt;#&lt;/a&gt; 线程和进程&lt;/h3&gt;
&lt;p&gt;我们通过操作系统运行一个程序会创建出一个或多个进程，进程是具有一定独立功能的程序关于某个数据集合上的一次运行活动。简单的说，进程是操作系统分配存储空间的基本单位，每个进程都有自己的地址空间、数据栈以及其他用于跟踪进程执行的辅助数据；操作系统管理所有进程的执行，为它们合理的分配资源。一个进程可以通过 fork 或 spawn 的方式创建新的进程来执行其他的任务，不过新的进程也有自己独立的内存空间，因此两个进程如果要共享数据，必须通过进程间通信机制来实现，具体的方式包括管道、信号、套接字等。&lt;/p&gt;
&lt;p&gt;一个进程还可以拥有多个执行线索，简单的说就是拥有多个可以获得 CPU 调度的执行单元，这就是所谓的线程。由于线程在同一个进程下，它们可以共享相同的上下文，因此相对于进程而言，线程间的信息共享和通信更加容易。当然在单核 CPU 系统中，多个线程不可能同时执行，因为在某个时刻只有一个线程能够获得 CPU，多个线程通过共享 CPU 执行时间的方式来达到并发的效果。&lt;/p&gt;
&lt;p&gt;在程序中使用多线程技术通常都会带来不言而喻的好处，最主要的体现在提升程序的性能和改善用户体验，今天我们使用的软件几乎都用到了多线程技术，这一点可以利用系统自带的进程监控工具（如 macOS 中的 “活动监视器”、Windows 中的 “任务管理器”）来证实，如下图所示。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vamFja2ZydWVkL215cGljL3Jhdy9tYXN0ZXIvMjAyMTA4MjIwOTQyNDMucG5n&#34;&gt;https://gitee.com/jackfrued/mypic/raw/master/20210822094243.png&lt;/span&gt;&amp;quot; width=&amp;quot;80%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;这里，我们还需要跟大家再次强调两个概念：&lt;strong&gt;并发&lt;/strong&gt;（concurrency）和&lt;strong&gt;并行&lt;/strong&gt;（parallel）。&lt;strong&gt;并发&lt;/strong&gt;通常是指同一时刻只能有一条指令执行，但是多个线程对应的指令被快速轮换地执行。比如一个处理器，它先执行线程 A 的指令一段时间，再执行线程 B 的指令一段时间，再切回到线程 A 执行一段时间。由于处理器执行指令的速度和切换的速度极快，人们完全感知不到计算机在这个过程中有多个线程切换上下文执行的操作，这就使得宏观上看起来多个线程在同时运行，但微观上其实只有一个线程在执行。&lt;strong&gt;并行&lt;/strong&gt;是指同一时刻，有多条指令在多个处理器上同时执行，并行必须要依赖于多个处理器，不论是从宏观上还是微观上，多个线程可以在同一时刻一起执行的。很多时候，我们并不用严格区分并发和并行两个词，所以我们有时候也把 Python 中的多线程、多进程以及异步 I/O 都视为实现并发编程的手段，但实际上前面两者也可以实现并行编程，当然这里还有一个全局解释器锁（GIL）的问题，我们稍后讨论。&lt;/p&gt;
&lt;h3 id=&#34;多线程编程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程编程&#34;&gt;#&lt;/a&gt; 多线程编程&lt;/h3&gt;
&lt;p&gt;Python 标准库中 &lt;code&gt;threading&lt;/code&gt;  模块的 &lt;code&gt;Thread&lt;/code&gt;  类可以帮助我们非常轻松的实现多线程编程。我们用一个联网下载文件的例子来对比使用多线程和不使用多线程到底有什么区别，代码如下所示。&lt;/p&gt;
&lt;p&gt;不使用多线程的下载。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import random
import time


def download(*, filename):
    start = time.time()
    print(f&#39;开始下载 &amp;#123;filename&amp;#125;.&#39;)
    time.sleep(random.randint(3, 6))
    print(f&#39;&amp;#123;filename&amp;#125; 下载完成.&#39;)
    end = time.time()
    print(f&#39;下载耗时: &amp;#123;end - start:.3f&amp;#125;秒.&#39;)


def main():
    start = time.time()
    download(filename=&#39;Python从入门到住院.pdf&#39;)
    download(filename=&#39;MySQL从删库到跑路.avi&#39;)
    download(filename=&#39;Linux从精通到放弃.mp4&#39;)
    end = time.time()
    print(f&#39;总耗时: &amp;#123;end - start:.3f&amp;#125;秒.&#39;)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码并没有真正实现联网下载的功能，而是通过 &lt;code&gt;time.sleep()&lt;/code&gt;  休眠一段时间来模拟下载文件需要一些时间上的开销，跟实际下载的状况比较类似。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;运行上面的代码，可以得到如下所示的运行结果。可以看出，当我们的程序只有一个工作线程时，每个下载任务都需要等待上一个下载任务执行结束才能开始，所以程序执行的总耗时是三个下载任务各自执行时间的总和。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;开始下载Python从入门到住院.pdf.
Python从入门到住院.pdf下载完成.
下载耗时: 3.005秒.
开始下载MySQL从删库到跑路.avi.
MySQL从删库到跑路.avi下载完成.
下载耗时: 5.006秒.
开始下载Linux从精通到放弃.mp4.
Linux从精通到放弃.mp3下载完成.
下载耗时: 6.007秒.
总耗时: 14.018秒.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;事实上，上面的三个下载任务之间并没有逻辑上的因果关系，三者是可以 “并发” 的，下一个下载任务没有必要等待上一个下载任务结束，为此，我们可以使用多线程编程来改写上面的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import random
import time
from threading import Thread


def download(*, filename):
    start = time.time()
    print(f&#39;开始下载 &amp;#123;filename&amp;#125;.&#39;)
    time.sleep(random.randint(3, 6))
    print(f&#39;&amp;#123;filename&amp;#125; 下载完成.&#39;)
    end = time.time()
    print(f&#39;下载耗时: &amp;#123;end - start:.3f&amp;#125;秒.&#39;)


def main():
    threads = [
        Thread(target=download, kwargs=&amp;#123;&#39;filename&#39;: &#39;Python从入门到住院.pdf&#39;&amp;#125;),
        Thread(target=download, kwargs=&amp;#123;&#39;filename&#39;: &#39;MySQL从删库到跑路.avi&#39;&amp;#125;),
        Thread(target=download, kwargs=&amp;#123;&#39;filename&#39;: &#39;Linux从精通到放弃.mp4&#39;&amp;#125;)
    ]
    start = time.time()
    # 启动三个线程
    for thread in threads:
        thread.start()
    # 等待线程结束
    for thread in threads:
        thread.join()
    end = time.time()
    print(f&#39;总耗时: &amp;#123;end - start:.3f&amp;#125;秒.&#39;)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;某次的运行结果如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;开始下载 Python从入门到住院.pdf.
开始下载 MySQL从删库到跑路.avi.
开始下载 Linux从精通到放弃.mp4.
MySQL从删库到跑路.avi 下载完成.
下载耗时: 3.005秒.
Python从入门到住院.pdf 下载完成.
下载耗时: 5.006秒.
Linux从精通到放弃.mp4 下载完成.
下载耗时: 6.003秒.
总耗时: 6.004秒.
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;通过上面的运行结果可以发现，整个程序的执行时间几乎等于耗时最长的一个下载任务的执行时间，这也就意味着，三个下载任务是并发执行的，不存在一个等待另一个的情况，这样做很显然提高了程序的执行效率。简单的说，如果程序中有非常耗时的执行单元，而这些耗时的执行单元之间又没有逻辑上的因果关系，即 B 单元的执行不依赖于 A 单元的执行结果，那么 A 和 B 两个单元就可以放到两个不同的线程中，让他们并发的执行。这样做的好处除了减少程序执行的等待时间，还可以带来更好的用户体验，因为一个单元的阻塞不会造成程序的 “假死”，因为程序中还有其他的单元是可以运转的。&lt;/p&gt;
&lt;h4 id=&#34;使用-thread-类创建线程对象&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-thread-类创建线程对象&#34;&gt;#&lt;/a&gt; 使用 Thread 类创建线程对象&lt;/h4&gt;
&lt;p&gt;通过上面的代码可以看出，直接使用 &lt;code&gt;Thread&lt;/code&gt;  类的构造器就可以创建线程对象，而线程对象的 &lt;code&gt;start()&lt;/code&gt;  方法可以启动一个线程。线程启动后会执行 &lt;code&gt;target&lt;/code&gt;  参数指定的函数，当然前提是获得 CPU 的调度；如果 &lt;code&gt;target&lt;/code&gt;  指定的线程要执行的目标函数有参数，需要通过 &lt;code&gt;args&lt;/code&gt;  参数为其进行指定，对于关键字参数，可以通过 &lt;code&gt;kwargs&lt;/code&gt;  参数进行传入。 &lt;code&gt;Thread&lt;/code&gt;  类的构造器还有很多其他的参数，我们遇到的时候再为大家进行讲解，目前需要大家掌握的，就是 &lt;code&gt;target&lt;/code&gt; 、 &lt;code&gt;args&lt;/code&gt;  和 &lt;code&gt;kwargs&lt;/code&gt; 。&lt;/p&gt;
&lt;h4 id=&#34;继承-thread-类自定义线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#继承-thread-类自定义线程&#34;&gt;#&lt;/a&gt; 继承 Thread 类自定义线程&lt;/h4&gt;
&lt;p&gt;除了上面的代码展示的创建线程的方式外，还可以通过继承 &lt;code&gt;Thread&lt;/code&gt;  类并重写 &lt;code&gt;run()&lt;/code&gt;  方法的方式来自定义线程，具体的代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import random
import time
from threading import Thread


class DownloadThread(Thread):

    def __init__(self, filename):
        self.filename = filename
        super().__init__()

    def run(self):
        start = time.time()
        print(f&#39;开始下载 &amp;#123;self.filename&amp;#125;.&#39;)
        time.sleep(random.randint(3, 6))
        print(f&#39;&amp;#123;self.filename&amp;#125; 下载完成.&#39;)
        end = time.time()
        print(f&#39;下载耗时: &amp;#123;end - start:.3f&amp;#125;秒.&#39;)


def main():
    threads = [
        DownloadThread(&#39;Python从入门到住院.pdf&#39;),
        DownloadThread(&#39;MySQL从删库到跑路.avi&#39;),
        DownloadThread(&#39;Linux从精通到放弃.mp4&#39;)
    ]
    start = time.time()
    # 启动三个线程
    for thread in threads:
        thread.start()
    # 等待线程结束
    for thread in threads:
        thread.join()
    end = time.time()
    print(f&#39;总耗时: &amp;#123;end - start:.3f&amp;#125;秒.&#39;)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;h4 id=&#34;使用线程池&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用线程池&#34;&gt;#&lt;/a&gt; 使用线程池&lt;/h4&gt;
&lt;p&gt;我们还可以通过线程池的方式将任务放到多个线程中去执行，通过线程池来使用线程应该是多线程编程最理想的选择。事实上，线程的创建和释放都会带来较大的开销，频繁的创建和释放线程通常都不是很好的选择。利用线程池，可以提前准备好若干个线程，在使用的过程中不需要再通过自定义的代码创建和释放线程，而是直接复用线程池中的线程。Python 内置的 &lt;code&gt;concurrent.futures&lt;/code&gt;  模块提供了对线程池的支持，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import random
import time
from concurrent.futures import ThreadPoolExecutor
from threading import Thread


def download(*, filename):
    start = time.time()
    print(f&#39;开始下载 &amp;#123;filename&amp;#125;.&#39;)
    time.sleep(random.randint(3, 6))
    print(f&#39;&amp;#123;filename&amp;#125; 下载完成.&#39;)
    end = time.time()
    print(f&#39;下载耗时: &amp;#123;end - start:.3f&amp;#125;秒.&#39;)


def main():
    with ThreadPoolExecutor(max_workers=4) as pool:
        filenames = [&#39;Python从入门到住院.pdf&#39;, &#39;MySQL从删库到跑路.avi&#39;, &#39;Linux从精通到放弃.mp4&#39;]
        start = time.time()
        for filename in filenames:
            pool.submit(download, filename=filename)
    end = time.time()
    print(f&#39;总耗时: &amp;#123;end - start:.3f&amp;#125;秒.&#39;)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;守护线程&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#守护线程&#34;&gt;#&lt;/a&gt; 守护线程&lt;/h3&gt;
&lt;p&gt;所谓 “守护线程” 就是在主线程结束的时候，不值得再保留的执行线程。这里的不值得保留指的是守护线程会在其他非守护线程全部运行结束之后被销毁，它守护的是当前进程内所有的非守护线程。简单的说，守护线程会跟随主线程一起挂掉，而主线程的生命周期就是一个进程的生命周期。如果不理解，我们可以看一段简单的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import time
from threading import Thread


def display(content):
    while True:
        print(content, end=&#39;&#39;, flush=True)
        time.sleep(0.1)


def main():
    Thread(target=display, args=(&#39;Ping&#39;, )).start()
    Thread(target=display, args=(&#39;Pong&#39;, )).start()


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码中，我们将 &lt;code&gt;print&lt;/code&gt;  函数的参数 &lt;code&gt;flush&lt;/code&gt;  设置为 &lt;code&gt;True&lt;/code&gt; ，这是因为 &lt;code&gt;flush&lt;/code&gt;  参数的值如果为 &lt;code&gt;False&lt;/code&gt; ，而 &lt;code&gt;print&lt;/code&gt;  又没有做换行处理，就会导致每次 &lt;code&gt;print&lt;/code&gt;  输出的内容被放到操作系统的输出缓冲区，直到缓冲区被输出的内容塞满，才会清空缓冲区产生一次输出。上述现象是操作系统为了减少 I/O 中断，提升 CPU 利用率做出的设定，为了让代码产生直观交互，我们才将 &lt;code&gt;flush&lt;/code&gt;  参数设置为 &lt;code&gt;True&lt;/code&gt; ，强制每次输出都清空输出缓冲区。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上面的代码运行起来之后是不会停止的，因为两个子线程中都有死循环，除非你手动中断代码的执行。但是，如果在创建线程对象时，将名为 &lt;code&gt;daemon&lt;/code&gt;  的参数设置为 &lt;code&gt;True&lt;/code&gt; ，这两个线程就会变成守护线程，那么在其他线程结束时，即便有死循环，两个守护线程也会挂掉，不会再继续执行下去，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import time
from threading import Thread


def display(content):
    while True:
        print(content, end=&#39;&#39;, flush=True)
        time.sleep(0.1)


def main():
    Thread(target=display, args=(&#39;Ping&#39;, ), daemon=True).start()
    Thread(target=display, args=(&#39;Pong&#39;, ), daemon=True).start()
    time.sleep(5)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面的代码，我们在主线程中添加了一行 &lt;code&gt;time.sleep(5)&lt;/code&gt;  让主线程休眠 5 秒，在这个过程中，输出 &lt;code&gt;Ping&lt;/code&gt;  和 &lt;code&gt;Pong&lt;/code&gt;  的守护线程会持续运转，直到主线程在 5 秒后结束，这两个守护线程也被销毁，不再继续运行。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;思考&lt;/strong&gt;：如果将上面代码第 12 行的 &lt;code&gt;daemon=True&lt;/code&gt;  去掉，代码会怎样执行？有兴趣的读者可以尝试一下，并看看实际执行的结果跟你想象的是否一致。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;资源竞争&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#资源竞争&#34;&gt;#&lt;/a&gt; 资源竞争&lt;/h3&gt;
&lt;p&gt;在编写多线程代码时，不可避免的会遇到多个线程竞争同一个资源（对象）的情况。在这种情况下，如果没有合理的机制来保护被竞争的资源，那么就有可能出现非预期的状况。下面的代码创建了 &lt;code&gt;100&lt;/code&gt;  个线程向同一个银行账户（初始余额为 &lt;code&gt;0&lt;/code&gt;  元）转账，每个线程转账金额为 &lt;code&gt;1&lt;/code&gt;  元。在正常的情况下，我们的银行账户最终的余额应该是 &lt;code&gt;100&lt;/code&gt;  元，但是运行下面的代码我们并不能得到 &lt;code&gt;100&lt;/code&gt;  元这个结果。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import time

from concurrent.futures import ThreadPoolExecutor


class Account(object):
    &amp;quot;&amp;quot;&amp;quot;银行账户&amp;quot;&amp;quot;&amp;quot;

    def __init__(self):
        self.balance = 0.0

    def deposit(self, money):
        &amp;quot;&amp;quot;&amp;quot;存钱&amp;quot;&amp;quot;&amp;quot;
        new_balance = self.balance + money
        time.sleep(0.01)
        self.balance = new_balance


def main():
    &amp;quot;&amp;quot;&amp;quot;主函数&amp;quot;&amp;quot;&amp;quot;
    account = Account()
    with ThreadPoolExecutor(max_workers=16) as pool:
        for _ in range(100):
            pool.submit(account.deposit, 1)
    print(account.balance)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中的 &lt;code&gt;Account&lt;/code&gt;  类代表了银行账户，它的 &lt;code&gt;deposit&lt;/code&gt;  方法代表存款行为，参数 &lt;code&gt;money&lt;/code&gt;  代表存入的金额，该方法通过 &lt;code&gt;time.sleep&lt;/code&gt;  函数模拟受理存款需要一段时间。我们通过线程池的方式启动了 &lt;code&gt;100&lt;/code&gt;  个线程向一个账户转账，但是上面的代码并不能运行出 &lt;code&gt;100&lt;/code&gt;  这个我们期望的结果，这就是在多个线程竞争一个资源的时候，可能会遇到的数据不一致的问题。注意上面代码的第 &lt;code&gt;14&lt;/code&gt;  行，当多个线程都执行到这行代码时，它们会在相同的余额上执行加上存入金额的操作，这就会造成 “丢失更新” 现象，即之前修改数据的成果被后续的修改给覆盖掉了，所以才得不到正确的结果。&lt;/p&gt;
&lt;p&gt;要解决上面的问题，可以使用锁机制，通过锁对操作数据的关键代码加以保护。Python 标准库的 &lt;code&gt;threading&lt;/code&gt;  模块提供了 &lt;code&gt;Lock&lt;/code&gt;  和 &lt;code&gt;RLock&lt;/code&gt;  类来支持锁机制，这里我们不去深究二者的区别，建议大家直接使用 &lt;code&gt;RLock&lt;/code&gt; 。接下来，我们给银行账户添加一个锁对象，通过锁对象来解决刚才存款时发生 “丢失更新” 的问题，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import time

from concurrent.futures import ThreadPoolExecutor
from threading import RLock


class Account(object):
    &amp;quot;&amp;quot;&amp;quot;银行账户&amp;quot;&amp;quot;&amp;quot;

    def __init__(self):
        self.balance = 0.0
        self.lock = RLock()

    def deposit(self, money):
        # 获得锁
        self.lock.acquire()
        try:
            new_balance = self.balance + money
            time.sleep(0.01)
            self.balance = new_balance
        finally:
            # 释放锁
            self.lock.release()


def main():
    &amp;quot;&amp;quot;&amp;quot;主函数&amp;quot;&amp;quot;&amp;quot;
    account = Account()
    with ThreadPoolExecutor(max_workers=16) as pool:
        for _ in range(100):
            pool.submit(account.deposit, 1)
    print(account.balance)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;上面代码中，获得锁和释放锁的操作也可以通过上下文语法来实现，使用上下文语法会让代码更加简单优雅，这也是我们推荐大家使用的方式。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import time

from concurrent.futures import ThreadPoolExecutor
from threading import RLock


class Account(object):
    &amp;quot;&amp;quot;&amp;quot;银行账户&amp;quot;&amp;quot;&amp;quot;

    def __init__(self):
        self.balance = 0.0
        self.lock = RLock()

    def deposit(self, money):
        # 通过上下文语法获得锁和释放锁
        with self.lock:
            new_balance = self.balance + money
            time.sleep(0.01)
            self.balance = new_balance


def main():
    &amp;quot;&amp;quot;&amp;quot;主函数&amp;quot;&amp;quot;&amp;quot;
    account = Account()
    with ThreadPoolExecutor(max_workers=16) as pool:
        for _ in range(100):
            pool.submit(account.deposit, 1)
    print(account.balance)


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;思考&lt;/strong&gt;：将上面的代码修改为 5 个线程向银行账户存钱，5 个线程从银行账户取钱，取钱的线程在银行账户余额不足时，需要停下来等待存钱的线程将钱存入后再尝试取钱。这里需要用到线程调度的知识，大家可以自行研究下 &lt;code&gt;threading&lt;/code&gt;  模块中的 &lt;code&gt;Condition&lt;/code&gt;  类，看看是否能够完成这个任务。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;gil问题&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#gil问题&#34;&gt;#&lt;/a&gt; GIL 问题&lt;/h3&gt;
&lt;p&gt;如果使用官方的 Python 解释器（通常称之为 CPython）运行 Python 程序，我们并不能通过使用多线程的方式将 CPU 的利用率提升到逼近 400%（对于 4 核 CPU）或逼近 800%（对于 8 核 CPU）这样的水平，因为 CPython 在执行代码时，会受到 GIL（全局解释器锁）的限制。具体的说，CPython 在执行任何代码时，都需要对应的线程先获得 GIL，然后每执行 100 条（字节码）指令，CPython 就会让获得 GIL 的线程主动释放 GIL，这样别的线程才有机会执行。因为 GIL 的存在，无论你的 CPU 有多少个核，我们编写的 Python 代码也没有机会真正并行的执行。&lt;/p&gt;
&lt;p&gt;GIL 是官方 Python 解释器在设计上的历史遗留问题，要解决这个问题，让多线程能够发挥 CPU 的多核优势，需要重新实现一个不带 GIL 的 Python 解释器。这个问题按照官方的说法，在 Python 发布 4.0 版本时会得到解决，就让我们拭目以待吧。当下，对于 CPython 而言，如果希望充分发挥 CPU 的多核优势，可以考虑使用多进程，因为每个进程都对应一个 Python 解释器，因此每个进程都有自己独立的 GIL，这样就可以突破 GIL 的限制。在下一个章节中，我们会为大家介绍关于多进程的相关知识，并对多线程和多进程的代码及其执行效果进行比较。&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/63.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9C%A8%E7%88%AC%E8%99%AB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</guid>
            <title>并发编程在爬虫中的应用</title>
            <link>https://scottalive.github.io/computer-science/python/basic/63.%E5%B9%B6%E5%8F%91%E7%BC%96%E7%A8%8B%E5%9C%A8%E7%88%AC%E8%99%AB%E4%B8%AD%E7%9A%84%E5%BA%94%E7%94%A8/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Thu, 17 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;并发编程在爬虫中的应用&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#并发编程在爬虫中的应用&#34;&gt;#&lt;/a&gt; 并发编程在爬虫中的应用&lt;/h2&gt;
&lt;p&gt;之前的课程，我们已经为大家介绍了 Python 中的多线程、多进程和异步编程，通过这三种手段，我们可以实现并发或并行编程，这一方面可以加速代码的执行，另一方面也可以带来更好的用户体验。爬虫程序是典型的 I/O 密集型任务，对于 I/O 密集型任务来说，多线程和异步 I/O 都是很好的选择，因为当程序的某个部分因 I/O 操作阻塞时，程序的其他部分仍然可以运转，这样我们不用在等待和阻塞中浪费大量的时间。下面我们以爬取 “&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9pbWFnZS5zby5jb20v&#34;&gt;360 图片&lt;/span&gt;” 网站的图片并保存到本地为例，为大家分别展示使用单线程、多线程和异步 I/O 编程的爬虫程序有什么区别，同时也对它们的执行效率进行简单的对比。&lt;/p&gt;
&lt;p&gt;“360 图片” 网站的页面使用了 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvR3VpZGUvQUpBWA==&#34;&gt;Ajax&lt;/span&gt; 技术，这是很多网站都会使用的一种异步加载数据和局部刷新页面的技术。简单的说，页面上的图片都是通过 JavaScript 代码异步获取 JSON 数据并动态渲染生成的，而且整个页面还使用了瀑布式加载（一边向下滚动，一边加载更多的图片）。我们在浏览器的 “开发者工具” 中可以找到提供动态内容的数据接口，如下图所示，我们需要的图片信息就在服务器返回的 JSON 数据中。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vamFja2ZydWVkL215cGljL3Jhdy9tYXN0ZXIvMjAyMTEyMDUyMjEzNTIucG5n&#34;&gt;https://gitee.com/jackfrued/mypic/raw/master/20211205221352.png&lt;/span&gt;&amp;quot; style=&amp;quot;zoom:50%;&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;例如，要获取 “美女” 频道的图片，我们可以请求如下所示的 URL，其中参数 &lt;code&gt;ch&lt;/code&gt;  表示请求的频道， &lt;code&gt;=&lt;/code&gt;  后面的参数值 &lt;code&gt;beauty&lt;/code&gt;  就代表了 “美女” 频道，参数 &lt;code&gt;sn&lt;/code&gt;  相当于是页码， &lt;code&gt;0&lt;/code&gt;  表示第一页（共 &lt;code&gt;30&lt;/code&gt;  张图片）， &lt;code&gt;30&lt;/code&gt;  表示第二页， &lt;code&gt;60&lt;/code&gt;  表示第三页，以此类推。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;https://image.so.com/zjl?ch=beauty&amp;amp;sn=0
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;单线程版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#单线程版本&#34;&gt;#&lt;/a&gt; 单线程版本&lt;/h3&gt;
&lt;p&gt;通过上面的 URL 下载 “美女” 频道共 &lt;code&gt;90&lt;/code&gt;  张图片。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
example04.py - 单线程版本爬虫
&amp;quot;&amp;quot;&amp;quot;
import os

import requests


def download_picture(url):
    filename = url[url.rfind(&#39;/&#39;) + 1:]
    resp = requests.get(url)
    if resp.status_code == 200:
        with open(f&#39;images/beauty/&amp;#123;filename&amp;#125;&#39;, &#39;wb&#39;) as file:
            file.write(resp.content)


def main():
    if not os.path.exists(&#39;images/beauty&#39;):
        os.makedirs(&#39;images/beauty&#39;)
    for page in range(3):
        resp = requests.get(f&#39;https://image.so.com/zjl?ch=beauty&amp;amp;sn=&amp;#123;page * 30&amp;#125;&#39;)
        if resp.status_code == 200:
            pic_dict_list = resp.json()[&#39;list&#39;]
            for pic_dict in pic_dict_list:
                download_picture(pic_dict[&#39;qhimg_url&#39;])

if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;在 macOS 或 Linux 系统上，我们可以使用 &lt;code&gt;time&lt;/code&gt;  命令来了解上面代码的执行时间以及 CPU 的利用率，如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;time python3 example04.py 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面是单线程爬虫代码在我的电脑上执行的结果。&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 example04.py  2.36s user 0.39s system 12% cpu 21.578 total
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里我们只需要关注代码的总耗时为 &lt;code&gt;21.578&lt;/code&gt;  秒，CPU 利用率为 &lt;code&gt;12%&lt;/code&gt; 。&lt;/p&gt;
&lt;h3 id=&#34;多线程版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#多线程版本&#34;&gt;#&lt;/a&gt; 多线程版本&lt;/h3&gt;
&lt;p&gt;我们使用之前讲到过的线程池技术，将上面的代码修改为多线程版本。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
example05.py - 多线程版本爬虫
&amp;quot;&amp;quot;&amp;quot;
import os
from concurrent.futures import ThreadPoolExecutor

import requests


def download_picture(url):
    filename = url[url.rfind(&#39;/&#39;) + 1:]
    resp = requests.get(url)
    if resp.status_code == 200:
        with open(f&#39;images/beauty/&amp;#123;filename&amp;#125;&#39;, &#39;wb&#39;) as file:
            file.write(resp.content)


def main():
    if not os.path.exists(&#39;images/beauty&#39;):
        os.makedirs(&#39;images/beauty&#39;)
    with ThreadPoolExecutor(max_workers=16) as pool:
        for page in range(3):
            resp = requests.get(f&#39;https://image.so.com/zjl?ch=beauty&amp;amp;sn=&amp;#123;page * 30&amp;#125;&#39;)
            if resp.status_code == 200:
                pic_dict_list = resp.json()[&#39;list&#39;]
                for pic_dict in pic_dict_list:
                    pool.submit(download_picture, pic_dict[&#39;qhimg_url&#39;])


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行如下所示的命令。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;time python3 example05.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码的执行结果如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 example05.py  2.65s user 0.40s system 95% cpu 3.193 total
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;异步io版本&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#异步io版本&#34;&gt;#&lt;/a&gt; 异步 I/O 版本&lt;/h3&gt;
&lt;p&gt;我们使用 &lt;code&gt;aiohttp&lt;/code&gt;  将上面的代码修改为异步 I/O 的版本。为了以异步 I/O 的方式实现网络资源的获取和写文件操作，我们首先得安装三方库 &lt;code&gt;aiohttp&lt;/code&gt;  和 &lt;code&gt;aiofile&lt;/code&gt; ，命令如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install aiohttp aiofile
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;code&gt;aiohttp&lt;/code&gt;  的用法在之前的课程中已经做过简要介绍， &lt;code&gt;aiofile&lt;/code&gt;  模块中的 &lt;code&gt;async_open&lt;/code&gt;  函数跟 Python 内置函数 &lt;code&gt;open&lt;/code&gt;  的用法大致相同，只不过它支持异步操作。下面是异步 I/O 版本的爬虫代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;&amp;quot;&amp;quot;&amp;quot;
example06.py - 异步I/O版本爬虫
&amp;quot;&amp;quot;&amp;quot;
import asyncio
import json
import os

import aiofile
import aiohttp


async def download_picture(session, url):
    filename = url[url.rfind(&#39;/&#39;) + 1:]
    async with session.get(url, ssl=False) as resp:
        if resp.status == 200:
            data = await resp.read()
            async with aiofile.async_open(f&#39;images/beauty/&amp;#123;filename&amp;#125;&#39;, &#39;wb&#39;) as file:
                await file.write(data)


async def fetch_json():
    async with aiohttp.ClientSession() as session:
        for page in range(3):
            async with session.get(
                url=f&#39;https://image.so.com/zjl?ch=beauty&amp;amp;sn=&amp;#123;page * 30&amp;#125;&#39;,
                ssl=False
            ) as resp:
                if resp.status == 200:
                    json_str = await resp.text()
                    result = json.loads(json_str)
                    for pic_dict in result[&#39;list&#39;]:
                        await download_picture(session, pic_dict[&#39;qhimg_url&#39;])


def main():
    if not os.path.exists(&#39;images/beauty&#39;):
        os.makedirs(&#39;images/beauty&#39;)
    loop = asyncio.get_event_loop()
    loop.run_until_complete(fetch_json())
    loop.close()


if __name__ == &#39;__main__&#39;:
    main()
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;执行如下所示的命令。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;time python3 example06.py
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;代码的执行结果如下所示：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;python3 example06.py  0.82s user 0.21s system 27% cpu 3.782 total
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#总结&#34;&gt;#&lt;/a&gt; 总结&lt;/h3&gt;
&lt;p&gt;通过上面三段代码执行结果的比较，我们可以得出一个结论，使用多线程和异步 I/O 都可以改善爬虫程序的性能，因为我们不用将时间浪费在因 I/O 操作造成的等待和阻塞上，而 &lt;code&gt;time&lt;/code&gt;  命令的执行结果也告诉我们，单线程的代码 CPU 利用率仅仅只有 &lt;code&gt;12%&lt;/code&gt; ，而多线程版本的 CPU 利用率则高达 &lt;code&gt;95%&lt;/code&gt; ；单线程版本的爬虫执行时间约 &lt;code&gt;21&lt;/code&gt;  秒，而多线程和异步 I/O 的版本仅执行了 &lt;code&gt;3&lt;/code&gt;  秒钟。另外，在运行时间差别不大的情况下，多线程的代码比异步 I/O 的代码耗费了更多的 CPU 资源，这是因为多线程的调度和切换也需要花费 CPU 时间。至此，三种方式在 I/O 密集型任务上的优劣已经一目了然，当然这只是在我的电脑上跑出来的结果。如果网络状况不是很理想或者目标网站响应很慢，那么使用多线程和异步 I/O 的优势将更为明显，有兴趣的读者可以自行试验。&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/62.%E7%94%A8Python%E8%A7%A3%E6%9E%90HTML%E9%A1%B5%E9%9D%A2-2/</guid>
            <title>用Python解析HTML页面</title>
            <link>https://scottalive.github.io/computer-science/python/basic/62.%E7%94%A8Python%E8%A7%A3%E6%9E%90HTML%E9%A1%B5%E9%9D%A2-2/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Wed, 16 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;用python解析html页面&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用python解析html页面&#34;&gt;#&lt;/a&gt; 用 Python 解析 HTML 页面&lt;/h2&gt;
&lt;p&gt;在前面的课程中，我们讲到了使用 &lt;code&gt;request&lt;/code&gt;  三方库获取网络资源，还介绍了一些前端的基础知识。接下来，我们继续探索如何解析 HTML 代码，从页面中提取出有用的信息。之前，我们尝试过用正则表达式的捕获组操作提取页面内容，但是写出一个正确的正则表达式也是一件让人头疼的事情。为了解决这个问题，我们得先深入的了解一下 HTML 页面的结构，并在此基础上研究另外的解析页面的方法。&lt;/p&gt;
&lt;h3 id=&#34;html-页面的结构&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#html-页面的结构&#34;&gt;#&lt;/a&gt; HTML 页面的结构&lt;/h3&gt;
&lt;p&gt;我们在浏览器中打开任意一个网站，然后通过鼠标右键菜单，选择 “显示网页源代码” 菜单项，就可以看到网页对应的 HTML 代码。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/jackfrued/mypic/raw/master/20210822094218.png&#34; alt=&#34;image-20210822094218269&#34; /&gt;&lt;/p&gt;
&lt;p&gt;代码的第 &lt;code&gt;1&lt;/code&gt;  行是文档类型声明，第 &lt;code&gt;2&lt;/code&gt;  行的 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;  标签是整个页面根标签的开始标签，最后一行是根标签的结束标签 &lt;code&gt;&amp;lt;/html&amp;gt;&lt;/code&gt; 。 &lt;code&gt;&amp;lt;html&amp;gt;&lt;/code&gt;  标签下面有两个子标签 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;  和 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt; ，放在 &lt;code&gt;&amp;lt;body&amp;gt;&lt;/code&gt;  标签下的内容会显示在浏览器窗口中，这部分内容是网页的主体；放在 &lt;code&gt;&amp;lt;head&amp;gt;&lt;/code&gt;  标签下的内容不会显示在浏览器窗口中，但是却包含了页面重要的元信息，通常称之为网页的头部。HTML 页面大致的代码结构如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-HTML&#34;&gt;&amp;lt;!doctype html&amp;gt;
&amp;lt;html&amp;gt;
    &amp;lt;head&amp;gt;
        &amp;lt;!-- 页面的元信息，如字符编码、标题、关键字、媒体查询等 --&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body&amp;gt;
        &amp;lt;!-- 页面的主体，显示在浏览器窗口中的内容 --&amp;gt;
    &amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;标签、层叠样式表（CSS）、JavaScript 是构成 HTML 页面的三要素，其中标签用来承载页面要显示的内容，CSS 负责对页面的渲染，而 JavaScript 用来控制页面的交互式行为。要实现 HTML 页面的解析，可以使用 XPath 的语法，它原本是 XML 的一种查询语法，可以根据 HTML 标签的层次结构提取标签中的内容或标签属性；此外，也可以使用 CSS 选择器来定位页面元素，就跟用 CSS 渲染页面元素是同样的道理。&lt;/p&gt;
&lt;h3 id=&#34;xpath-解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#xpath-解析&#34;&gt;#&lt;/a&gt; XPath 解析&lt;/h3&gt;
&lt;p&gt;XPath 是在 XML（eXtensible Markup Language）文档中查找信息的一种语法，XML 跟 HTML 类似也是一种用标签承载数据的标签语言，不同之处在于 XML 的标签是可扩展的，可以自定义的，而且 XML 对语法有更严格的要求。XPath 使用路径表达式来选取 XML 文档中的节点或者节点集，这里所说的节点包括元素、属性、文本、命名空间、处理指令、注释、根节点等。下面我们通过一个例子来说明如何使用 XPath 对页面进行解析。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-XML&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;
&amp;lt;bookstore&amp;gt;
    &amp;lt;book&amp;gt;
      &amp;lt;title lang=&amp;quot;eng&amp;quot;&amp;gt;Harry Potter&amp;lt;/title&amp;gt;
      &amp;lt;price&amp;gt;29.99&amp;lt;/price&amp;gt;
    &amp;lt;/book&amp;gt;
    &amp;lt;book&amp;gt;
      &amp;lt;title lang=&amp;quot;zh&amp;quot;&amp;gt;Learning XML&amp;lt;/title&amp;gt;
      &amp;lt;price&amp;gt;39.95&amp;lt;/price&amp;gt;
    &amp;lt;/book&amp;gt;
&amp;lt;/bookstore&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于上面的 XML 文件，我们可以用如下所示的 XPath 语法获取文档中的节点。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;路径表达式&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bookstore&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取根元素 bookstore。&lt;strong&gt;注意&lt;/strong&gt;：假如路径起始于正斜杠 (/)，则此路径始终代表到某元素的绝对路径！&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//book&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取所有 book 子元素，而不管它们在文档中的位置。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//@lang&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取名为 lang 的所有属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bookstore/book[1]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取属于 bookstore 子元素的第一个 book 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bookstore/book[last()]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取属于 bookstore 子元素的最后一个 book 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bookstore/book[last()-1]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取属于 bookstore 子元素的倒数第二个 book 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bookstore/book[position()&amp;lt;3]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取最前面的两个属于 bookstore 元素的子元素的 book 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//title[@lang]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取所有拥有名为 lang 的属性的 title 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//title[@lang=&#39;eng&#39;]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bookstore/book[price&amp;gt;35.00]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bookstore/book[price&amp;gt;35.00]/title&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;XPath 还支持通配符用法，如下所示。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;路径表达式&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bookstore/*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取 bookstore 元素的所有子元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//*&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取文档中的所有元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//title[@*]&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取所有带有属性的 title 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;如果要选取多个节点，可以使用如下所示的方法。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;路径表达式&lt;/th&gt;
&lt;th&gt;结果&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//book/title \| //book/price&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取 book 元素的所有 title 和 price 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;//title \| //price&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取文档中的所有 title 和 price 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;&lt;code&gt;/bookstore/book/title \| //price&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的例子来自于 “菜鸟教程” 网站上的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cucnVub29iLmNvbS94cGF0aC94cGF0aC10dXRvcmlhbC5odG1s&#34;&gt;XPath 教程&lt;/span&gt;，有兴趣的读者可以自行阅读原文。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;当然，如果不理解或不熟悉 XPath 语法，可以在浏览器的开发者工具中按照如下所示的方法查看元素的 XPath 语法，下图是在 Chrome 浏览器的开发者工具中查看豆瓣网电影详情信息中影片标题的 XPath 语法。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/jackfrued/mypic/raw/master/20210822093707.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;实现 XPath 解析需要三方库 &lt;code&gt;lxml&lt;/code&gt;  的支持，可以使用下面的命令安装 &lt;code&gt;lxml&lt;/code&gt; 。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Bash&#34;&gt;pip install lxml
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面我们用 XPath 解析方式改写之前获取豆瓣电影 Top250 的代码，如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;from lxml import etree
import requests

for page in range(1, 11):
    resp = requests.get(
        url=f&#39;https://movie.douban.com/top250?start=&amp;#123;(page - 1) * 25&amp;#125;&#39;,
        headers=&amp;#123;&#39;User-Agent&#39;: &#39;BaiduSpider&#39;&amp;#125;
    )
    tree = etree.HTML(resp.text)
    # 通过XPath语法从页面中提取电影标题
    title_spans = tree.xpath(&#39;//*[@id=&amp;quot;content&amp;quot;]/div/div[1]/ol/li/div/div[2]/div[1]/a/span[1]&#39;)
    # 通过XPath语法从页面中提取电影评分
    rank_spans = tree.xpath(&#39;//*[@id=&amp;quot;content&amp;quot;]/div/div[1]/ol/li[1]/div/div[2]/div[2]/div/span[2]&#39;)
    for title_span, rank_span in zip(title_spans, rank_spans):
        print(title_span.text, rank_span.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id=&#34;css-选择器解析&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#css-选择器解析&#34;&gt;#&lt;/a&gt; CSS 选择器解析&lt;/h3&gt;
&lt;p&gt;对于熟悉 CSS 选择器和 JavaScript 的开发者来说，通过 CSS 选择器获取页面元素可能是更为简单的选择，因为浏览器中运行的 JavaScript 本身就可以 &lt;code&gt;document&lt;/code&gt;  对象的 &lt;code&gt;querySelector()&lt;/code&gt;  和 &lt;code&gt;querySelectorAll()&lt;/code&gt;  方法基于 CSS 选择器获取页面元素。在 Python 中，我们可以利用三方库 &lt;code&gt;beautifulsoup4&lt;/code&gt;  或 &lt;code&gt;pyquery&lt;/code&gt;  来做同样的事情。Beautiful Soup 可以用来解析 HTML 和 XML 文档，修复含有未闭合标签等错误的文档，通过为待解析的页面在内存中创建一棵树结构，实现对从页面中提取数据操作的封装。可以用下面的命令来安装 Beautiful Soup。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;pip install beautifulsoup4
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;下面是使用 &lt;code&gt;bs4&lt;/code&gt;  改写的获取豆瓣电影 Top250 电影名称的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import bs4
import requests

for page in range(1, 11):
    resp = requests.get(
        url=f&#39;https://movie.douban.com/top250?start=&amp;#123;(page - 1) * 25&amp;#125;&#39;,
        headers=&amp;#123;&#39;User-Agent&#39;: &#39;BaiduSpider&#39;&amp;#125;
    )
    # 创建BeautifulSoup对象
    soup = bs4.BeautifulSoup(resp.text, &#39;lxml&#39;)
    # 通过CSS选择器从页面中提取包含电影标题的span标签
    title_spans = soup.select(&#39;div.info &amp;gt; div.hd &amp;gt; a &amp;gt; span:nth-child(1)&#39;)
    # 通过CSS选择器从页面中提取包含电影评分的span标签
    rank_spans = soup.select(&#39;div.info &amp;gt; div.bd &amp;gt; div &amp;gt; span.rating_num&#39;)
    for title_span, rank_span in zip(title_spans, rank_spans):
        print(title_span.text, rank_span.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;关于 BeautifulSoup 更多的知识，可以参考它的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly93d3cuY3J1bW15LmNvbS9zb2Z0d2FyZS9CZWF1dGlmdWxTb3VwL2JzNC9kb2Muemgv&#34;&gt;官方文档&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;简单的总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单的总结&#34;&gt;#&lt;/a&gt; 简单的总结&lt;/h3&gt;
&lt;p&gt;下面我们对三种解析方式做一个简单比较。&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;解析方式&lt;/th&gt;
&lt;th&gt;对应的模块&lt;/th&gt;
&lt;th&gt;速度&lt;/th&gt;
&lt;th&gt;使用难度&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;正则表达式解析&lt;/td&gt;
&lt;td&gt;&lt;code&gt;re&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;困难&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XPath 解析&lt;/td&gt;
&lt;td&gt;&lt;code&gt;lxml&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;快&lt;/td&gt;
&lt;td&gt;一般&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;CSS 选择器解析&lt;/td&gt;
&lt;td&gt;&lt;code&gt;bs4&lt;/code&gt;  或 &lt;code&gt;pyquery&lt;/code&gt;&lt;/td&gt;
&lt;td&gt;不确定&lt;/td&gt;
&lt;td&gt;简单&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
        <item>
            <guid isPermalink="true">https://scottalive.github.io/computer-science/python/basic/62.%E7%94%A8Python%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90-1/</guid>
            <title>用Python获取网络数据</title>
            <link>https://scottalive.github.io/computer-science/python/basic/62.%E7%94%A8Python%E8%8E%B7%E5%8F%96%E7%BD%91%E7%BB%9C%E8%B5%84%E6%BA%90-1/</link>
            <category term="计算机科学" scheme="https://scottalive.github.io/categories/computer-science/" />
            <category term="Python" scheme="https://scottalive.github.io/categories/computer-science/python/" />
            <category term="Python基础" scheme="https://scottalive.github.io/categories/computer-science/python/basic/" />
            <category term="编程笔记" scheme="https://scottalive.github.io/tags/%E7%BC%96%E7%A8%8B%E7%AC%94%E8%AE%B0/" />
            <category term="python" scheme="https://scottalive.github.io/tags/python/" />
            <pubDate>Tue, 15 Apr 2025 03:07:49 +0800</pubDate>
            <description><![CDATA[ &lt;h2 id=&#34;用python获取网络数据&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#用python获取网络数据&#34;&gt;#&lt;/a&gt; 用 Python 获取网络数据&lt;/h2&gt;
&lt;p&gt;网络数据采集是 Python 语言非常擅长的领域，上节课我们讲到，实现网络数据采集的程序通常称之为网络爬虫或蜘蛛程序。即便是在大数据时代，数据对于中小企业来说仍然是硬伤和短板，有些数据需要通过开放或付费的数据接口来获得，其他的行业数据和竞对数据则必须要通过网络数据采集的方式来获得。不管使用哪种方式获取网络数据资源，Python 语言都是非常好的选择，因为 Python 的标准库和三方库都对网络数据采集提供了良好的支持。&lt;/p&gt;
&lt;h3 id=&#34;requests库&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#requests库&#34;&gt;#&lt;/a&gt; requests 库&lt;/h3&gt;
&lt;p&gt;要使用 Python 获取网络数据，我们推荐大家使用名为 &lt;code&gt;requests&lt;/code&gt;  的三方库，这个库我们在之前的课程中其实已经使用过了。按照官方网站的解释， &lt;code&gt;requests&lt;/code&gt;  是基于 Python 标准库进行了封装，简化了通过 HTTP 或 HTTPS 访问网络资源的操作。上课我们提到过，HTTP 是一个请求响应式的协议，当我们在浏览器中输入正确的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9MZWFybi9Db21tb25fcXVlc3Rpb25zL1doYXRfaXNfYV9VUkw=&#34;&gt;URL&lt;/span&gt;（通常也称为网址）并按下 Enter 键时，我们就向网络上的 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9MZWFybi9Db21tb25fcXVlc3Rpb25zL1doYXRfaXNfYV93ZWJfc2VydmVy&#34;&gt;Web 服务器&lt;/span&gt;发送了一个 HTTP 请求，服务器在收到请求后会给我们一个 HTTP 响应。在 Chrome 浏览器中的菜单中打开 “开发者工具” 切换到 “Network” 选项卡就能够查看 HTTP 请求和响应到底是什么样子的，如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/jackfrued/mypic/raw/master/20210822093434.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;p&gt;通过 &lt;code&gt;requests&lt;/code&gt;  库，我们可以让 Python 程序向浏览器一样向 Web 服务器发起请求，并接收服务器返回的响应，从响应中我们就可以提取出想要的数据。浏览器呈现给我们的网页是用 &lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvemgtQ04vZG9jcy9XZWIvSFRNTA==&#34;&gt;HTML&lt;/span&gt; 编写的，浏览器相当于是 HTML 的解释器环境，我们看到的网页中的内容都包含在 HTML 的标签中。在获取到 HTML 代码后，就可以从标签的属性或标签体中提取内容。下面例子演示了如何获取网页 HTML 代码，我们通过 &lt;code&gt;requests&lt;/code&gt;  库的 &lt;code&gt;get&lt;/code&gt;  函数，获取了搜狐首页的代码。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import requests

resp = requests.get(&#39;https://www.sohu.com/&#39;)
if resp.status_code == 200:
    print(resp.text)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面代码中的变量 &lt;code&gt;resp&lt;/code&gt;  是一个 &lt;code&gt;Response&lt;/code&gt;  对象（ &lt;code&gt;requests&lt;/code&gt;  库封装的类型），通过该对象的 &lt;code&gt;status_code&lt;/code&gt;  属性可以获取响应状态码，而该对象的 &lt;code&gt;text&lt;/code&gt;  属性可以帮我们获取到页面的 HTML 代码。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;由于 &lt;code&gt;Response&lt;/code&gt;  对象的 &lt;code&gt;text&lt;/code&gt;  是一个字符串，所以我们可以利用之前讲过的正则表达式的知识，从页面的 HTML 代码中提取新闻的标题和链接，代码如下所示。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import re

import requests

pattern = re.compile(r&#39;&amp;lt;a.*?href=&amp;quot;(.*?)&amp;quot;.*?title=&amp;quot;(.*?)&amp;quot;.*?&amp;gt;&#39;)
resp = requests.get(&#39;https://www.sohu.com/&#39;)
if resp.status_code == 200:
    all_matches = pattern.findall(resp.text)
    for href, title in all_matches:
        print(href)
        print(title)
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;除了文本内容，我们也可以使用 &lt;code&gt;requests&lt;/code&gt;  库通过 URL 获取二进制资源。下面的例子演示了如何获取百度 Logo 并保存到名为 &lt;code&gt;baidu.png&lt;/code&gt;  的本地文件中。可以在百度的首页上右键点击百度 Logo，并通过 “复制图片地址” 菜单项获取图片的 URL。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import requests

resp = requests.get(&#39;https://www.baidu.com/img/PCtm_d9c8750bed0b3c7d089fa7d55720d6cf.png&#39;)
with open(&#39;baidu.png&#39;, &#39;wb&#39;) as file:
    file.write(resp.content)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;： &lt;code&gt;Response&lt;/code&gt;  对象的 &lt;code&gt;content&lt;/code&gt;  属性可以获得服务器响应的二进制数据。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;code&gt;requests&lt;/code&gt;  库非常好用而且功能上也比较强大和完整，具体的内容我们在使用的过程中为大家一点点剖析。想解锁关于 &lt;code&gt;requests&lt;/code&gt;  库更多的知识，可以阅读它的&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9kb2NzLnB5dGhvbi1yZXF1ZXN0cy5vcmcvemhfQ04vbGF0ZXN0Lw==&#34;&gt;官方文档&lt;/span&gt;。&lt;/p&gt;
&lt;h3 id=&#34;编写爬虫代码&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#编写爬虫代码&#34;&gt;#&lt;/a&gt; 编写爬虫代码&lt;/h3&gt;
&lt;p&gt;接下来，我们以 “豆瓣电影” 为例，为大家讲解如何编写爬虫代码。按照上面提供的方法，我们先使用 &lt;code&gt;requests&lt;/code&gt;  获取到网页的 HTML 代码，然后将整个代码看成一个长字符串，这样我们就可以使用正则表达式的捕获组从字符串提取我们需要的内容。下面的代码演示了如何从&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tLw==&#34;&gt;豆瓣电影&lt;/span&gt;获取排前 250 名的电影的名称。&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL3RvcDI1MA==&#34;&gt;豆瓣电影 Top250&lt;/span&gt; 的页面结构和对应代码如下图所示，可以看出，每页共展示了 25 部电影，如果要获取到 Top250 数据，我们共需要访问 10 个页面，对应的地址是&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9tb3ZpZS5kb3ViYW4uY29tL3RvcDI1MD9zdGFydD14eHg=&#34;&gt; https://movie.douban.com/top250?start=xxx&lt;/span&gt;，这里的 &lt;code&gt;xxx&lt;/code&gt;  如果为 &lt;code&gt;0&lt;/code&gt;  就是第一页，如果 &lt;code&gt;xxx&lt;/code&gt;  的值是 &lt;code&gt;100&lt;/code&gt; ，那么我们可以访问到第五页。为了代码简单易读，我们只获取电影的标题和评分。&lt;/p&gt;
&lt;p&gt;&lt;img data-src=&#34;https://gitee.com/jackfrued/mypic/raw/master/20210822093447.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import random
import re
import time

import requests

for page in range(1, 11):
    resp = requests.get(
        url=f&#39;https://movie.douban.com/top250?start=&amp;#123;(page - 1) * 25&amp;#125;&#39;,
        # 如果不设置HTTP请求头中的User-Agent，豆瓣会检测出不是浏览器而阻止我们的请求。
        # 通过get函数的headers参数设置User-Agent的值，具体的值可以在浏览器的开发者工具查看到。
        # 用爬虫访问大部分网站时，将爬虫伪装成来自浏览器的请求都是非常重要的一步。
        headers=&amp;#123;&#39;User-Agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#39;&amp;#125;
    )
    # 通过正则表达式获取class属性为title且标签体不以&amp;amp;开头的span标签并用捕获组提取标签内容
    pattern1 = re.compile(r&#39;&amp;lt;span class=&amp;quot;title&amp;quot;&amp;gt;([^&amp;amp;]*?)&amp;lt;/span&amp;gt;&#39;)
    titles = pattern1.findall(resp.text)
    # 通过正则表达式获取class属性为rating_num的span标签并用捕获组提取标签内容
    pattern2 = re.compile(r&#39;&amp;lt;span class=&amp;quot;rating_num&amp;quot;.*?&amp;gt;(.*?)&amp;lt;/span&amp;gt;&#39;)
    ranks = pattern2.findall(resp.text)
    # 使用zip压缩两个列表，循环遍历所有的电影标题和评分
    for title, rank in zip(titles, ranks):
        print(title, rank)
    # 随机休眠1-5秒，避免爬取页面过于频繁
    time.sleep(random.random() * 4 + 1)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：通过分析豆瓣网的 robots 协议，我们发现豆瓣网并不拒绝百度爬虫获取它的数据，因此我们也可以将爬虫伪装成百度的爬虫，将 &lt;code&gt;get&lt;/code&gt;  函数的 &lt;code&gt;headers&lt;/code&gt;  参数修改为： &lt;code&gt;headers=&amp;#123;&#39;User-Agent&#39;: &#39;BaiduSpider&#39;&amp;#125;&lt;/code&gt; 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;使用-ip-代理&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#使用-ip-代理&#34;&gt;#&lt;/a&gt; 使用 IP 代理&lt;/h3&gt;
&lt;p&gt;让爬虫程序隐匿自己的身份对编写爬虫程序来说是比较重要的，很多网站对爬虫都比较反感的，因为爬虫会耗费掉它们很多的网络带宽并制造很多无效的流量。要隐匿身份通常需要使用&lt;strong&gt;商业 IP 代理&lt;/strong&gt;（如蘑菇代理、芝麻代理、快代理等），让被爬取的网站无法获取爬虫程序来源的真实 IP 地址，也就无法简单的通过 IP 地址对爬虫程序进行封禁。&lt;/p&gt;
&lt;p&gt;下面以&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5tb2d1cHJveHkuY29tLw==&#34;&gt;蘑菇代理&lt;/span&gt;为例，为大家讲解商业 IP 代理的使用方法。首先需要在该网站注册一个账号，注册账号后就可以&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cDovL3d3dy5tb2d1cHJveHkuY29tL2J1eQ==&#34;&gt;购买&lt;/span&gt;相应的套餐来获得商业 IP 代理。作为商业用途，建议大家购买不限量套餐，这样可以根据实际需要获取足够多的代理 IP 地址；作为学习用途，可以购买包时套餐或根据自己的需求来决定。蘑菇代理提供了两种接入代理的方式，分别是 API 私密代理和 HTTP 隧道代理，前者是通过请求蘑菇代理的 API 接口获取代理服务器地址，后者是直接使用统一的入口（蘑菇代理提供的域名）进行接入。&lt;/p&gt;
&lt;p&gt;&amp;lt;img src=&amp;quot;&lt;span class=&#34;exturl&#34; data-url=&#34;aHR0cHM6Ly9naXRlZS5jb20vamFja2ZydWVkL215cGljL3Jhdy9tYXN0ZXIvMjAyMTA4MjkwODA2NDcucG5n&#34;&gt;https://gitee.com/jackfrued/mypic/raw/master/20210829080647.png&lt;/span&gt;&amp;quot; width=&amp;quot;75%&amp;quot;&amp;gt;&lt;/p&gt;
&lt;p&gt;下面，我们以 HTTP 隧道代理为例，为大家讲解接入 IP 代理的方式，大家也可以直接参考蘑菇代理官网提供的代码来为爬虫设置代理。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-Python&#34;&gt;import requests

APP_KEY = &#39;Wnp******************************XFx&#39;
PROXY_HOST = &#39;secondtransfer.moguproxy.com:9001&#39;

for page in range(1, 11):
    resp = requests.get(
        url=f&#39;https://movie.douban.com/top250?start=&amp;#123;(page - 1) * 25&amp;#125;&#39;,
        # 需要在HTTP请求头设置代理的身份认证方式
        headers=&amp;#123;
            &#39;Proxy-Authorization&#39;: f&#39;Basic &amp;#123;APP_KEY&amp;#125;&#39;,
            &#39;User-Agent&#39;: &#39;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_14_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/92.0.4515.159 Safari/537.36&#39;,
            &#39;Accept-Language&#39;: &#39;zh-CN,zh;q=0.8,en-US;q=0.6,en;q=0.4&#39;
        &amp;#125;,
        # 设置代理服务器
        proxies=&amp;#123;
            &#39;http&#39;: f&#39;http://&amp;#123;PROXY_HOST&amp;#125;&#39;,
            &#39;https&#39;: f&#39;https://&amp;#123;PROXY_HOST&amp;#125;&#39;
        &amp;#125;,
        verify=False
    )
    pattern1 = re.compile(r&#39;&amp;lt;span class=&amp;quot;title&amp;quot;&amp;gt;([^&amp;amp;]*?)&amp;lt;/span&amp;gt;&#39;)
    titles = pattern1.findall(resp.text)
    pattern2 = re.compile(r&#39;&amp;lt;span class=&amp;quot;rating_num&amp;quot;.*?&amp;gt;(.*?)&amp;lt;/span&amp;gt;&#39;)
    ranks = pattern2.findall(resp.text)
    for title, rank in zip(titles, ranks):
        print(title, rank)
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;说明&lt;/strong&gt;：上面的代码需要修改 &lt;code&gt;APP_KEY&lt;/code&gt;  为自己创建的订单对应的 &lt;code&gt;Appkey&lt;/code&gt;  值，这个值可以在用户中心用户订单中查看到。蘑菇代理提供了免费的 API 代理和 HTTP 隧道代理试用，但是试用的代理接通率不能保证，建议大家还是直接购买一个在自己支付能力范围内的代理服务来体验。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&#34;简单的总结&#34;&gt;&lt;a class=&#34;anchor&#34; href=&#34;#简单的总结&#34;&gt;#&lt;/a&gt; 简单的总结&lt;/h3&gt;
&lt;p&gt;Python 语言能做的事情真的很多，就网络数据采集这一项而言，Python 几乎是一枝独秀的，大量的企业和个人都在使用 Python 从网络上获取自己需要的数据，这可能也是你将来日常工作的一部分。另外，用编写正则表达式的方式从网页中提取内容虽然可行，但是写出一个能够满足需求的正则表达式本身也不是件容易的事情，这一点对于新手来说尤为明显。在下一节课中，我们将会为大家介绍另外两种从页面中提取数据的方法，虽然从性能上来讲，它们可能不如正则表达式，但是却降低了编码的复杂性，相信大家会喜欢上它们的。&lt;/p&gt;
&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kity@2.0.4/dist/kity.min.js&#34;&gt;&lt;/script&gt;&lt;script type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/kityminder-core@1.4.50/dist/kityminder.core.min.js&#34;&gt;&lt;/script&gt;&lt;script defer=&#34;true&#34; type=&#34;text&amp;#x2F;javascript&#34; src=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.js&#34;&gt;&lt;/script&gt;&lt;link rel=&#34;stylesheet&#34; type=&#34;text&amp;#x2F;css&#34; href=&#34;https://unpkg.com/hexo-simple-mindmap@0.8.0/dist/mindmap.min.css&#34;&gt; ]]></description>
        </item>
    </channel>
</rss>
